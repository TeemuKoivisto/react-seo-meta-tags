{"version":3,"file":"query-compiler.js","names":["_","require","path","normalize","glob","validate","print","visit","visitWithTypeInfo","TypeInfo","isAbstractType","Kind","FragmentsOnCompositeTypesRule","LoneAnonymousOperationRule","PossibleFragmentSpreadsRule","ScalarLeafsRule","ValuesOfCorrectTypeRule","VariablesAreInputTypesRule","VariablesInAllowedPositionRule","store","default","FileParser","graphqlError","multipleRootQueriesError","duplicateFragmentError","unknownFragmentError","report","errorParser","locInGraphQlToLocInFile","overlayErrorID","compile","parentSpan","program","schema","flattenedPlugins","getState","activity","activityTimer","id","start","errors","addError","push","bind","parsedQueries","parseQueries","base","directory","additional","resolveThemes","map","plugin","themeDir","pluginFilepath","span","queries","processQueries","length","structuredErrors","panicOnBuild","process","env","gatsby_executing_command","websocketManager","emitError","end","themes","reduce","merged","theme","filesRegex","pathRegex","modulesThatUseGatsby","getGatsbyDependents","files","join","module","folderPath","sync","nodir","filter","d","match","concat","Array","from","components","keys","c","uniq","parser","parseFiles","definitionsByName","operations","extractOperations","dispatch","actions","setGraphQLDefinitions","processDefinitions","preValidationRules","Map","filePath","text","templateLoc","hash","doc","originalDoc","isHook","isStaticQuery","isConfigQuery","originalQueryText","ast","transformedDocument","hasChanged","tranformDocument","newErrors","warn","error","location","locations","message","queryExtractionGraphQLError","componentPath","definitions","forEach","def","name","value","printedAst","kind","OPERATION_DEFINITION","templatePath","getPathToLayoutComponent","FRAGMENT_DEFINITION","has","otherDef","get","leftDefinition","rightDefinition","delete","set","isFragment","processedQueries","fragmentsUsedByFragment","fragmentNames","entries","operation","originalDefinition","usedFragments","missingFragments","determineUsedFragmentsForDefinition","definition","node","document","DOCUMENT","values","formattedMessage","printedDocument","otherQuery","query","originalText","String","kebabCase","relative","NODE_ENV","useContext","traversalPath","cachedUsedFragments","Set","FRAGMENT_SPREAD","fragmentDefinition","includes","add","usedFragmentsForFragment","missingFragmentsForFragment","pop","fragmentName"],"sources":["../../src/query/query-compiler.js"],"sourcesContent":["// @flow\n\n/** Query compiler extracts queries and fragments from all files, validates them\n * and then collocates them with fragments they require. This way fragments\n * have global scope and can be used in any other query or fragment.\n */\n\nconst _ = require(`lodash`)\n\nconst path = require(`path`)\nconst normalize = require(`normalize-path`)\nconst glob = require(`glob`)\n\nconst {\n  validate,\n  print,\n  visit,\n  visitWithTypeInfo,\n  TypeInfo,\n  isAbstractType,\n  Kind,\n  FragmentsOnCompositeTypesRule,\n  LoneAnonymousOperationRule,\n  PossibleFragmentSpreadsRule,\n  ScalarLeafsRule,\n  ValuesOfCorrectTypeRule,\n  VariablesAreInputTypesRule,\n  VariablesInAllowedPositionRule,\n} = require(`graphql`)\n\nimport { getGatsbyDependents } from \"../utils/gatsby-dependents\"\nconst { store } = require(`../redux`)\nimport { actions } from \"../redux/actions\"\n\nimport { websocketManager } from \"../utils/websocket-manager\"\nimport { getPathToLayoutComponent } from \"gatsby-core-utils\"\nimport { tranformDocument } from \"./transform-document\"\nconst { default: FileParser } = require(`./file-parser`)\nconst {\n  graphqlError,\n  multipleRootQueriesError,\n  duplicateFragmentError,\n  unknownFragmentError,\n} = require(`./graphql-errors`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst {\n  default: errorParser,\n  locInGraphQlToLocInFile,\n} = require(`./error-parser`)\n\nconst overlayErrorID = `graphql-compiler`\n\nexport default async function compile({ parentSpan } = {}): Promise<\n  Map<string, RootQuery>\n> {\n  const { program, schema, flattenedPlugins } = store.getState()\n\n  const activity = report.activityTimer(`extract queries from components`, {\n    parentSpan,\n    id: `query-extraction`,\n  })\n  activity.start()\n\n  const errors = []\n  const addError = errors.push.bind(errors)\n\n  const parsedQueries = await parseQueries({\n    base: program.directory,\n    additional: resolveThemes(\n      flattenedPlugins.map(plugin => {\n        return {\n          themeDir: plugin.pluginFilepath,\n        }\n      })\n    ),\n    addError,\n    parentSpan: activity.span,\n  })\n\n  const queries = processQueries({\n    schema,\n    parsedQueries,\n    addError,\n    parentSpan: activity.span,\n  })\n\n  if (errors.length !== 0) {\n    const structuredErrors = activity.panicOnBuild(errors)\n    if (process.env.gatsby_executing_command === `develop`) {\n      websocketManager.emitError(overlayErrorID, structuredErrors)\n    }\n  } else {\n    if (process.env.gatsby_executing_command === `develop`) {\n      // emitError with `null` as 2nd param to clear browser error overlay\n      websocketManager.emitError(overlayErrorID, null)\n    }\n  }\n  activity.end()\n\n  return queries\n}\n\nexport const resolveThemes = (themes = []) =>\n  themes.reduce((merged, theme) => {\n    merged.push(theme.themeDir)\n    return merged\n  }, [])\n\nexport const parseQueries = async ({\n  base,\n  additional,\n  addError,\n  parentSpan,\n}) => {\n  const filesRegex = `*.?(m|c)+(t|j)s?(x)`\n  // Pattern that will be appended to searched directories.\n  // It will match any .js, .jsx, .ts, .tsx, .cjs, .cjsx,\n  // .cts, .ctsx, .mjs, .mjsx, .mts, and .mtsx files,\n  // that are not inside <searched_directory>/node_modules.\n  const pathRegex = `/{${filesRegex},!(node_modules)/**/${filesRegex}}`\n\n  const modulesThatUseGatsby = await getGatsbyDependents()\n\n  let files = [\n    path.join(base, `src`),\n    path.join(base, `.cache`, `fragments`),\n    ...additional.map(additional => path.join(additional, `src`)),\n    ...modulesThatUseGatsby.map(module => module.path),\n  ].reduce((merged, folderPath) => {\n    merged.push(\n      ...glob.sync(path.join(folderPath, pathRegex), {\n        nodir: true,\n      })\n    )\n    return merged\n  }, [])\n\n  files = files.filter(d => !d.match(/\\.d\\.ts$/))\n\n  files = files.map(normalize)\n\n  // We should be able to remove the following and preliminary tests do suggest\n  // that they aren't needed anymore since we transpile node_modules now\n  // However, there could be some cases (where a page is outside of src for example)\n  // that warrant keeping this and removing later once we have more confidence (and tests)\n\n  // Ensure all page components added as they're not necessarily in the\n  // pages directory e.g. a plugin could add a page component. Plugins\n  // *should* copy their components (if they add a query) to .cache so that\n  // our babel plugin to remove the query on building is active.\n  // Otherwise the component will throw an error in the browser of\n  // \"graphql is not defined\".\n  files = files.concat(\n    Array.from(store.getState().components.keys(), c => normalize(c))\n  )\n\n  files = _.uniq(files)\n\n  const parser = new FileParser({ parentSpan: parentSpan })\n\n  return await parser.parseFiles(files, addError)\n}\n\nexport const processQueries = ({\n  schema,\n  parsedQueries,\n  addError,\n  parentSpan,\n}) => {\n  const { definitionsByName, operations } = extractOperations(\n    schema,\n    parsedQueries,\n    addError,\n    parentSpan\n  )\n\n  store.dispatch(actions.setGraphQLDefinitions(definitionsByName))\n\n  return processDefinitions({\n    schema,\n    operations,\n    definitionsByName,\n    addError,\n    parentSpan,\n  })\n}\n\nconst preValidationRules = [\n  LoneAnonymousOperationRule,\n  FragmentsOnCompositeTypesRule,\n  VariablesAreInputTypesRule,\n  ScalarLeafsRule,\n  PossibleFragmentSpreadsRule,\n  ValuesOfCorrectTypeRule,\n  VariablesInAllowedPositionRule,\n]\n\nconst extractOperations = (schema, parsedQueries, addError, parentSpan) => {\n  const definitionsByName = new Map()\n  const operations = []\n\n  for (const {\n    filePath,\n    text,\n    templateLoc,\n    hash,\n    doc: originalDoc,\n    isHook,\n    isStaticQuery,\n    isConfigQuery,\n  } of parsedQueries) {\n    let doc = originalDoc\n\n    let errors = validate(schema, doc, preValidationRules)\n    if (errors && errors.length) {\n      const originalQueryText = print(originalDoc)\n      const { ast: transformedDocument, hasChanged } = tranformDocument(doc)\n      if (hasChanged) {\n        const newErrors = validate(\n          schema,\n          transformedDocument,\n          preValidationRules\n        )\n        if (newErrors.length === 0) {\n          report.warn(\n            `Deprecated syntax of sort and/or aggregation field arguments were found in your query (see https://gatsby.dev/graphql-nested-sort-and-aggregate). Query was automatically converted to a new syntax. You should update query in your code.\\n\\nFile: ${filePath}\\n\\nCurrent query:\\n\\n${originalQueryText}\\n\\nConverted query:\\n\\n${print(\n              transformedDocument\n            )}`\n          )\n          doc = transformedDocument\n          errors = newErrors\n        }\n      }\n    }\n\n    if (errors && errors.length) {\n      addError(\n        ...errors.map(error => {\n          const location = {\n            start: locInGraphQlToLocInFile(templateLoc, error.locations[0]),\n          }\n          return errorParser({\n            message: error.message,\n            filePath,\n            location,\n            error,\n          })\n        })\n      )\n\n      store.dispatch(\n        actions.queryExtractionGraphQLError({\n          componentPath: filePath,\n        })\n      )\n      // Something is super wrong with this document, so we report it and skip\n      continue\n    }\n\n    doc.definitions.forEach((def: any) => {\n      const name = def.name.value\n      let printedAst = null\n      if (def.kind === Kind.OPERATION_DEFINITION) {\n        operations.push({\n          def,\n          filePath,\n          templatePath: getPathToLayoutComponent(filePath),\n          hash,\n        })\n      } else if (def.kind === Kind.FRAGMENT_DEFINITION) {\n        // Check if we already registered a fragment with this name\n        printedAst = print(def)\n        if (definitionsByName.has(name)) {\n          const otherDef = definitionsByName.get(name)\n          // If it's not an accidental duplicate fragment, but is a different\n          // one - we report an error\n          if (printedAst !== otherDef.printedAst) {\n            addError(\n              duplicateFragmentError({\n                name,\n                leftDefinition: {\n                  def,\n                  filePath,\n                  text,\n                  templateLoc,\n                },\n                rightDefinition: otherDef,\n              })\n            )\n            // We won't know which one to use, so it's better to fail both of\n            // them.\n            definitionsByName.delete(name)\n          }\n          return\n        }\n      }\n\n      definitionsByName.set(name, {\n        name,\n        def,\n        filePath,\n        text: text,\n        templateLoc,\n        printedAst,\n        isHook,\n        isStaticQuery,\n        isConfigQuery,\n        isFragment: def.kind === Kind.FRAGMENT_DEFINITION,\n        hash: hash,\n        templatePath: getPathToLayoutComponent(filePath),\n      })\n    })\n  }\n\n  return {\n    definitionsByName,\n    operations,\n  }\n}\n\nconst processDefinitions = ({\n  schema,\n  operations,\n  definitionsByName,\n  addError,\n  parentSpan,\n}) => {\n  const processedQueries: Queries = new Map()\n\n  const fragmentsUsedByFragment = new Map()\n\n  const fragmentNames = Array.from(definitionsByName.entries())\n    .filter(([_, def]) => def.isFragment)\n    .map(([name, _]) => name)\n\n  for (const operation of operations) {\n    const { filePath, templatePath, def } = operation\n    const name = def.name.value\n    const originalDefinition = definitionsByName.get(name)\n\n    const { usedFragments, missingFragments } =\n      determineUsedFragmentsForDefinition(\n        originalDefinition,\n        definitionsByName,\n        fragmentsUsedByFragment\n      )\n\n    if (missingFragments.length > 0) {\n      for (const { filePath, definition, node } of missingFragments) {\n        store.dispatch(\n          actions.queryExtractionGraphQLError({\n            componentPath: filePath,\n          })\n        )\n        addError(\n          unknownFragmentError({\n            fragmentNames,\n            filePath,\n            definition,\n            node,\n          })\n        )\n      }\n      continue\n    }\n\n    const document = {\n      kind: Kind.DOCUMENT,\n      definitions: Array.from(usedFragments.values())\n        .map(name => definitionsByName.get(name).def)\n        .concat([operation.def]),\n    }\n\n    const errors = validate(schema, document)\n\n    if (errors && errors.length) {\n      for (const error of errors) {\n        const { formattedMessage, message } = graphqlError(\n          definitionsByName,\n          error\n        )\n\n        const filePath = originalDefinition.filePath\n        store.dispatch(\n          actions.queryExtractionGraphQLError({\n            componentPath: filePath,\n            error: formattedMessage,\n          })\n        )\n        const location = locInGraphQlToLocInFile(\n          originalDefinition.templateLoc,\n          error.locations[0]\n        )\n        addError(\n          errorParser({\n            location: {\n              start: location,\n              end: location,\n            },\n            message,\n            filePath,\n            error,\n          })\n        )\n      }\n      continue\n    }\n\n    const printedDocument = print(document)\n    // Check for duplicate page/static queries in the same component.\n    // (config query is not a duplicate of page/static query in the component)\n    // TODO: make sure there is at most one query type per component (e.g. one config + one page)\n    if (processedQueries.has(filePath) && !originalDefinition.isConfigQuery) {\n      const otherQuery = processedQueries.get(filePath)\n\n      if (\n        templatePath !== otherQuery.templatePath ||\n        printedDocument !== otherQuery.text\n      ) {\n        addError(\n          multipleRootQueriesError(\n            filePath,\n            originalDefinition.def,\n            otherQuery && definitionsByName.get(otherQuery.name).def\n          )\n        )\n\n        store.dispatch(\n          actions.queryExtractionGraphQLError({\n            componentPath: filePath,\n          })\n        )\n        continue\n      }\n    }\n\n    const query = {\n      name,\n      text: printedDocument,\n      originalText: originalDefinition.text,\n      path: filePath,\n      isHook: originalDefinition.isHook,\n      isStaticQuery: originalDefinition.isStaticQuery,\n      isConfigQuery: originalDefinition.isConfigQuery,\n      templatePath,\n      // ensure hash should be a string and not a number\n      hash: String(originalDefinition.hash),\n    }\n\n    if (query.isStaticQuery) {\n      query.id =\n        `sq--` +\n        _.kebabCase(\n          `${path.relative(store.getState().program.directory, filePath)}`\n        )\n    }\n\n    if (\n      query.isHook &&\n      process.env.NODE_ENV === `production` &&\n      typeof require(`react`).useContext !== `function`\n    ) {\n      report.panicOnBuild(\n        `You're likely using a version of React that doesn't support Hooks\\n` +\n          `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n      )\n    }\n\n    // Our current code only supports single graphql query per file (page or static query per file)\n    // So, not adding config query because it can overwrite existing page query\n    // TODO: allow multiple queries in single file, while preserving limitation of a single page query per file\n    if (!query.isConfigQuery) {\n      processedQueries.set(filePath, query)\n    }\n  }\n\n  return processedQueries\n}\n\nconst determineUsedFragmentsForDefinition = (\n  definition,\n  definitionsByName,\n  fragmentsUsedByFragment,\n  traversalPath = []\n) => {\n  const { def, name, isFragment, filePath } = definition\n  const cachedUsedFragments = fragmentsUsedByFragment.get(name)\n  if (cachedUsedFragments) {\n    return { usedFragments: cachedUsedFragments, missingFragments: [] }\n  } else {\n    const usedFragments = new Set()\n    const missingFragments = []\n    visit(def, {\n      [Kind.FRAGMENT_SPREAD]: node => {\n        const name = node.name.value\n        const fragmentDefinition = definitionsByName.get(name)\n        if (fragmentDefinition) {\n          if (traversalPath.includes(name)) {\n            // Already visited this fragment during current traversal.\n            //   Visiting it again will cause a stack overflow\n            return\n          }\n          traversalPath.push(name)\n          usedFragments.add(name)\n          const {\n            usedFragments: usedFragmentsForFragment,\n            missingFragments: missingFragmentsForFragment,\n          } = determineUsedFragmentsForDefinition(\n            fragmentDefinition,\n            definitionsByName,\n            fragmentsUsedByFragment,\n            traversalPath\n          )\n          traversalPath.pop()\n          usedFragmentsForFragment.forEach(fragmentName =>\n            usedFragments.add(fragmentName)\n          )\n          missingFragments.push(...missingFragmentsForFragment)\n        } else {\n          missingFragments.push({\n            filePath,\n            definition,\n            node,\n          })\n        }\n      },\n    })\n    if (isFragment) {\n      fragmentsUsedByFragment.set(name, usedFragments)\n    }\n    return { usedFragments, missingFragments }\n  }\n}\n"],"mappings":"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"}