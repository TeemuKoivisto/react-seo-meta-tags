{"version":3,"file":"in-memory-datastore.js","names":["getNodes","nodes","store","getState","Map","Array","from","values","getNodesByType","type","nodesByType","get","iterateNodes","GatsbyIterable","iterateNodesByType","getNode","id","getTypes","keys","sort","countNodes","typeName","size","runQuery","args","Promise","resolve","runFastFiltersAndSort","readyPromise","undefined","ready","setupInMemoryStore"],"sources":["../../../src/datastore/in-memory/in-memory-datastore.ts"],"sourcesContent":["import { IDataStore, IQueryResult } from \"../types\"\nimport { store } from \"../../redux\"\nimport { IGatsbyNode } from \"../../redux/types\"\nimport { GatsbyIterable } from \"../common/iterable\"\nimport { IRunFilterArg, runFastFiltersAndSort } from \"./run-fast-filters\"\n\n/**\n * @deprecated\n */\nfunction getNodes(): Array<IGatsbyNode> {\n  const nodes = store.getState().nodes ?? new Map()\n  return Array.from(nodes.values())\n}\n\n/**\n * @deprecated\n */\nfunction getNodesByType(type: string): Array<IGatsbyNode> {\n  const nodes = store.getState().nodesByType.get(type) ?? new Map()\n  return Array.from(nodes.values())\n}\n\nfunction iterateNodes(): GatsbyIterable<IGatsbyNode> {\n  const nodes = store.getState().nodes ?? new Map()\n  return new GatsbyIterable(nodes.values())\n}\n\nfunction iterateNodesByType(type: string): GatsbyIterable<IGatsbyNode> {\n  const nodes = store.getState().nodesByType.get(type) ?? new Map()\n  return new GatsbyIterable(nodes.values())\n}\n\nfunction getNode(id: string): IGatsbyNode | undefined {\n  return store.getState().nodes.get(id)\n}\n\nfunction getTypes(): Array<string> {\n  // Note: sorting to match the output of the LMDB version (where keys are sorted by default)\n  return Array.from(store.getState().nodesByType.keys()).sort()\n}\n\nfunction countNodes(typeName?: string): number {\n  if (!typeName) {\n    return store.getState().nodes.size\n  }\n  const nodes = store.getState().nodesByType.get(typeName)\n  return nodes ? nodes.size : 0\n}\n\nfunction runQuery(args: IRunFilterArg): Promise<IQueryResult> {\n  return Promise.resolve(runFastFiltersAndSort(args))\n}\n\nconst readyPromise = Promise.resolve(undefined)\n\n/**\n * Returns promise that resolves when the store is ready for reads\n * (the in-memory store is always ready)\n */\nfunction ready(): Promise<void> {\n  return readyPromise\n}\n\nexport function setupInMemoryStore(): IDataStore {\n  return {\n    getNode,\n    getTypes,\n    countNodes,\n    ready,\n    iterateNodes,\n    iterateNodesByType,\n    runQuery,\n\n    // deprecated:\n    getNodes,\n    getNodesByType,\n  }\n}\n"],"mappings":";;;;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA,SAASA,QAAQ,GAAuB;EAAA;EACtC,MAAMC,KAAK,4BAAGC,YAAK,CAACC,QAAQ,EAAE,CAACF,KAAK,yEAAI,IAAIG,GAAG,EAAE;EACjD,OAAOC,KAAK,CAACC,IAAI,CAACL,KAAK,CAACM,MAAM,EAAE,CAAC;AACnC;;AAEA;AACA;AACA;AACA,SAASC,cAAc,CAACC,IAAY,EAAsB;EAAA;EACxD,MAAMR,KAAK,6BAAGC,YAAK,CAACC,QAAQ,EAAE,CAACO,WAAW,CAACC,GAAG,CAACF,IAAI,CAAC,2EAAI,IAAIL,GAAG,EAAE;EACjE,OAAOC,KAAK,CAACC,IAAI,CAACL,KAAK,CAACM,MAAM,EAAE,CAAC;AACnC;AAEA,SAASK,YAAY,GAAgC;EAAA;EACnD,MAAMX,KAAK,6BAAGC,YAAK,CAACC,QAAQ,EAAE,CAACF,KAAK,2EAAI,IAAIG,GAAG,EAAE;EACjD,OAAO,IAAIS,wBAAc,CAACZ,KAAK,CAACM,MAAM,EAAE,CAAC;AAC3C;AAEA,SAASO,kBAAkB,CAACL,IAAY,EAA+B;EAAA;EACrE,MAAMR,KAAK,6BAAGC,YAAK,CAACC,QAAQ,EAAE,CAACO,WAAW,CAACC,GAAG,CAACF,IAAI,CAAC,2EAAI,IAAIL,GAAG,EAAE;EACjE,OAAO,IAAIS,wBAAc,CAACZ,KAAK,CAACM,MAAM,EAAE,CAAC;AAC3C;AAEA,SAASQ,OAAO,CAACC,EAAU,EAA2B;EACpD,OAAOd,YAAK,CAACC,QAAQ,EAAE,CAACF,KAAK,CAACU,GAAG,CAACK,EAAE,CAAC;AACvC;AAEA,SAASC,QAAQ,GAAkB;EACjC;EACA,OAAOZ,KAAK,CAACC,IAAI,CAACJ,YAAK,CAACC,QAAQ,EAAE,CAACO,WAAW,CAACQ,IAAI,EAAE,CAAC,CAACC,IAAI,EAAE;AAC/D;AAEA,SAASC,UAAU,CAACC,QAAiB,EAAU;EAC7C,IAAI,CAACA,QAAQ,EAAE;IACb,OAAOnB,YAAK,CAACC,QAAQ,EAAE,CAACF,KAAK,CAACqB,IAAI;EACpC;EACA,MAAMrB,KAAK,GAAGC,YAAK,CAACC,QAAQ,EAAE,CAACO,WAAW,CAACC,GAAG,CAACU,QAAQ,CAAC;EACxD,OAAOpB,KAAK,GAAGA,KAAK,CAACqB,IAAI,GAAG,CAAC;AAC/B;AAEA,SAASC,QAAQ,CAACC,IAAmB,EAAyB;EAC5D,OAAOC,OAAO,CAACC,OAAO,CAAC,IAAAC,qCAAqB,EAACH,IAAI,CAAC,CAAC;AACrD;AAEA,MAAMI,YAAY,GAAGH,OAAO,CAACC,OAAO,CAACG,SAAS,CAAC;;AAE/C;AACA;AACA;AACA;AACA,SAASC,KAAK,GAAkB;EAC9B,OAAOF,YAAY;AACrB;AAEO,SAASG,kBAAkB,GAAe;EAC/C,OAAO;IACLhB,OAAO;IACPE,QAAQ;IACRG,UAAU;IACVU,KAAK;IACLlB,YAAY;IACZE,kBAAkB;IAClBS,QAAQ;IAER;IACAvB,QAAQ;IACRQ;EACF,CAAC;AACH"}