{"version":3,"file":"client-assets-for-template.js","names":["join","path","posix","inlineCssPromiseCache","Map","readWebpackStats","publicDir","filePath","rawPageData","fs","readFile","JSON","parse","getScriptsAndStylesForTemplate","componentChunkName","webpackStats","uniqScripts","uniqStyles","handleAsset","name","rel","shouldGenerateLink","uniqueAssetsMap","endsWith","existingAsset","get","set","chunkName","assets","assetsByChunkName","filter","asset","childAssets","childAssetsByChunkName","Object","entries","scripts","scriptAsset","values","unshift","push","styles","styleAsset","getInlineCssPromise","process","cwd","content","reversedStyles","slice","reverse","reversedScripts","clearCache"],"sources":["../../src/utils/client-assets-for-template.ts"],"sourcesContent":["import * as path from \"path\"\nimport * as fs from \"fs-extra\"\n\n// we want to force posix-style joins, so Windows doesn't produce backslashes for urls\nconst { join } = path.posix\n\nexport interface IScriptsAndStyles {\n  scripts: Array<any>\n  styles: Array<any>\n  reversedStyles: Array<any>\n  reversedScripts: Array<any>\n}\n\ninterface IChunk {\n  name: string\n  rel: string\n  content?: string\n  shouldGenerateLink?: boolean\n}\n\nconst inlineCssPromiseCache = new Map<string, Promise<string>>()\n\nexport async function readWebpackStats(publicDir: string): Promise<any> {\n  const filePath = join(publicDir, `webpack.stats.json`)\n  const rawPageData = await fs.readFile(filePath, `utf-8`)\n\n  return JSON.parse(rawPageData)\n}\n\nexport async function getScriptsAndStylesForTemplate(\n  componentChunkName,\n  webpackStats\n): Promise<IScriptsAndStyles> {\n  const uniqScripts = new Map<string, IChunk>()\n  const uniqStyles = new Map<string, IChunk>()\n\n  /**\n   * Add script or style to correct bucket. Make sure those are unique (no duplicates) and that \"preload\" will win over any other \"rel\"\n   */\n  function handleAsset(\n    name: string,\n    rel: string,\n    shouldGenerateLink: boolean = false\n  ): void {\n    let uniqueAssetsMap: Map<string, IChunk> | undefined\n\n    // pick correct map depending on asset type\n    if (name.endsWith(`.js`)) {\n      uniqueAssetsMap = uniqScripts\n    } else if (name.endsWith(`.css`)) {\n      uniqueAssetsMap = uniqStyles\n    }\n\n    if (uniqueAssetsMap) {\n      const existingAsset = uniqueAssetsMap.get(name)\n\n      if (\n        existingAsset &&\n        rel === `preload` &&\n        existingAsset.rel !== `preload`\n      ) {\n        // if we already track this asset, but it's not preload - make sure we make it preload\n        // as it has higher priority\n        existingAsset.rel = `preload`\n      } else if (!existingAsset) {\n        uniqueAssetsMap.set(name, { name, rel, shouldGenerateLink })\n      }\n    }\n  }\n\n  // Pick up scripts and styles that are used by a template using webpack.stats.json\n  for (const chunkName of [`app`, componentChunkName]) {\n    let assets = webpackStats.assetsByChunkName[chunkName]\n\n    if (!assets) {\n      continue\n    }\n\n    // Remove JS asset for templates\n    if (chunkName !== `app`) {\n      assets = assets.filter(asset => !asset.endsWith(`.js`))\n    }\n\n    for (const asset of assets) {\n      if (asset === `/`) {\n        continue\n      }\n\n      handleAsset(asset, `preload`)\n    }\n\n    // Handling for webpack magic comments, for example:\n    // import(/* webpackChunkName: \"<chunk_name>\", webpackPrefetch: true */ `<path_to_module>`)\n    // Shape of webpackStats.childAssetsByChunkName:\n    // {\n    //   childAssetsByChunkName: {\n    //     <name_of_top_level_chunk>: {\n    //       prefetch: [\n    //         \"<chunk_name>-<chunk_hash>.js\",\n    //       ]\n    //     }\n    //   }\n    // }\n\n    const childAssets = webpackStats.childAssetsByChunkName[chunkName]\n    if (!childAssets) {\n      continue\n    }\n\n    for (let [rel, assets] of Object.entries(childAssets)) {\n      // Remove JS asset for templates(magic comments)\n      if (chunkName !== `app`) {\n        // @ts-ignore TS doesn't like that assets is not typed and especially that it doesn't know that it's Iterable\n        assets = assets.filter(asset => !asset.endsWith(`.js`))\n      }\n\n      // @ts-ignore TS doesn't like that assets is not typed and especially that it doesn't know that it's Iterable\n      for (const asset of assets) {\n        // Use shouldGenerateLink to determines if  we should append link for magic comment asset(preload|prefetch) to head\n        const shouldGenerateLink = chunkName == `app` ? true : false\n        handleAsset(asset, rel, shouldGenerateLink)\n      }\n    }\n  }\n\n  // create scripts array, making sure \"preload\" scripts have priority\n  const scripts: Array<IChunk> = []\n  for (const scriptAsset of uniqScripts.values()) {\n    if (scriptAsset.rel === `preload`) {\n      // give priority to preload\n      scripts.unshift(scriptAsset)\n    } else {\n      scripts.push(scriptAsset)\n    }\n  }\n\n  // create styles array, making sure \"preload\" styles have priority and that we read .css content for non-prefetch \"rel\"s for inlining\n  const styles: Array<IChunk> = []\n  for (const styleAsset of uniqStyles.values()) {\n    if (styleAsset.rel !== `prefetch`) {\n      let getInlineCssPromise = inlineCssPromiseCache.get(styleAsset.name)\n      if (!getInlineCssPromise) {\n        getInlineCssPromise = fs.readFile(\n          join(process.cwd(), `public`, styleAsset.name),\n          `utf-8`\n        )\n\n        inlineCssPromiseCache.set(\n          styleAsset.name,\n          getInlineCssPromise as Promise<string>\n        )\n      }\n\n      styleAsset.content = await getInlineCssPromise\n    }\n\n    if (styleAsset.rel === `preload`) {\n      // give priority to preload\n      styles.unshift(styleAsset)\n    } else {\n      styles.push(styleAsset)\n    }\n  }\n\n  return {\n    scripts,\n    styles,\n    reversedStyles: styles.slice(0).reverse(),\n    reversedScripts: scripts.slice(0).reverse(),\n  }\n}\n\nexport function clearCache(): void {}\n"],"mappings":"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"}