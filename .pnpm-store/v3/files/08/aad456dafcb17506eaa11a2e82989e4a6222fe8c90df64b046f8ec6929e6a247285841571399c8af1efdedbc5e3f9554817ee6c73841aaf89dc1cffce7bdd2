{"version":3,"file":"queries.js","names":["FLAG_DIRTY_NEW_PAGE","FLAG_DIRTY_TEXT","FLAG_DIRTY_DATA","FLAG_DIRTY_PAGE_CONTEXT","FLAG_ERROR_EXTRACTION","FLAG_RUNNING_INFLIGHT","initialState","byNode","Map","byConnection","queryNodes","trackedQueries","trackedComponents","deletedQueries","Set","dirtyQueriesListToEmitViaWebsocket","initialQueryState","dirty","running","initialComponentState","componentPath","query","pages","errors","queriesReducer","state","action","type","path","payload","get","contextModified","registerQuery","setFlag","trackDirtyQuery","registerComponent","add","delete","name","apiName","queryId","component","values","clearNodeDependencies","clearConnectionDependencies","clear","hasFlag","set","id","forEach","dep","nodeId","connection","addNodeDependency","addConnectionDependency","node","queriesByNode","queriesByConnection","internal","queryStateChunk","assertCorrectWorkerState","mergeWorkerDataDependencies","allFlags","flag","nodeQueries","queryIds","queryNodeIds","process","env","GATSBY_QUERY_ON_DEMAND","push","workerStateChunk","queryState","keys","queries","connectionName","workerId","size","Error"],"sources":["../../../src/redux/reducers/queries.ts"],"sourcesContent":["import {\n  ActionsUnion,\n  IComponentState,\n  IGatsbyState,\n  IQueryState,\n} from \"../types\"\n\ntype QueryId = string // page query path or static query id\ntype ComponentPath = string\ntype NodeId = string\ntype ConnectionName = string\n\nexport const FLAG_DIRTY_NEW_PAGE = 0b0001\nexport const FLAG_DIRTY_TEXT = 0b0010\nexport const FLAG_DIRTY_DATA = 0b0100\nexport const FLAG_DIRTY_PAGE_CONTEXT = 0b1000\n\nexport const FLAG_ERROR_EXTRACTION = 0b0001\n\nexport const FLAG_RUNNING_INFLIGHT = 0b0001\n\nconst initialState = (): IGatsbyState[\"queries\"] => {\n  return {\n    byNode: new Map<NodeId, Set<QueryId>>(),\n    byConnection: new Map<ConnectionName, Set<QueryId>>(),\n    queryNodes: new Map<QueryId, Set<NodeId>>(),\n    trackedQueries: new Map<QueryId, IQueryState>(),\n    trackedComponents: new Map<ComponentPath, IComponentState>(),\n    deletedQueries: new Set<QueryId>(),\n    dirtyQueriesListToEmitViaWebsocket: [],\n  }\n}\n\nconst initialQueryState = (): IQueryState => {\n  return {\n    dirty: -1, // unknown, must be set right after init\n    running: 0,\n  }\n}\n\nconst initialComponentState = (): IComponentState => {\n  return {\n    componentPath: ``,\n    query: ``,\n    pages: new Set<QueryId>(),\n    errors: 0,\n    // TODO: staticQueries: new Set<QueryId>()\n  }\n}\n\n/**\n * Tracks query dirtiness. Dirty queries are queries that:\n *\n * - depend on nodes or node collections (via `actions.createPageDependency`) that have changed.\n * - have been recently extracted (or their query text has changed)\n * - belong to newly created pages (or pages with modified context)\n *\n * Dirty queries must be re-ran.\n */\nexport function queriesReducer(\n  state: IGatsbyState[\"queries\"] = initialState(),\n  action: ActionsUnion\n): IGatsbyState[\"queries\"] {\n  switch (action.type) {\n    case `DELETE_CACHE`:\n      return initialState()\n\n    case `CREATE_PAGE`: {\n      const { path, componentPath } = action.payload\n      let query = state.trackedQueries.get(path)\n      if (!query || action.contextModified) {\n        query = registerQuery(state, path)\n        query.dirty = setFlag(\n          query.dirty,\n          action.contextModified ? FLAG_DIRTY_PAGE_CONTEXT : FLAG_DIRTY_NEW_PAGE\n        )\n        state = trackDirtyQuery(state, path)\n      }\n      registerComponent(state, componentPath).pages.add(path)\n      state.deletedQueries.delete(path)\n      return state\n    }\n    case `CREATE_SLICE`: {\n      const { name, componentPath } = action.payload\n      const path = `slice--${name}`\n      let query = state.trackedQueries.get(path)\n      if (!query || action.contextModified) {\n        query = registerQuery(state, path)\n        query.dirty = setFlag(\n          query.dirty,\n          action.contextModified ? FLAG_DIRTY_PAGE_CONTEXT : FLAG_DIRTY_NEW_PAGE\n        )\n        state = trackDirtyQuery(state, path)\n      }\n      registerComponent(state, componentPath).pages.add(path)\n      state.deletedQueries.delete(path)\n      return state\n    }\n    case `DELETE_PAGE`: {\n      // Don't actually remove the page query from trackedQueries, just mark it as \"deleted\". Why?\n      //   We promote a technique of a consecutive deletePage/createPage calls in onCreatePage hook,\n      //   see https://www.gatsbyjs.com/docs/creating-and-modifying-pages/#pass-context-to-pages\n      //   If we remove a query and then re-add, it will be marked as dirty.\n      //   This is OK for cold cache but with warm cache we will re-run all of those queries (unnecessarily).\n      //   We will reconcile the state after createPages API call and actually delete those queries.\n      state.deletedQueries.add(action.payload.path)\n      return state\n    }\n    case `DELETE_SLICE`: {\n      const { name } = action.payload\n      const path = `slice--${name}`\n      state.deletedQueries.add(path)\n      return state\n    }\n    case `API_FINISHED`: {\n      if (action.payload.apiName !== `createPages`) {\n        return state\n      }\n      for (const queryId of state.deletedQueries) {\n        for (const component of state.trackedComponents.values()) {\n          component.pages.delete(queryId)\n        }\n        state = clearNodeDependencies(state, queryId)\n        state = clearConnectionDependencies(state, queryId)\n        state.trackedQueries.delete(queryId)\n      }\n      state.deletedQueries.clear()\n      return state\n    }\n    case `QUERY_EXTRACTED`: {\n      // Note: this action is called even in case of\n      // extraction error or missing query (with query === ``)\n      // TODO: use hash instead of a query text\n      const { componentPath, query } = action.payload\n      const component = registerComponent(state, componentPath)\n      if (hasFlag(component.errors, FLAG_ERROR_EXTRACTION)) {\n        return state\n      }\n      if (component.query !== query) {\n        // Invalidate all pages associated with a component when query text changes\n        for (const queryId of component.pages) {\n          const query = state.trackedQueries.get(queryId)\n          if (query) {\n            query.dirty = setFlag(query.dirty, FLAG_DIRTY_TEXT)\n            state = trackDirtyQuery(state, queryId)\n          }\n        }\n        component.query = query\n      }\n      return state\n    }\n    case `QUERY_EXTRACTION_GRAPHQL_ERROR`:\n    case `QUERY_EXTRACTION_BABEL_ERROR`:\n    case `QUERY_EXTRACTION_BABEL_SUCCESS`: {\n      const { componentPath } = action.payload\n      const component = registerComponent(state, componentPath)\n      const set = action.type !== `QUERY_EXTRACTION_BABEL_SUCCESS`\n      component.errors = setFlag(component.errors, FLAG_ERROR_EXTRACTION, set)\n      return state\n    }\n    case `REPLACE_STATIC_QUERY`: {\n      // Only called when static query text has changed, so no need to compare\n      // TODO: unify the behavior?\n      const query = registerQuery(state, action.payload.id)\n      query.dirty = setFlag(query.dirty, FLAG_DIRTY_TEXT)\n      // static queries are not on demand, so skipping tracking which\n      // queries were marked dirty recently\n      // state = trackDirtyQuery(state, action.payload.id)\n      state.deletedQueries.delete(action.payload.id)\n      return state\n    }\n    case `REMOVE_STATIC_QUERY`: {\n      state.deletedQueries.add(action.payload)\n      return state\n    }\n    case `CREATE_COMPONENT_DEPENDENCY`: {\n      action.payload.forEach(dep => {\n        const { path: queryId, nodeId, connection } = dep\n\n        if (nodeId) {\n          state = addNodeDependency(state, queryId, nodeId)\n        }\n        if (connection) {\n          state = addConnectionDependency(state, queryId, connection)\n        }\n      })\n\n      return state\n    }\n    case `QUERY_START`: {\n      // Reset data dependencies as they will be updated when running the query\n      const { path } = action.payload\n      state = clearNodeDependencies(state, path)\n      state = clearConnectionDependencies(state, path)\n      const query = state.trackedQueries.get(path)\n      if (query) {\n        query.running = setFlag(query.running, FLAG_RUNNING_INFLIGHT)\n      }\n      return state\n    }\n    case `CREATE_NODE`:\n    case `DELETE_NODE`: {\n      const node = action.payload\n      if (!node) {\n        return state\n      }\n      const queriesByNode = state.byNode.get(node.id) ?? []\n      const queriesByConnection =\n        state.byConnection.get(node.internal.type) ?? []\n\n      for (const queryId of queriesByNode) {\n        const query = state.trackedQueries.get(queryId)\n        if (query) {\n          query.dirty = setFlag(query.dirty, FLAG_DIRTY_DATA)\n          state = trackDirtyQuery(state, queryId)\n        }\n      }\n      for (const queryId of queriesByConnection) {\n        const query = state.trackedQueries.get(queryId)\n        if (query) {\n          query.dirty = setFlag(query.dirty, FLAG_DIRTY_DATA)\n          state = trackDirtyQuery(state, queryId)\n        }\n      }\n      return state\n    }\n    case `PAGE_QUERY_RUN`: {\n      const { path } = action.payload\n      const query = registerQuery(state, path)\n      query.dirty = 0\n      query.running = 0 // TODO: also\n      return state\n    }\n    case `SET_PROGRAM_STATUS`: {\n      if (action.payload === `BOOTSTRAP_FINISHED`) {\n        // Reset the running state (as it could've been persisted)\n        for (const [, query] of state.trackedQueries) {\n          query.running = 0\n        }\n        // Reset list of dirty queries (this is used only to notify runtime and it could've been persisted)\n        state.dirtyQueriesListToEmitViaWebsocket = []\n      }\n      return state\n    }\n    case `QUERY_CLEAR_DIRTY_QUERIES_LIST_TO_EMIT_VIA_WEBSOCKET`: {\n      state.dirtyQueriesListToEmitViaWebsocket = []\n      return state\n    }\n    case `MERGE_WORKER_QUERY_STATE`: {\n      // This action may be dispatched in cases where queries might not be included in the merge data\n      if (!action.payload.queryStateChunk) {\n        return state\n      }\n\n      assertCorrectWorkerState(action.payload)\n\n      state = mergeWorkerDataDependencies(state, action.payload)\n      return state\n    }\n    default:\n      return state\n  }\n}\n\nfunction setFlag(allFlags: number, flag: number, set = true): number {\n  if (allFlags < 0) {\n    allFlags = 0\n  }\n  return set ? allFlags | flag : allFlags & ~flag\n}\n\nexport function hasFlag(allFlags: number, flag: number): boolean {\n  return allFlags >= 0 && (allFlags & flag) > 0\n}\n\nfunction addNodeDependency(\n  state: IGatsbyState[\"queries\"],\n  queryId: QueryId,\n  nodeId: NodeId\n): IGatsbyState[\"queries\"] {\n  // Perf: using two-side maps.\n  //   Without additional `queryNodes` map we would have to loop through\n  //   all existing nodes in `clearNodeDependencies` to delete node <-> query dependency\n  let nodeQueries = state.byNode.get(nodeId)\n  if (!nodeQueries) {\n    nodeQueries = new Set<QueryId>()\n    state.byNode.set(nodeId, nodeQueries)\n  }\n  let queryNodes = state.queryNodes.get(queryId)\n  if (!queryNodes) {\n    queryNodes = new Set<NodeId>()\n    state.queryNodes.set(queryId, queryNodes)\n  }\n  nodeQueries.add(queryId)\n  queryNodes.add(nodeId)\n  return state\n}\n\nfunction addConnectionDependency(\n  state: IGatsbyState[\"queries\"],\n  queryId: QueryId,\n  connection: ConnectionName\n): IGatsbyState[\"queries\"] {\n  // Note: not using two-side maps for connections as associated overhead\n  //   for small number of elements is greater then benefits, so no perf. gains\n  let queryIds = state.byConnection.get(connection)\n  if (!queryIds) {\n    queryIds = new Set()\n    state.byConnection.set(connection, queryIds)\n  }\n  queryIds.add(queryId)\n  return state\n}\n\nfunction clearNodeDependencies(\n  state: IGatsbyState[\"queries\"],\n  queryId: QueryId\n): IGatsbyState[\"queries\"] {\n  const queryNodeIds = state.queryNodes.get(queryId) ?? new Set()\n  for (const nodeId of queryNodeIds) {\n    const nodeQueries = state.byNode.get(nodeId)\n    if (nodeQueries) {\n      nodeQueries.delete(queryId)\n    }\n  }\n  return state\n}\n\nfunction clearConnectionDependencies(\n  state: IGatsbyState[\"queries\"],\n  queryId: QueryId\n): IGatsbyState[\"queries\"] {\n  for (const [, queryIds] of state.byConnection) {\n    queryIds.delete(queryId)\n  }\n  return state\n}\n\nfunction registerQuery(\n  state: IGatsbyState[\"queries\"],\n  queryId: QueryId\n): IQueryState {\n  let query = state.trackedQueries.get(queryId)\n  if (!query) {\n    query = initialQueryState()\n    state.trackedQueries.set(queryId, query)\n  }\n  return query\n}\n\nfunction registerComponent(\n  state: IGatsbyState[\"queries\"],\n  componentPath: string\n): IComponentState {\n  let component = state.trackedComponents.get(componentPath)\n  if (!component) {\n    component = initialComponentState()\n    component.componentPath = componentPath\n    state.trackedComponents.set(componentPath, component)\n  }\n  return component\n}\n\nfunction trackDirtyQuery(\n  state: IGatsbyState[\"queries\"],\n  queryId: QueryId\n): IGatsbyState[\"queries\"] {\n  if (process.env.GATSBY_QUERY_ON_DEMAND) {\n    state.dirtyQueriesListToEmitViaWebsocket.push(queryId)\n  }\n\n  return state\n}\n\ninterface IWorkerStateChunk {\n  workerId: number\n  queryStateChunk: IGatsbyState[\"queries\"]\n}\n\nfunction mergeWorkerDataDependencies(\n  state: IGatsbyState[\"queries\"],\n  workerStateChunk: IWorkerStateChunk\n): IGatsbyState[\"queries\"] {\n  const queryState = workerStateChunk.queryStateChunk\n\n  // First clear data dependencies for all queries tracked by worker\n  for (const queryId of queryState.trackedQueries.keys()) {\n    state = clearNodeDependencies(state, queryId)\n    state = clearConnectionDependencies(state, queryId)\n  }\n\n  // Now re-add all data deps from worker\n  for (const [nodeId, queries] of queryState.byNode) {\n    for (const queryId of queries) {\n      state = addNodeDependency(state, queryId, nodeId)\n    }\n  }\n  for (const [connectionName, queries] of queryState.byConnection) {\n    for (const queryId of queries) {\n      state = addConnectionDependency(state, queryId, connectionName)\n    }\n  }\n  return state\n}\n\nfunction assertCorrectWorkerState({\n  queryStateChunk,\n  workerId,\n}: IWorkerStateChunk): void {\n  if (queryStateChunk.deletedQueries.size !== 0) {\n    throw new Error(\n      `Assertion failed: workerState.deletedQueries.size === 0 (worker #${workerId})`\n    )\n  }\n  if (queryStateChunk.trackedComponents.size !== 0) {\n    throw new Error(\n      `Assertion failed: queryStateChunk.trackedComponents.size === 0 (worker #${workerId})`\n    )\n  }\n  for (const query of queryStateChunk.trackedQueries.values()) {\n    if (query.dirty) {\n      throw new Error(\n        `Assertion failed: all worker queries are not dirty (worker #${workerId})`\n      )\n    }\n    if (query.running) {\n      throw new Error(\n        `Assertion failed: all worker queries are not running (worker #${workerId})`\n      )\n    }\n  }\n}\n"],"mappings":"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"}