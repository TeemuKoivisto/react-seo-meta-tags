{"version":3,"file":"zipkin-local.js","names":["logger","recorder","create","HttpLogger","endpoint","zipkin","BatchRecorder","timeout","tracer","ZipkinTracer","localServiceName","serviceName","sampler","CountingSampler","traceId128Bit","kind","_processQueue","queue","length","postBody","join","response","fetch","method","body","headers","status","err","errorListenerSet","emit","Error","console","error","stop","partialSpans","forEach","span","id","_timedOut","_writeSpan"],"sources":["../../../src/utils/tracer/zipkin-local.ts"],"sourcesContent":["import zipkin from \"zipkin\"\nimport { HttpLogger } from \"zipkin-transport-http\"\nimport ZipkinTracer from \"zipkin-javascript-opentracing\"\nimport fetch from \"node-fetch\"\nimport { ZipkinBatchRecorder, ZipkinHttpLogger } from \"./zipkin-types\"\n\nlet logger: ZipkinHttpLogger\nlet recorder: ZipkinBatchRecorder\n\n/**\n * Create and return an open-tracing compatible tracer. See\n * https://github.com/opentracing/opentracing-javascript/blob/master/src/tracer.ts\n */\nexport const create = (): ZipkinTracer => {\n  logger = new HttpLogger({\n    // endpoint of local docker zipkin instance\n    endpoint: `http://localhost:9411/api/v1/spans`,\n  }) as ZipkinHttpLogger\n\n  recorder = new zipkin.BatchRecorder({\n    logger,\n    // timeout = 60 hours, must be longer than site's build time\n    timeout: 60 * 60 * 60 * 1000000,\n  }) as ZipkinBatchRecorder\n\n  const tracer = new ZipkinTracer({\n    localServiceName: `gatsby`,\n    serviceName: `gatsby`,\n    // Sample 1 out of 1 spans (100%). When tracing production\n    // services, it is normal to sample 1 out of 10 requests so that\n    // tracing information doesn't impact site performance. But Gatsby\n    // is a build tool and only has \"1\" request (the\n    // build). Therefore, we must set this to 100% so that spans\n    // aren't missing\n    sampler: new zipkin.sampler.CountingSampler(1),\n    traceId128Bit: true,\n    recorder,\n    kind: `client`,\n  })\n\n  return tracer\n}\n\n// Workaround for issue in Zipkin HTTP Logger where Spans are not\n// cleared off their processing queue before the node.js process\n// exits. Code is mostly the same as the zipkin processQueue\n// implementation.\nconst _processQueue = async (): Promise<void> => {\n  if (logger.queue.length > 0) {\n    const postBody = `[${logger.queue.join(`,`)}]`\n    try {\n      const response = await fetch(logger.endpoint, {\n        method: `POST`,\n        body: postBody,\n        headers: logger.headers,\n        timeout: logger.timeout,\n      })\n\n      if (response.status !== 202) {\n        const err =\n          `Unexpected response while sending Zipkin data, status:` +\n          `${response.status}, body: ${postBody}`\n\n        if (logger.errorListenerSet) logger.emit(`error`, new Error(err))\n        else console.error(err)\n      }\n    } catch (error) {\n      const err = `Error sending Zipkin data ${error}`\n      if (logger.errorListenerSet) logger.emit(`error`, new Error(err))\n      else console.error(err)\n    }\n  }\n}\n\n/**\n * Run any tracer cleanup required before the node.js process\n * exits. For Zipkin HTTP, we must manually process any spans still on\n * the queue\n */\nexport const stop = async (): Promise<void> => {\n  // First, write all partial spans to the http logger\n  recorder.partialSpans.forEach((span, id) => {\n    if (recorder._timedOut(span)) {\n      recorder._writeSpan(id)\n    }\n  })\n\n  // Then tell http logger to process all spans in its queue\n  await _processQueue()\n}\n"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AAGA,IAAIA,MAAwB;AAC5B,IAAIC,QAA6B;;AAEjC;AACA;AACA;AACA;AACO,MAAMC,MAAM,GAAG,MAAoB;EACxCF,MAAM,GAAG,IAAIG,+BAAU,CAAC;IACtB;IACAC,QAAQ,EAAG;EACb,CAAC,CAAqB;EAEtBH,QAAQ,GAAG,IAAII,eAAM,CAACC,aAAa,CAAC;IAClCN,MAAM;IACN;IACAO,OAAO,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;EAC1B,CAAC,CAAwB;EAEzB,MAAMC,MAAM,GAAG,IAAIC,oCAAY,CAAC;IAC9BC,gBAAgB,EAAG,QAAO;IAC1BC,WAAW,EAAG,QAAO;IACrB;IACA;IACA;IACA;IACA;IACA;IACAC,OAAO,EAAE,IAAIP,eAAM,CAACO,OAAO,CAACC,eAAe,CAAC,CAAC,CAAC;IAC9CC,aAAa,EAAE,IAAI;IACnBb,QAAQ;IACRc,IAAI,EAAG;EACT,CAAC,CAAC;EAEF,OAAOP,MAAM;AACf,CAAC;;AAED;AACA;AACA;AACA;AAAA;AACA,MAAMQ,aAAa,GAAG,YAA2B;EAC/C,IAAIhB,MAAM,CAACiB,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;IAC3B,MAAMC,QAAQ,GAAI,IAAGnB,MAAM,CAACiB,KAAK,CAACG,IAAI,CAAE,GAAE,CAAE,GAAE;IAC9C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAM,IAAAC,kBAAK,EAACtB,MAAM,CAACI,QAAQ,EAAE;QAC5CmB,MAAM,EAAG,MAAK;QACdC,IAAI,EAAEL,QAAQ;QACdM,OAAO,EAAEzB,MAAM,CAACyB,OAAO;QACvBlB,OAAO,EAAEP,MAAM,CAACO;MAClB,CAAC,CAAC;MAEF,IAAIc,QAAQ,CAACK,MAAM,KAAK,GAAG,EAAE;QAC3B,MAAMC,GAAG,GACN,wDAAuD,GACvD,GAAEN,QAAQ,CAACK,MAAO,WAAUP,QAAS,EAAC;QAEzC,IAAInB,MAAM,CAAC4B,gBAAgB,EAAE5B,MAAM,CAAC6B,IAAI,CAAE,OAAM,EAAE,IAAIC,KAAK,CAACH,GAAG,CAAC,CAAC,MAC5DI,OAAO,CAACC,KAAK,CAACL,GAAG,CAAC;MACzB;IACF,CAAC,CAAC,OAAOK,KAAK,EAAE;MACd,MAAML,GAAG,GAAI,6BAA4BK,KAAM,EAAC;MAChD,IAAIhC,MAAM,CAAC4B,gBAAgB,EAAE5B,MAAM,CAAC6B,IAAI,CAAE,OAAM,EAAE,IAAIC,KAAK,CAACH,GAAG,CAAC,CAAC,MAC5DI,OAAO,CAACC,KAAK,CAACL,GAAG,CAAC;IACzB;EACF;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACO,MAAMM,IAAI,GAAG,YAA2B;EAC7C;EACAhC,QAAQ,CAACiC,YAAY,CAACC,OAAO,CAAC,CAACC,IAAI,EAAEC,EAAE,KAAK;IAC1C,IAAIpC,QAAQ,CAACqC,SAAS,CAACF,IAAI,CAAC,EAAE;MAC5BnC,QAAQ,CAACsC,UAAU,CAACF,EAAE,CAAC;IACzB;EACF,CAAC,CAAC;;EAEF;EACA,MAAMrB,aAAa,EAAE;AACvB,CAAC;AAAA"}