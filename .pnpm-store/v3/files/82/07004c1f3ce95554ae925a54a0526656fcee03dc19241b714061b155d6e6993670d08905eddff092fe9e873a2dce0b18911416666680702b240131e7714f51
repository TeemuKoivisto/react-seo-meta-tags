{"version":3,"file":"graphql-span-tracer.js","names":["GraphQLSpanTracer","constructor","name","activityArgs","parentActivity","report","phantomActivity","activities","Map","getParentActivity","start","end","forEach","activity","createResolverActivity","path","prev","key","parentSpan","getActivity","span","tags","field","pathToArray","join","setActivity","gqlPath","length","get","set"],"sources":["../../src/query/graphql-span-tracer.ts"],"sourcesContent":["import { Path } from \"graphql/jsutils/Path\"\n\nimport report from \"gatsby-cli/lib/reporter\"\nimport { IActivityArgs } from \"gatsby-cli/src/reporter/reporter\"\nimport { IPhantomReporter } from \"gatsby-cli/src/reporter/reporter-phantom\"\n\nimport { IGraphQLSpanTracer } from \"../schema/type-definitions\"\nimport { pathToArray } from \"./utils\"\n\n/**\n * Tracks and knows how to get a parent span for a particular\n *  point in query resolver for a particular query and path\n */\nexport default class GraphQLSpanTracer implements IGraphQLSpanTracer {\n  parentActivity: IPhantomReporter\n  activities: Map<string, IPhantomReporter>\n\n  constructor(name: string, activityArgs: IActivityArgs) {\n    this.parentActivity = report.phantomActivity(\n      name,\n      activityArgs\n    ) as IPhantomReporter\n    this.activities = new Map()\n  }\n\n  getParentActivity(): IPhantomReporter {\n    return this.parentActivity\n  }\n\n  start(): void {\n    this.parentActivity.start()\n  }\n\n  end(): void {\n    this.activities.forEach(activity => {\n      activity.end()\n    })\n    this.parentActivity.end()\n  }\n\n  createResolverActivity(path: Path, name: string): IPhantomReporter {\n    let prev: Path | undefined = path.prev\n    while (typeof prev?.key === `number`) {\n      prev = prev.prev\n    }\n    const parentSpan = this.getActivity(prev).span\n    const activity = report.phantomActivity(`GraphQL Resolver`, {\n      parentSpan,\n      tags: {\n        field: name,\n        path: pathToArray(path).join(`.`),\n      },\n    })\n    this.setActivity(path, activity)\n    return activity\n  }\n\n  getActivity(gqlPath: Path | undefined): IPhantomReporter {\n    const path = pathToArray(gqlPath)\n    let activity\n    if (path.length > 0) {\n      activity = this.activities.get(path.join(`.`))\n      if (activity) {\n        return activity\n      }\n    }\n\n    return this.parentActivity\n  }\n\n  setActivity(gqlPath: Path, activity: IPhantomReporter): void {\n    const path = pathToArray(gqlPath)\n    this.activities.set(path.join(`.`), activity)\n  }\n}\n"],"mappings":";;;;;AAEA;AAKA;AAEA;AACA;AACA;AACA;AACe,MAAMA,iBAAiB,CAA+B;EAInEC,WAAW,CAACC,IAAY,EAAEC,YAA2B,EAAE;IACrD,IAAI,CAACC,cAAc,GAAGC,iBAAM,CAACC,eAAe,CAC1CJ,IAAI,EACJC,YAAY,CACO;IACrB,IAAI,CAACI,UAAU,GAAG,IAAIC,GAAG,EAAE;EAC7B;EAEAC,iBAAiB,GAAqB;IACpC,OAAO,IAAI,CAACL,cAAc;EAC5B;EAEAM,KAAK,GAAS;IACZ,IAAI,CAACN,cAAc,CAACM,KAAK,EAAE;EAC7B;EAEAC,GAAG,GAAS;IACV,IAAI,CAACJ,UAAU,CAACK,OAAO,CAACC,QAAQ,IAAI;MAClCA,QAAQ,CAACF,GAAG,EAAE;IAChB,CAAC,CAAC;IACF,IAAI,CAACP,cAAc,CAACO,GAAG,EAAE;EAC3B;EAEAG,sBAAsB,CAACC,IAAU,EAAEb,IAAY,EAAoB;IACjE,IAAIc,IAAsB,GAAGD,IAAI,CAACC,IAAI;IACtC,OAAO,iBAAOA,IAAI,0CAAJ,MAAMC,GAAG,MAAM,QAAO,EAAE;MAAA;MACpCD,IAAI,GAAGA,IAAI,CAACA,IAAI;IAClB;IACA,MAAME,UAAU,GAAG,IAAI,CAACC,WAAW,CAACH,IAAI,CAAC,CAACI,IAAI;IAC9C,MAAMP,QAAQ,GAAGR,iBAAM,CAACC,eAAe,CAAE,kBAAiB,EAAE;MAC1DY,UAAU;MACVG,IAAI,EAAE;QACJC,KAAK,EAAEpB,IAAI;QACXa,IAAI,EAAE,IAAAQ,kBAAW,EAACR,IAAI,CAAC,CAACS,IAAI,CAAE,GAAE;MAClC;IACF,CAAC,CAAC;IACF,IAAI,CAACC,WAAW,CAACV,IAAI,EAAEF,QAAQ,CAAC;IAChC,OAAOA,QAAQ;EACjB;EAEAM,WAAW,CAACO,OAAyB,EAAoB;IACvD,MAAMX,IAAI,GAAG,IAAAQ,kBAAW,EAACG,OAAO,CAAC;IACjC,IAAIb,QAAQ;IACZ,IAAIE,IAAI,CAACY,MAAM,GAAG,CAAC,EAAE;MACnBd,QAAQ,GAAG,IAAI,CAACN,UAAU,CAACqB,GAAG,CAACb,IAAI,CAACS,IAAI,CAAE,GAAE,CAAC,CAAC;MAC9C,IAAIX,QAAQ,EAAE;QACZ,OAAOA,QAAQ;MACjB;IACF;IAEA,OAAO,IAAI,CAACT,cAAc;EAC5B;EAEAqB,WAAW,CAACC,OAAa,EAAEb,QAA0B,EAAQ;IAC3D,MAAME,IAAI,GAAG,IAAAQ,kBAAW,EAACG,OAAO,CAAC;IACjC,IAAI,CAACnB,UAAU,CAACsB,GAAG,CAACd,IAAI,CAACS,IAAI,CAAE,GAAE,CAAC,EAAEX,QAAQ,CAAC;EAC/C;AACF;AAAC"}