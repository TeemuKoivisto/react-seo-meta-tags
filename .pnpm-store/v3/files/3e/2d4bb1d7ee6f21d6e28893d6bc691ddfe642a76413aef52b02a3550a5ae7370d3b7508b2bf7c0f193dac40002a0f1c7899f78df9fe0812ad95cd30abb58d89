{"version":3,"file":"repl.js","names":["module","exports","program","trackCli","bootstrap","schema","config","babelrc","pages","components","staticQueryComponents","store","getState","nodes","getNodes","query","result","graphql","source","rootValue","contextValue","console","log","JSON","stringify","_","repl","start","prompt","context","getNode","getNodesByType","loadNodeContent","entries","siteConfig","staticQueries","on","process","exit"],"sources":["../../src/commands/repl.ts"],"sourcesContent":["import repl from \"repl\"\nimport { graphql } from \"graphql\"\nimport { bootstrap } from \"../bootstrap\"\nimport { trackCli } from \"gatsby-telemetry\"\nimport { getNodes, getNode, getNodesByType } from \"../datastore\"\nimport { loadNodeContent } from \"../utils/nodes\"\nimport { store } from \"../redux\"\nimport { IProgram } from \"./types\"\n\nmodule.exports = async (program: IProgram): Promise<void> => {\n  trackCli(`REPL_START`)\n  // run bootstrap\n  await bootstrap({ program })\n\n  // get all the goodies from the store\n  const { schema, config, babelrc, pages, components, staticQueryComponents } =\n    store.getState()\n\n  const nodes = getNodes()\n\n  const query = async (query: string): Promise<void> => {\n    const result = await graphql({\n      schema,\n      source: query,\n      rootValue: {},\n      contextValue: {},\n    })\n    console.log(`query result: ${JSON.stringify(result)}`)\n  }\n\n  // init new repl\n  const _ = repl.start({\n    prompt: `gatsby > `,\n  })\n\n  // set some globals to make life easier\n  _.context.babelrc = babelrc\n  _.context.components = components\n  _.context.getNode = getNode\n  _.context.getNodes = getNodes\n  _.context.getNodesByType = getNodesByType\n  _.context.loadNodeContent = loadNodeContent\n  _.context.nodes = [...nodes.entries()]\n  _.context.pages = [...pages.entries()]\n  _.context.graphql = query\n  _.context.schema = schema\n  _.context.siteConfig = config\n  _.context.staticQueries = staticQueryComponents\n\n  _.on(`exit`, () => {\n    trackCli(`REPL_STOP`)\n    process.exit(0)\n  })\n}\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGAA,MAAM,CAACC,OAAO,GAAG,MAAOC,OAAiB,IAAoB;EAC3D,IAAAC,yBAAQ,EAAE,YAAW,CAAC;EACtB;EACA,MAAM,IAAAC,oBAAS,EAAC;IAAEF;EAAQ,CAAC,CAAC;;EAE5B;EACA,MAAM;IAAEG,MAAM;IAAEC,MAAM;IAAEC,OAAO;IAAEC,KAAK;IAAEC,UAAU;IAAEC;EAAsB,CAAC,GACzEC,YAAK,CAACC,QAAQ,EAAE;EAElB,MAAMC,KAAK,GAAG,IAAAC,mBAAQ,GAAE;EAExB,MAAMC,KAAK,GAAG,MAAOA,KAAa,IAAoB;IACpD,MAAMC,MAAM,GAAG,MAAM,IAAAC,gBAAO,EAAC;MAC3BZ,MAAM;MACNa,MAAM,EAAEH,KAAK;MACbI,SAAS,EAAE,CAAC,CAAC;MACbC,YAAY,EAAE,CAAC;IACjB,CAAC,CAAC;IACFC,OAAO,CAACC,GAAG,CAAE,iBAAgBC,IAAI,CAACC,SAAS,CAACR,MAAM,CAAE,EAAC,CAAC;EACxD,CAAC;;EAED;EACA,MAAMS,CAAC,GAAGC,aAAI,CAACC,KAAK,CAAC;IACnBC,MAAM,EAAG;EACX,CAAC,CAAC;;EAEF;EACAH,CAAC,CAACI,OAAO,CAACtB,OAAO,GAAGA,OAAO;EAC3BkB,CAAC,CAACI,OAAO,CAACpB,UAAU,GAAGA,UAAU;EACjCgB,CAAC,CAACI,OAAO,CAACC,OAAO,GAAGA,kBAAO;EAC3BL,CAAC,CAACI,OAAO,CAACf,QAAQ,GAAGA,mBAAQ;EAC7BW,CAAC,CAACI,OAAO,CAACE,cAAc,GAAGA,yBAAc;EACzCN,CAAC,CAACI,OAAO,CAACG,eAAe,GAAGA,sBAAe;EAC3CP,CAAC,CAACI,OAAO,CAAChB,KAAK,GAAG,CAAC,GAAGA,KAAK,CAACoB,OAAO,EAAE,CAAC;EACtCR,CAAC,CAACI,OAAO,CAACrB,KAAK,GAAG,CAAC,GAAGA,KAAK,CAACyB,OAAO,EAAE,CAAC;EACtCR,CAAC,CAACI,OAAO,CAACZ,OAAO,GAAGF,KAAK;EACzBU,CAAC,CAACI,OAAO,CAACxB,MAAM,GAAGA,MAAM;EACzBoB,CAAC,CAACI,OAAO,CAACK,UAAU,GAAG5B,MAAM;EAC7BmB,CAAC,CAACI,OAAO,CAACM,aAAa,GAAGzB,qBAAqB;EAE/Ce,CAAC,CAACW,EAAE,CAAE,MAAK,EAAE,MAAM;IACjB,IAAAjC,yBAAQ,EAAE,WAAU,CAAC;IACrBkC,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC;EACjB,CAAC,CAAC;AACJ,CAAC"}