{"version":3,"file":"create-node-id.js","names":["seedConstant","unprefixedCache","Map","namespacedCache","createNodeId","id","namespace","toString","report","panic","nsHash","get","uuidv5","set","nsCache","hash"],"sources":["../../src/utils/create-node-id.ts"],"sourcesContent":["import { v5 as uuidv5 } from \"uuid\"\nimport report from \"gatsby-cli/lib/reporter\"\n\nconst seedConstant = `638f7a53-c567-4eca-8fc1-b23efb1cfb2b`\n\n// This cache prevents duplicate calls to uuid which is relevant for certain cases\nconst unprefixedCache: Map<string, string> = new Map()\n// ns -> name -> uuid\nconst namespacedCache: Map<string, Map<string, string>> = new Map([\n  [``, unprefixedCache],\n])\n\n/**\n * Generate a unique id that is consistent, deterministic, and fast while resulting in predictably short hashes.\n *\n * Some characteristics for this id:\n *\n * - The value of the `id` should not mean anything (it is \"ours\")\n * - The value does not need to be encrypted\n * - The value must be unique within our system (as little collision risk as possible on small ascii inputs)\n * - The value needs to be deterministic (same input always results in same output)\n * - The conversion needs to be fast\n * - The result should be predictably short as it may be used in urls\n *\n * High level this step is meant to prevent people from using our `id` to have meaning in their site and it's meant\n * to make sure the id ends up being short, whatever the input size was.\n *\n * Note: UUID is relatively slow because it calls into the native crypto library to generate SHA-1 hashes.\n *       We do need the low collision rate of SHA-1 so we use a local (global) cache to speed up repetitive calls\n *\n * @param {String | Number} id - A string of arbitrary length\n * @param {String} namespace - Namespace to use for UUID\n *\n * @return {String} - UUID\n */\nexport function createNodeId(id: string | number, namespace: string): string {\n  if (typeof id === `number`) {\n    id = id.toString()\n  } else if (typeof id !== `string`) {\n    report.panic(\n      `The \\`id\\` parameter passed to createNodeId must be a String or Number (got ${typeof id})`\n    )\n  } else if (typeof namespace !== `string`) {\n    report.panic(\n      `The \\`namespace\\` parameter passed to createNodeId must be a String (got ${typeof namespace})`\n    )\n  }\n\n  let nsHash = unprefixedCache.get(namespace)\n  if (!nsHash) {\n    nsHash = uuidv5(namespace, seedConstant) as string\n    unprefixedCache.set(namespace, nsHash)\n  }\n\n  // Calling uuid is relatively expensive because it calls into crypto for sha1.\n  // We use a local map to cache calls with the same ns+id pair, which helps a lot.\n  let nsCache = namespacedCache.get(namespace)\n  if (!nsCache) {\n    nsCache = new Map()\n    namespacedCache.set(namespace, nsCache)\n  }\n\n  let hash = nsCache.get(id)\n  if (hash) {\n    return hash\n  }\n\n  hash = uuidv5(id, nsHash) as string\n  nsCache.set(id, hash)\n  return hash\n}\n"],"mappings":";;;;;AAAA;AACA;AAEA,MAAMA,YAAY,GAAI,sCAAqC;;AAE3D;AACA,MAAMC,eAAoC,GAAG,IAAIC,GAAG,EAAE;AACtD;AACA,MAAMC,eAAiD,GAAG,IAAID,GAAG,CAAC,CAChE,CAAE,EAAC,EAAED,eAAe,CAAC,CACtB,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASG,YAAY,CAACC,EAAmB,EAAEC,SAAiB,EAAU;EAC3E,IAAI,OAAOD,EAAE,KAAM,QAAO,EAAE;IAC1BA,EAAE,GAAGA,EAAE,CAACE,QAAQ,EAAE;EACpB,CAAC,MAAM,IAAI,OAAOF,EAAE,KAAM,QAAO,EAAE;IACjCG,iBAAM,CAACC,KAAK,CACT,+EAA8E,OAAOJ,EAAG,GAAE,CAC5F;EACH,CAAC,MAAM,IAAI,OAAOC,SAAS,KAAM,QAAO,EAAE;IACxCE,iBAAM,CAACC,KAAK,CACT,4EAA2E,OAAOH,SAAU,GAAE,CAChG;EACH;EAEA,IAAII,MAAM,GAAGT,eAAe,CAACU,GAAG,CAACL,SAAS,CAAC;EAC3C,IAAI,CAACI,MAAM,EAAE;IACXA,MAAM,GAAG,IAAAE,QAAM,EAACN,SAAS,EAAEN,YAAY,CAAW;IAClDC,eAAe,CAACY,GAAG,CAACP,SAAS,EAAEI,MAAM,CAAC;EACxC;;EAEA;EACA;EACA,IAAII,OAAO,GAAGX,eAAe,CAACQ,GAAG,CAACL,SAAS,CAAC;EAC5C,IAAI,CAACQ,OAAO,EAAE;IACZA,OAAO,GAAG,IAAIZ,GAAG,EAAE;IACnBC,eAAe,CAACU,GAAG,CAACP,SAAS,EAAEQ,OAAO,CAAC;EACzC;EAEA,IAAIC,IAAI,GAAGD,OAAO,CAACH,GAAG,CAACN,EAAE,CAAC;EAC1B,IAAIU,IAAI,EAAE;IACR,OAAOA,IAAI;EACb;EAEAA,IAAI,GAAG,IAAAH,QAAM,EAACP,EAAE,EAAEK,MAAM,CAAW;EACnCI,OAAO,CAACD,GAAG,CAACR,EAAE,EAAEU,IAAI,CAAC;EACrB,OAAOA,IAAI;AACb"}