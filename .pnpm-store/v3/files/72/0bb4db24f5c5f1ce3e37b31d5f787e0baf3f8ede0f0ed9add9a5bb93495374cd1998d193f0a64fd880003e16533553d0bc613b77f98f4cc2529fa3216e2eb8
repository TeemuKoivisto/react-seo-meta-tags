{"version":3,"file":"websocket-manager.js","names":["hashPaths","paths","map","path","createHash","update","digest","WebsocketManager","activePaths","Set","clients","errors","Map","staticQueryResults","init","server","websocket","SocketIO","pingTimeout","cors","origin","cookie","updateServerActivePaths","serverActivePaths","client","activePath","add","on","socket","clientInfo","setActivePath","newActivePath","fallbackTo404","activePagePath","page","findPageByPath","store","getState","getPageMode","handshake","headers","referer","url","parse","forEach","message","errorID","send","type","payload","id","delete","_path","process","env","GATSBY_QUERY_ON_DEMAND","boundEmitStalePageDataPathsFromDirtyQueryTracking","emitStalePageDataPathsFromDirtyQueryTracking","bind","emitter","emitStalePageDataPathsFromStaticQueriesAssignment","getSocket","emitStaticQueryData","data","set","size","telemetry","trackCli","siteMeasurements","clientsCount","Array","from","debounce","emitPageData","emitSliceData","emitError","dirtyQueries","queries","dirtyQueriesListToEmitViaWebsocket","emitStalePageDataPaths","dispatch","clearDirtyQueriesListToEmitViaWebsocket","pendingTemplateDataWrite","pages","stalePageDataPaths","length","emitStaleServerData","websocketManager"],"sources":["../../src/utils/websocket-manager.ts"],"sourcesContent":["/* eslint-disable no-invalid-this */\n\nimport { store, emitter } from \"../redux\"\nimport { IAddPendingTemplateDataWriteAction } from \"../redux/types\"\nimport { clearDirtyQueriesListToEmitViaWebsocket } from \"../redux/actions/internal\"\nimport { Server as HTTPSServer } from \"https\"\nimport { Server as HTTPServer } from \"http\"\nimport { IPageDataWithQueryResult } from \"../utils/page-data\"\nimport telemetry from \"gatsby-telemetry\"\nimport url from \"url\"\nimport { createHash } from \"crypto\"\nimport { findPageByPath } from \"./find-page-by-path\"\nimport { Server as SocketIO, Socket } from \"socket.io\"\nimport { getPageMode } from \"./page-mode\"\n\nexport interface IPageOrSliceQueryResult {\n  id: string\n  result?: IPageDataWithQueryResult\n}\n\nexport interface IStaticQueryResult {\n  id: string\n  result: unknown // TODO: Improve this once we understand what the type is\n}\n\ntype QueryResultsMap = Map<string, IStaticQueryResult>\n\nfunction hashPaths(paths: Array<string>): Array<string> {\n  return paths.map(path => createHash(`sha256`).update(path).digest(`hex`))\n}\n\ninterface IClientInfo {\n  activePath: string | null\n  socket: Socket\n}\n\nexport class WebsocketManager {\n  activePaths: Set<string> = new Set()\n  clients: Set<IClientInfo> = new Set()\n  errors: Map<string, string> = new Map()\n  staticQueryResults: QueryResultsMap = new Map()\n  websocket: SocketIO | undefined\n\n  init = ({ server }: { server: HTTPSServer | HTTPServer }): SocketIO => {\n    // make typescript happy, else it complained about this.websocket being undefined\n    const websocket = new SocketIO(server, {\n      // we see ping-pong timeouts on gatsby-cloud when socket.io is running for a while\n      // increasing it should help\n      // @see https://github.com/socketio/socket.io/issues/3259#issuecomment-448058937\n      pingTimeout: 30000,\n      // whitelist all (https://github.com/expressjs/cors#configuration-options)\n      cors: {\n        origin: true,\n      },\n      cookie: true,\n    })\n    this.websocket = websocket\n\n    const updateServerActivePaths = (): void => {\n      const serverActivePaths = new Set<string>()\n      for (const client of this.clients) {\n        if (client.activePath) {\n          serverActivePaths.add(client.activePath)\n        }\n      }\n      this.activePaths = serverActivePaths\n    }\n\n    websocket.on(`connection`, socket => {\n      const clientInfo: IClientInfo = {\n        activePath: null,\n        socket,\n      }\n      this.clients.add(clientInfo)\n\n      const setActivePath = (\n        newActivePath: string | null,\n        fallbackTo404: boolean = false\n      ): void => {\n        let activePagePath: string | null = null\n        if (newActivePath) {\n          const page = findPageByPath(\n            store.getState(),\n            newActivePath,\n            fallbackTo404\n          )\n\n          if (page) {\n            // when it's SSR we don't want to return the page path but the actualy url used,\n            // this is necessary when matchPaths are used.\n            if (getPageMode(page) === `SSR`) {\n              activePagePath = newActivePath\n            } else {\n              activePagePath = page.path\n            }\n          }\n        }\n        clientInfo.activePath = activePagePath\n        updateServerActivePaths()\n      }\n\n      if (socket?.handshake?.headers?.referer) {\n        const path = url.parse(socket.handshake.headers.referer).path\n        setActivePath(path, true)\n      }\n\n      this.errors.forEach((message, errorID) => {\n        socket.send({\n          type: `overlayError`,\n          payload: {\n            id: errorID,\n            message,\n          },\n        })\n      })\n\n      socket.on(`registerPath`, (path: string): void => {\n        setActivePath(path, true)\n      })\n\n      socket.on(`disconnect`, (): void => {\n        setActivePath(null)\n        this.clients.delete(clientInfo)\n      })\n\n      socket.on(`unregisterPath`, (_path: string): void => {\n        setActivePath(null)\n      })\n    })\n\n    if (process.env.GATSBY_QUERY_ON_DEMAND) {\n      // page-data marked stale due to dirty query tracking\n      const boundEmitStalePageDataPathsFromDirtyQueryTracking =\n        this.emitStalePageDataPathsFromDirtyQueryTracking.bind(this)\n      emitter.on(\n        `CREATE_PAGE`,\n        boundEmitStalePageDataPathsFromDirtyQueryTracking\n      )\n      emitter.on(\n        `CREATE_NODE`,\n        boundEmitStalePageDataPathsFromDirtyQueryTracking\n      )\n      emitter.on(\n        `DELETE_NODE`,\n        boundEmitStalePageDataPathsFromDirtyQueryTracking\n      )\n      emitter.on(\n        `QUERY_EXTRACTED`,\n        boundEmitStalePageDataPathsFromDirtyQueryTracking\n      )\n    }\n\n    // page-data marked stale due to static query hashes change\n    emitter.on(\n      `ADD_PENDING_TEMPLATE_DATA_WRITE`,\n      this.emitStalePageDataPathsFromStaticQueriesAssignment.bind(this)\n    )\n\n    return websocket\n  }\n\n  getSocket = (): SocketIO | undefined => this.websocket\n\n  emitStaticQueryData = (data: IStaticQueryResult): void => {\n    this.staticQueryResults.set(data.id, data)\n\n    if (this.websocket) {\n      this.websocket.send({ type: `staticQueryResult`, payload: data })\n\n      if (this.clients.size > 0) {\n        telemetry.trackCli(\n          `WEBSOCKET_EMIT_STATIC_PAGE_DATA_UPDATE`,\n          {\n            siteMeasurements: {\n              clientsCount: this.clients.size,\n              paths: hashPaths(Array.from(this.activePaths)),\n            },\n          },\n          { debounce: true }\n        )\n      }\n    }\n  }\n\n  emitPageData = (data: IPageOrSliceQueryResult): void => {\n    if (this.websocket) {\n      this.websocket.send({ type: `pageQueryResult`, payload: data })\n\n      if (this.clients.size > 0) {\n        telemetry.trackCli(\n          `WEBSOCKET_EMIT_PAGE_DATA_UPDATE`,\n          {\n            siteMeasurements: {\n              clientsCount: this.clients.size,\n              paths: hashPaths(Array.from(this.activePaths)),\n            },\n          },\n          { debounce: true }\n        )\n      }\n    }\n  }\n\n  emitSliceData = (data: IPageOrSliceQueryResult): void => {\n    if (this.websocket) {\n      this.websocket.send({ type: `sliceQueryResult`, payload: data })\n    }\n  }\n\n  emitError = (id: string, message?: string): void => {\n    if (message) {\n      this.errors.set(id, message)\n    } else {\n      this.errors.delete(id)\n    }\n\n    if (this.websocket) {\n      this.websocket.send({\n        type: `overlayError`,\n        payload: { id, message },\n      })\n    }\n  }\n\n  emitStalePageDataPathsFromDirtyQueryTracking(): void {\n    const dirtyQueries =\n      store.getState().queries.dirtyQueriesListToEmitViaWebsocket\n\n    if (this.emitStalePageDataPaths(dirtyQueries)) {\n      store.dispatch(clearDirtyQueriesListToEmitViaWebsocket())\n    }\n  }\n\n  emitStalePageDataPathsFromStaticQueriesAssignment(\n    pendingTemplateDataWrite: IAddPendingTemplateDataWriteAction\n  ): void {\n    this.emitStalePageDataPaths(\n      Array.from(pendingTemplateDataWrite.payload.pages)\n    )\n  }\n\n  emitStalePageDataPaths(stalePageDataPaths: Array<string>): boolean {\n    if (stalePageDataPaths.length > 0) {\n      if (this.websocket) {\n        this.websocket.send({\n          type: `stalePageData`,\n          payload: { stalePageDataPaths },\n        })\n\n        return true\n      }\n    }\n    return false\n  }\n\n  emitStaleServerData(): boolean {\n    if (this.websocket) {\n      this.websocket.send({ type: `staleServerData` })\n      return true\n    }\n    return false\n  }\n}\n\nexport const websocketManager: WebsocketManager = new WebsocketManager()\n"],"mappings":"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"}