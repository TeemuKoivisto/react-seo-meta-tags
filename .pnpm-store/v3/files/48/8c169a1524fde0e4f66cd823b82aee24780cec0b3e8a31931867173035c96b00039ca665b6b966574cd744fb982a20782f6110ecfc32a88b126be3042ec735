{"version":3,"file":"express-middlewares.js","names":["configureTrailingSlash","getState","option","req","res","next","method","toLocaleLowerCase","includes","path","split","pop","length","page","findPageByPath","slice","query","url","redirect","BASE","urlToMessWith","URL","pathname","toString","replace"],"sources":["../../src/utils/express-middlewares.ts"],"sourcesContent":["import type { TrailingSlash } from \"gatsby-page-utils\"\nimport express from \"express\"\nimport type { IGatsbyState } from \"../redux/types\"\nimport { findPageByPath } from \"./find-page-by-path\"\n\nexport const configureTrailingSlash =\n  (getState: () => IGatsbyState, option: TrailingSlash | undefined) =>\n  (\n    req: express.Request,\n    res: express.Response,\n    next: express.NextFunction\n  ): void => {\n    const method = req.method.toLocaleLowerCase()\n    if (![`get`, `head`].includes(method)) {\n      next()\n      return\n    }\n\n    if (req?.path.split(`/`)?.pop()?.includes(`.`)) {\n      // Path has an extension. Do not add slash.\n      next()\n      return\n    }\n\n    if (req.path.length <= 1) {\n      next()\n      return\n    }\n\n    // check if it's Gatsby Page\n    const page = findPageByPath(getState(), req.path)\n\n    if (page) {\n      if (option === `never`) {\n        if (req.path.slice(-1) === `/` && page.path !== req.path) {\n          // Remove trailing slash\n          const query = req.url.slice(req.path.length)\n          res.redirect(301, req.path.slice(0, -1) + query)\n          return\n        } else {\n          // express.static really doesn't like paths without trailing slashes\n          // so we \"rewrite\" request to look like request with trailing slash\n          // otherwise we'll have an infinite redirect loop. We did this because\n          // express.static automatically adds the redirect trailing slash then\n          const BASE = `http://localhost`\n          const urlToMessWith = new URL(req.url, BASE)\n          urlToMessWith.pathname += `/`\n\n          // The incoming req.url is relative, so we remove the base again\n          // we use new URL so that queries/hashes are handled automatically\n          req.url = urlToMessWith.toString().replace(BASE, ``)\n        }\n      } else if (option === `always`) {\n        if (req.path.slice(-1) !== `/` && page.path !== req.path) {\n          // Add trailing slash\n          const query = req.url.slice(req.path.length)\n          res.redirect(301, `${req.path}/${query}`)\n          return\n        }\n      }\n    }\n\n    next()\n  }\n"],"mappings":";;;;AAGA;AAEO,MAAMA,sBAAsB,GACjC,CAACC,QAA4B,EAAEC,MAAiC,KAChE,CACEC,GAAoB,EACpBC,GAAqB,EACrBC,IAA0B,KACjB;EAAA;EACT,MAAMC,MAAM,GAAGH,GAAG,CAACG,MAAM,CAACC,iBAAiB,EAAE;EAC7C,IAAI,CAAC,CAAE,KAAI,EAAG,MAAK,CAAC,CAACC,QAAQ,CAACF,MAAM,CAAC,EAAE;IACrCD,IAAI,EAAE;IACN;EACF;EAEA,IAAIF,GAAG,aAAHA,GAAG,kCAAHA,GAAG,CAAEM,IAAI,CAACC,KAAK,CAAE,GAAE,CAAC,mEAApB,gBAAsBC,GAAG,EAAE,gDAA3B,oBAA6BH,QAAQ,CAAE,GAAE,CAAC,EAAE;IAC9C;IACAH,IAAI,EAAE;IACN;EACF;EAEA,IAAIF,GAAG,CAACM,IAAI,CAACG,MAAM,IAAI,CAAC,EAAE;IACxBP,IAAI,EAAE;IACN;EACF;;EAEA;EACA,MAAMQ,IAAI,GAAG,IAAAC,8BAAc,EAACb,QAAQ,EAAE,EAAEE,GAAG,CAACM,IAAI,CAAC;EAEjD,IAAII,IAAI,EAAE;IACR,IAAIX,MAAM,KAAM,OAAM,EAAE;MACtB,IAAIC,GAAG,CAACM,IAAI,CAACM,KAAK,CAAC,CAAC,CAAC,CAAC,KAAM,GAAE,IAAIF,IAAI,CAACJ,IAAI,KAAKN,GAAG,CAACM,IAAI,EAAE;QACxD;QACA,MAAMO,KAAK,GAAGb,GAAG,CAACc,GAAG,CAACF,KAAK,CAACZ,GAAG,CAACM,IAAI,CAACG,MAAM,CAAC;QAC5CR,GAAG,CAACc,QAAQ,CAAC,GAAG,EAAEf,GAAG,CAACM,IAAI,CAACM,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAGC,KAAK,CAAC;QAChD;MACF,CAAC,MAAM;QACL;QACA;QACA;QACA;QACA,MAAMG,IAAI,GAAI,kBAAiB;QAC/B,MAAMC,aAAa,GAAG,IAAIC,GAAG,CAAClB,GAAG,CAACc,GAAG,EAAEE,IAAI,CAAC;QAC5CC,aAAa,CAACE,QAAQ,IAAK,GAAE;;QAE7B;QACA;QACAnB,GAAG,CAACc,GAAG,GAAGG,aAAa,CAACG,QAAQ,EAAE,CAACC,OAAO,CAACL,IAAI,EAAG,EAAC,CAAC;MACtD;IACF,CAAC,MAAM,IAAIjB,MAAM,KAAM,QAAO,EAAE;MAC9B,IAAIC,GAAG,CAACM,IAAI,CAACM,KAAK,CAAC,CAAC,CAAC,CAAC,KAAM,GAAE,IAAIF,IAAI,CAACJ,IAAI,KAAKN,GAAG,CAACM,IAAI,EAAE;QACxD;QACA,MAAMO,KAAK,GAAGb,GAAG,CAACc,GAAG,CAACF,KAAK,CAACZ,GAAG,CAACM,IAAI,CAACG,MAAM,CAAC;QAC5CR,GAAG,CAACc,QAAQ,CAAC,GAAG,EAAG,GAAEf,GAAG,CAACM,IAAK,IAAGO,KAAM,EAAC,CAAC;QACzC;MACF;IACF;EACF;EAEAX,IAAI,EAAE;AACR,CAAC;AAAA"}