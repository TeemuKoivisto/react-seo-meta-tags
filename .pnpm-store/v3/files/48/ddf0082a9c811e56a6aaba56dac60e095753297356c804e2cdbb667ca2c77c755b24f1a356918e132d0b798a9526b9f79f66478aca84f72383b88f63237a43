{"version":3,"file":"find-slices.js","names":["SLICES_PROPS","Set","mergePreviouslyCollectedSlice","newInfo","previousInfo","name","allowEmpty","mergePreviouslyCollectedSlices","ret","info","Object","entries","collectSlices","ast","filename","result","hasResults","traverse","JSXOpeningElement","nodePath","get","referencesImport","unresolvedProps","props","getAttributeValues","prop","push","alias","length","locationInFile","node","loc","start","line","column","error","join","reporter","warn"],"sources":["../../../src/utils/babel/find-slices.ts"],"sourcesContent":["import traverse from \"@babel/traverse\"\nimport type { Node } from \"@babel/core\"\nimport { getAttributeValues } from \"babel-jsx-utils\"\nimport reporter from \"gatsby-cli/lib/reporter\"\n\nexport interface ICollectedSlice {\n  name: string\n  allowEmpty: boolean\n}\n\nexport type ICollectedSlices = Record<string, ICollectedSlice>\n\nconst SLICES_PROPS = new Set([`alias`, `allowEmpty`])\n\nfunction mergePreviouslyCollectedSlice(\n  newInfo: ICollectedSlice,\n  previousInfo?: ICollectedSlice\n): ICollectedSlice {\n  return {\n    name: newInfo.name,\n    // it's enough for one use of slice that doesn't allow empty\n    // to require passing everyhing\n    allowEmpty:\n      previousInfo?.allowEmpty === false\n        ? false\n        : previousInfo?.allowEmpty ?? newInfo.allowEmpty,\n  }\n}\n\nexport function mergePreviouslyCollectedSlices(\n  newInfo: ICollectedSlices,\n  previousInfo?: ICollectedSlices\n): ICollectedSlices {\n  const ret: ICollectedSlices = previousInfo ?? {}\n\n  for (const [name, info] of Object.entries(newInfo)) {\n    ret[name] = mergePreviouslyCollectedSlice(info, ret[name])\n  }\n\n  return ret\n}\n\nexport function collectSlices(\n  ast: Node,\n  filename: string\n): Record<string, ICollectedSlice> | null {\n  const result: Record<string, ICollectedSlice> = {}\n  let hasResults = false\n\n  traverse(ast, {\n    JSXOpeningElement(nodePath): void {\n      if (!nodePath.get(`name`).referencesImport(`gatsby`, `Slice`)) {\n        return\n      }\n\n      const unresolvedProps: Array<string> = []\n\n      const props = getAttributeValues(\n        nodePath,\n        prop => {\n          unresolvedProps.push(prop)\n        },\n        SLICES_PROPS\n      ) as { alias: string; allowEmpty?: boolean }\n\n      const { alias: name, allowEmpty = false } = props\n\n      if (unresolvedProps.length) {\n        let locationInFile = ``\n        if (nodePath.node.loc?.start?.line) {\n          locationInFile = `:${nodePath.node.loc.start.line}`\n          if (nodePath.node.loc?.start?.column) {\n            locationInFile += `:${nodePath.node.loc.start.column + 1}`\n          }\n        }\n\n        const error = `[Gatsby Slice API] Could not find values in \"${filename}${locationInFile}\" for the following props at build time: ${unresolvedProps.join(\n          `, `\n        )}`\n\n        reporter.warn(error)\n        return\n      }\n\n      if (name) {\n        result[name] = mergePreviouslyCollectedSlice(\n          { name, allowEmpty },\n          result[name]\n        )\n        hasResults = true\n      }\n    },\n  })\n\n  return hasResults ? result : null\n}\n"],"mappings":";;;;;;AAAA;AAEA;AACA;AASA,MAAMA,YAAY,GAAG,IAAIC,GAAG,CAAC,CAAE,OAAM,EAAG,YAAW,CAAC,CAAC;AAErD,SAASC,6BAA6B,CACpCC,OAAwB,EACxBC,YAA8B,EACb;EAAA;EACjB,OAAO;IACLC,IAAI,EAAEF,OAAO,CAACE,IAAI;IAClB;IACA;IACAC,UAAU,EACR,CAAAF,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEE,UAAU,MAAK,KAAK,GAC9B,KAAK,4BACLF,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEE,UAAU,yEAAIH,OAAO,CAACG;EAC5C,CAAC;AACH;AAEO,SAASC,8BAA8B,CAC5CJ,OAAyB,EACzBC,YAA+B,EACb;EAClB,MAAMI,GAAqB,GAAGJ,YAAY,aAAZA,YAAY,cAAZA,YAAY,GAAI,CAAC,CAAC;EAEhD,KAAK,MAAM,CAACC,IAAI,EAAEI,IAAI,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACR,OAAO,CAAC,EAAE;IAClDK,GAAG,CAACH,IAAI,CAAC,GAAGH,6BAA6B,CAACO,IAAI,EAAED,GAAG,CAACH,IAAI,CAAC,CAAC;EAC5D;EAEA,OAAOG,GAAG;AACZ;AAEO,SAASI,aAAa,CAC3BC,GAAS,EACTC,QAAgB,EACwB;EACxC,MAAMC,MAAuC,GAAG,CAAC,CAAC;EAClD,IAAIC,UAAU,GAAG,KAAK;EAEtB,IAAAC,iBAAQ,EAACJ,GAAG,EAAE;IACZK,iBAAiB,CAACC,QAAQ,EAAQ;MAChC,IAAI,CAACA,QAAQ,CAACC,GAAG,CAAE,MAAK,CAAC,CAACC,gBAAgB,CAAE,QAAO,EAAG,OAAM,CAAC,EAAE;QAC7D;MACF;MAEA,MAAMC,eAA8B,GAAG,EAAE;MAEzC,MAAMC,KAAK,GAAG,IAAAC,iCAAkB,EAC9BL,QAAQ,EACRM,IAAI,IAAI;QACNH,eAAe,CAACI,IAAI,CAACD,IAAI,CAAC;MAC5B,CAAC,EACDzB,YAAY,CAC8B;MAE5C,MAAM;QAAE2B,KAAK,EAAEtB,IAAI;QAAEC,UAAU,GAAG;MAAM,CAAC,GAAGiB,KAAK;MAEjD,IAAID,eAAe,CAACM,MAAM,EAAE;QAAA;QAC1B,IAAIC,cAAc,GAAI,EAAC;QACvB,0BAAIV,QAAQ,CAACW,IAAI,CAACC,GAAG,wEAAjB,mBAAmBC,KAAK,kDAAxB,sBAA0BC,IAAI,EAAE;UAAA;UAClCJ,cAAc,GAAI,IAAGV,QAAQ,CAACW,IAAI,CAACC,GAAG,CAACC,KAAK,CAACC,IAAK,EAAC;UACnD,2BAAId,QAAQ,CAACW,IAAI,CAACC,GAAG,yEAAjB,oBAAmBC,KAAK,kDAAxB,sBAA0BE,MAAM,EAAE;YACpCL,cAAc,IAAK,IAAGV,QAAQ,CAACW,IAAI,CAACC,GAAG,CAACC,KAAK,CAACE,MAAM,GAAG,CAAE,EAAC;UAC5D;QACF;QAEA,MAAMC,KAAK,GAAI,gDAA+CrB,QAAS,GAAEe,cAAe,4CAA2CP,eAAe,CAACc,IAAI,CACpJ,IAAG,CACJ,EAAC;QAEHC,iBAAQ,CAACC,IAAI,CAACH,KAAK,CAAC;QACpB;MACF;MAEA,IAAI9B,IAAI,EAAE;QACRU,MAAM,CAACV,IAAI,CAAC,GAAGH,6BAA6B,CAC1C;UAAEG,IAAI;UAAEC;QAAW,CAAC,EACpBS,MAAM,CAACV,IAAI,CAAC,CACb;QACDW,UAAU,GAAG,IAAI;MACnB;IACF;EACF,CAAC,CAAC;EAEF,OAAOA,UAAU,GAAGD,MAAM,GAAG,IAAI;AACnC"}