{"version":3,"file":"worker-messaging.js","names":["hasActiveWorkerJobs","activeWorkerJobs","initJobsMessagingInMainProcess","workerPool","onMessage","msg","workerId","type","MESSAGE_TYPES","JOB_CREATED","pDefer","store","dispatch","internalActions","createJobV2FromInternalJob","payload","then","result","sendMessage","JOB_COMPLETED","id","catch","error","JOB_FAILED","message","stack","finally","resolve","waitUntilWorkerJobsAreComplete","promise","Promise","deferredWorkerPromises","Map","gatsbyWorkerMessenger","getMessenger","initJobsMessagingInWorker","isWorker","deferredPromise","get","Error","delete","errorObject","WorkerError","reject","maybeSendJobToMainProcess","job","deferredWorkerPromise","set","undefined"],"sources":["../../../src/utils/jobs/worker-messaging.ts"],"sourcesContent":["import pDefer from \"p-defer\"\n\nimport {\n  MESSAGE_TYPES,\n  InternalJob,\n  IJobCreatedMessage,\n  WorkerError,\n} from \"./types\"\nimport { store } from \"../../redux\"\nimport { internalActions } from \"../../redux/actions\"\nimport { GatsbyWorkerPool } from \"../worker/types\"\nimport { isWorker, getMessenger } from \"../worker/messaging\"\n\nlet hasActiveWorkerJobs: pDefer.DeferredPromise<void> | null = null\nlet activeWorkerJobs = 0\n\nexport function initJobsMessagingInMainProcess(\n  workerPool: GatsbyWorkerPool\n): void {\n  workerPool.onMessage((msg, workerId) => {\n    if (msg.type === MESSAGE_TYPES.JOB_CREATED) {\n      if (activeWorkerJobs === 0) {\n        hasActiveWorkerJobs = pDefer<void>()\n      }\n      activeWorkerJobs++\n      store\n        .dispatch(internalActions.createJobV2FromInternalJob(msg.payload))\n        .then(result => {\n          workerPool.sendMessage(\n            {\n              type: MESSAGE_TYPES.JOB_COMPLETED,\n              payload: {\n                id: msg.payload.id,\n                result,\n              },\n            },\n            workerId\n          )\n        })\n        .catch(error => {\n          workerPool.sendMessage(\n            {\n              type: MESSAGE_TYPES.JOB_FAILED,\n              payload: {\n                id: msg.payload.id,\n                error: error.message,\n                stack: error.stack,\n              },\n            },\n            workerId\n          )\n        })\n        .finally(() => {\n          if (--activeWorkerJobs === 0) {\n            hasActiveWorkerJobs?.resolve()\n            hasActiveWorkerJobs = null\n          }\n        })\n    }\n  })\n}\n\nexport const waitUntilWorkerJobsAreComplete = (): Promise<void> =>\n  hasActiveWorkerJobs ? hasActiveWorkerJobs.promise : Promise.resolve()\n\n/**\n * This map is ONLY used in worker. It's purpose is to keep track of promises returned to plugins\n * when creating jobs (in worker context), so that we can resolve or reject those once main process\n * send back their status.\n */\nconst deferredWorkerPromises = new Map<\n  InternalJob[\"id\"],\n  pDefer.DeferredPromise<Record<string, unknown>>\n>()\nconst gatsbyWorkerMessenger = getMessenger()\nexport function initJobsMessagingInWorker(): void {\n  if (isWorker && gatsbyWorkerMessenger) {\n    gatsbyWorkerMessenger.onMessage(msg => {\n      if (msg.type === MESSAGE_TYPES.JOB_COMPLETED) {\n        const { id, result } = msg.payload\n        const deferredPromise = deferredWorkerPromises.get(id)\n\n        if (!deferredPromise) {\n          throw new Error(\n            `Received message about completed job that wasn't scheduled by this worker`\n          )\n        }\n\n        deferredPromise.resolve(result)\n        deferredWorkerPromises.delete(id)\n      } else if (msg.type === MESSAGE_TYPES.JOB_FAILED) {\n        const { id, error, stack } = msg.payload\n        const deferredPromise = deferredWorkerPromises.get(id)\n\n        if (!deferredPromise) {\n          throw new Error(\n            `Received message about failed job that wasn't scheduled by this worker`\n          )\n        }\n\n        const errorObject = new WorkerError(error)\n        if (stack) {\n          errorObject.stack = stack\n        }\n        deferredPromise.reject(errorObject)\n        deferredWorkerPromises.delete(id)\n      }\n    })\n  }\n}\n\n/**\n * Forwards job to main process (if executed in worker context) and returns\n * a promise. Will return `undefined` if called not in worker context.\n */\nexport function maybeSendJobToMainProcess(\n  job: InternalJob\n): Promise<Record<string, unknown>> | undefined {\n  if (isWorker && gatsbyWorkerMessenger) {\n    const deferredWorkerPromise = pDefer<Record<string, unknown>>()\n\n    const msg: IJobCreatedMessage = {\n      type: MESSAGE_TYPES.JOB_CREATED,\n      payload: job,\n    }\n\n    gatsbyWorkerMessenger.sendMessage(msg)\n\n    // holds on to promise\n    deferredWorkerPromises.set(job.id, deferredWorkerPromise)\n\n    return deferredWorkerPromise.promise\n  }\n\n  return undefined\n}\n"],"mappings":"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"}