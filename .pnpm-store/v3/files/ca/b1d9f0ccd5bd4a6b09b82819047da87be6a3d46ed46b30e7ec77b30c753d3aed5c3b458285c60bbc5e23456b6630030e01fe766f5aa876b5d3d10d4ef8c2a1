{"version":3,"file":"query-runner.js","names":["resultHashCache","getResultHashCache","GatsbyCacheLmdb","name","encoding","init","reportLongRunningQueryJob","queryJob","messageParts","componentPath","queryType","push","context","path","report","warn","join","panicQueryJobError","errors","urlPath","undefined","queryContext","plugin","pluginCreatorId","structuredErrors","map","e","structuredError","errorParser","message","filePath","location","error","codeFrame","getCodeFrame","query","locations","line","column","panicOnBuild","startQueryJob","graphqlRunner","parentSpan","isPending","timeoutId","setTimeout","queryName","id","finally","clearTimeout","queryRunner","program","store","getState","dispatch","actions","queryStart","isPage","result","Object","assign","pageContext","internalComponentName","component","componentChunkName","updatedAt","pluginCreator___NODE","isCreatedByStatefulCreatePages","matchPath","mode","slices","resultJSON","JSON","stringify","resultHash","sha1","resultHashCacheKey","hash","get","pageDataExists","directory","set","savePageQueryResult","type","payload","substring","resultPath","fs","outputFile","pageQueryRun","queryHash"],"sources":["../../src/query/query-runner.ts"],"sourcesContent":["import { Span } from \"opentracing\"\nimport _ from \"lodash\"\nimport fs from \"fs-extra\"\nimport report from \"gatsby-cli/lib/reporter\"\nimport { ExecutionResult, GraphQLError } from \"graphql\"\nimport { sha1 } from \"gatsby-core-utils/hash\"\n\nimport path from \"path\"\nimport { store } from \"../redux\"\nimport { actions } from \"../redux/actions\"\nimport { getCodeFrame } from \"./graphql-errors-codeframe\"\nimport errorParser from \"./error-parser\"\n\nimport { GraphQLRunner } from \"./graphql-runner\"\nimport { IExecutionResult, PageContext } from \"./types\"\nimport { pageDataExists, savePageQueryResult } from \"../utils/page-data\"\nimport GatsbyCacheLmdb from \"../utils/cache-lmdb\"\n\nlet resultHashCache: GatsbyCacheLmdb | undefined\nfunction getResultHashCache(): GatsbyCacheLmdb {\n  if (!resultHashCache) {\n    resultHashCache = new GatsbyCacheLmdb({\n      name: `query-result-hashes`,\n      encoding: `string`,\n    }).init()\n  }\n  return resultHashCache\n}\n\nexport interface IQueryJob {\n  id: string\n  hash?: string\n  query: string\n  componentPath: string\n  context: PageContext\n  queryType: \"page\" | \"static\" | \"slice\"\n  pluginCreatorId?: string\n}\n\nfunction reportLongRunningQueryJob(queryJob: IQueryJob): void {\n  const messageParts = [\n    `This query took more than 15s to run â€” which might indicate you're querying too much or have some unoptimized code:`,\n    `File path: ${queryJob.componentPath}`,\n  ]\n\n  if (queryJob.queryType === `page`) {\n    messageParts.push(`URL path: ${queryJob.context.path}`)\n  }\n\n  report.warn(messageParts.join(`\\n`))\n}\n\nfunction panicQueryJobError(\n  queryJob: IQueryJob,\n  errors: ReadonlyArray<GraphQLError>\n): void {\n  let urlPath = undefined\n  let queryContext = {}\n  const plugin = queryJob.pluginCreatorId || `none`\n\n  if (queryJob.queryType === `page`) {\n    urlPath = queryJob.context.path\n    queryContext = queryJob.context.context\n  }\n\n  const structuredErrors = errors.map(e => {\n    const structuredError = errorParser({\n      message: e.message,\n      filePath: undefined,\n      location: undefined,\n      error: e,\n    })\n\n    structuredError.context = {\n      ...structuredError.context,\n      codeFrame: getCodeFrame(\n        queryJob.query,\n        e.locations && e.locations[0].line,\n        e.locations && e.locations[0].column\n      ),\n      filePath: queryJob.componentPath,\n      ...(urlPath ? { urlPath } : {}),\n      ...queryContext,\n      plugin,\n    }\n\n    return structuredError\n  })\n\n  report.panicOnBuild(structuredErrors)\n}\n\nasync function startQueryJob(\n  graphqlRunner: GraphQLRunner,\n  queryJob: IQueryJob,\n  parentSpan: Span | undefined\n): Promise<ExecutionResult> {\n  let isPending = true\n\n  // Print out warning when query takes too long\n  const timeoutId = setTimeout(() => {\n    if (isPending) {\n      reportLongRunningQueryJob(queryJob)\n    }\n  }, 15000)\n\n  return graphqlRunner\n    .query(queryJob.query, queryJob.context, {\n      parentSpan,\n      queryName: queryJob.id,\n      componentPath: queryJob.componentPath,\n    })\n    .finally(() => {\n      isPending = false\n      clearTimeout(timeoutId)\n    })\n}\n\nexport async function queryRunner(\n  graphqlRunner: GraphQLRunner,\n  queryJob: IQueryJob,\n  parentSpan: Span | undefined\n): Promise<IExecutionResult> {\n  const { program } = store.getState()\n\n  store.dispatch(\n    actions.queryStart({\n      path: queryJob.id,\n      componentPath: queryJob.componentPath,\n      isPage: queryJob.queryType === `page`,\n    })\n  )\n\n  // Run query\n  let result: IExecutionResult\n  // Nothing to do if the query doesn't exist.\n  if (!queryJob.query || queryJob.query === ``) {\n    result = {}\n  } else {\n    result = await startQueryJob(graphqlRunner, queryJob, parentSpan)\n  }\n\n  if (result.errors) {\n    // If there's a graphql error then log the error and exit\n    panicQueryJobError(queryJob, result.errors)\n  }\n\n  // Add the page/slice context onto the results.\n  if (queryJob) {\n    if (queryJob.queryType === `page`) {\n      result[`pageContext`] = Object.assign({}, queryJob.context)\n    } else if (queryJob.queryType === `slice`) {\n      result[`sliceContext`] = Object.assign({}, queryJob.context)\n    }\n  }\n\n  // Delete internal data from pageContext\n  if (result.pageContext) {\n    delete result.pageContext.path\n    delete result.pageContext.internalComponentName\n    delete result.pageContext.component\n    delete result.pageContext.componentChunkName\n    delete result.pageContext.updatedAt\n    delete result.pageContext.pluginCreator___NODE\n    delete result.pageContext.pluginCreatorId\n    delete result.pageContext.componentPath\n    delete result.pageContext.context\n    delete result.pageContext.isCreatedByStatefulCreatePages\n    delete result.pageContext.matchPath\n    delete result.pageContext.mode\n    delete result.pageContext.slices\n  }\n\n  const resultJSON = JSON.stringify(result)\n  const resultHash = await sha1(resultJSON)\n\n  const resultHashCache = getResultHashCache()\n\n  let resultHashCacheKey = queryJob.id\n  if (queryJob.queryType === `static`) {\n    // For static queries we use hash for a file path we output results to.\n    // With automatic sort and aggregation graphql codemod it is possible\n    // to have same result, but different query text hashes which would skip\n    // writing out file to disk if we don't check query hash as well\n    resultHashCacheKey += `-${queryJob.hash}`\n  }\n\n  if (\n    resultHash !== (await resultHashCache.get(resultHashCacheKey)) ||\n    (queryJob.queryType === `page` &&\n      !pageDataExists(path.join(program.directory, `public`), queryJob.id))\n  ) {\n    await resultHashCache.set(resultHashCacheKey, resultHash)\n\n    if (queryJob.queryType === `page` || queryJob.queryType === `slice`) {\n      // We need to save this temporarily in cache because\n      // this might be incomplete at the moment\n      await savePageQueryResult(queryJob.id, resultJSON)\n      if (queryJob.queryType === `page`) {\n        store.dispatch({\n          type: `ADD_PENDING_PAGE_DATA_WRITE`,\n          payload: {\n            path: queryJob.id,\n          },\n        })\n      } else if (queryJob.queryType === `slice`) {\n        store.dispatch({\n          type: `ADD_PENDING_SLICE_DATA_WRITE`,\n          payload: {\n            name: queryJob.id.substring(7), // remove \"slice--\" prefix\n          },\n        })\n      }\n    } else if (queryJob.queryType === `static`) {\n      const resultPath = path.join(\n        program.directory,\n        `public`,\n        `page-data`,\n        `sq`,\n        `d`,\n        `${queryJob.hash}.json`\n      )\n      await fs.outputFile(resultPath, resultJSON)\n    }\n  }\n\n  // Broadcast that a page's query has run.\n  store.dispatch(\n    actions.pageQueryRun({\n      path: queryJob.id,\n      componentPath: queryJob.componentPath,\n      queryType: queryJob.queryType,\n      resultHash,\n      queryHash: queryJob.hash,\n    })\n  )\n\n  return result\n}\n"],"mappings":"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"}