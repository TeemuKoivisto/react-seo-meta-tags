{"version":3,"file":"types.js","names":[],"sources":["../../src/services/types.ts"],"sourcesContent":["import { Span } from \"opentracing\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { IProgram } from \"../commands/types\"\nimport { Runner } from \"../bootstrap/create-graphql-runner\"\nimport { GraphQLRunner } from \"../query/graphql-runner\"\nimport { Store, AnyAction } from \"redux\"\nimport { IGatsbyPage, IGatsbyState } from \"../redux/types\"\nimport { Express } from \"express\"\nimport type { GatsbyWorkerPool } from \"../utils/worker/pool\"\nimport { Actor, AnyEventObject } from \"xstate\"\nimport { Compiler } from \"webpack\"\nimport { WebsocketManager } from \"../utils/websocket-manager\"\nimport { IWebpackWatchingPauseResume } from \"../utils/start-server\"\n\ntype Reporter = typeof reporter\n\nexport interface IGroupedQueryIds {\n  pageQueryIds: Array<IGatsbyPage>\n  staticQueryIds: Array<string>\n  sliceQueryIds: Array<string>\n}\n\nexport interface IMutationAction {\n  type: string\n  payload: Array<unknown>\n  resolve?: (result: unknown) => void\n}\n\nexport interface IBuildContext {\n  reporter?: Reporter\n  shouldRunInitialTypegen?: boolean\n  program: IProgram\n  store?: Store<IGatsbyState, AnyAction>\n  parentSpan?: Span\n  gatsbyNodeGraphQLFunction?: Runner\n  graphqlRunner?: GraphQLRunner\n  queryIds?: IGroupedQueryIds\n  webhookBody?: Record<string, unknown>\n  webhookSourcePluginName?: string\n  refresh?: boolean\n  workerPool?: GatsbyWorkerPool\n  app?: Express\n  nodesMutatedDuringQueryRun?: boolean\n  nodesMutatedDuringQueryRunRecompileCount?: number\n  mutationListener?: Actor<unknown, AnyEventObject>\n  nodeMutationBatch?: Array<IMutationAction>\n  compiler?: Compiler\n  websocketManager?: WebsocketManager\n  webpackWatching?: IWebpackWatchingPauseResume\n  webpackListener?: Actor<unknown, AnyEventObject>\n  queryFilesDirty?: boolean\n  sourceFilesDirty?: boolean\n  changedSourceFiles?: Set<string> // not available in \"recompile\" service\n  recompiledFiles?: Set<string> // available in \"recompile\" service\n  pendingQueryRuns?: Set<string>\n}\n"],"mappings":""}