{"version":3,"file":"resolve-js-file-path.js","names":["maybeAddFileProtocol","process","env","JEST_WORKER_ID","module","pathToFileURL","href","resolveJSFilepath","rootDir","filePath","warn","filePathWithJSExtension","endsWith","filePathWithMJSExtension","require","resolve","report","path","relative","_"],"sources":["../../src/bootstrap/resolve-js-file-path.ts"],"sourcesContent":["import path from \"path\"\nimport { pathToFileURL } from \"url\"\nimport report from \"gatsby-cli/lib/reporter\"\n\n/**\n * On Windows, the file protocol is required for the path to be resolved correctly.\n * On other platforms, the file protocol is not required, but supported, so we want to just always use it.\n * Except jest doesn't work with that and in that environment we never add the file protocol.\n */\nexport const maybeAddFileProtocol = process.env.JEST_WORKER_ID\n  ? (module: string): string => module\n  : (module: string): string => pathToFileURL(module).href\n\n/**\n * Figure out if the file path is .js or .mjs without relying on the fs module, and return the file path if it exists.\n */\nexport async function resolveJSFilepath({\n  rootDir,\n  filePath,\n  warn = true,\n}: {\n  rootDir: string\n  filePath: string\n  warn?: boolean\n}): Promise<string> {\n  const filePathWithJSExtension = filePath.endsWith(`.js`)\n    ? filePath\n    : `${filePath}.js`\n  const filePathWithMJSExtension = filePath.endsWith(`.mjs`)\n    ? filePath\n    : `${filePath}.mjs`\n\n  // Check if both variants exist\n  try {\n    if (\n      require.resolve(filePathWithJSExtension) &&\n      require.resolve(filePathWithMJSExtension)\n    ) {\n      if (warn) {\n        report.warn(\n          `The file '${path.relative(\n            rootDir,\n            filePath\n          )}' has both .js and .mjs variants, please use one or the other. Using .js by default.`\n        )\n      }\n      return filePathWithJSExtension\n    }\n  } catch (_) {\n    // Do nothing\n  }\n\n  // Check if .js variant exists\n  try {\n    if (require.resolve(filePathWithJSExtension)) {\n      return filePathWithJSExtension\n    }\n  } catch (_) {\n    // Do nothing\n  }\n\n  try {\n    if (require.resolve(filePathWithMJSExtension)) {\n      return filePathWithMJSExtension\n    }\n  } catch (_) {\n    // Do nothing\n  }\n\n  return ``\n}\n"],"mappings":";;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACO,MAAMA,oBAAoB,GAAGC,OAAO,CAACC,GAAG,CAACC,cAAc,GACzDC,MAAc,IAAaA,MAAM,GACjCA,MAAc,IAAa,IAAAC,kBAAa,EAACD,MAAM,CAAC,CAACE,IAAI;;AAE1D;AACA;AACA;AAFA;AAGO,eAAeC,iBAAiB,CAAC;EACtCC,OAAO;EACPC,QAAQ;EACRC,IAAI,GAAG;AAKT,CAAC,EAAmB;EAClB,MAAMC,uBAAuB,GAAGF,QAAQ,CAACG,QAAQ,CAAE,KAAI,CAAC,GACpDH,QAAQ,GACP,GAAEA,QAAS,KAAI;EACpB,MAAMI,wBAAwB,GAAGJ,QAAQ,CAACG,QAAQ,CAAE,MAAK,CAAC,GACtDH,QAAQ,GACP,GAAEA,QAAS,MAAK;;EAErB;EACA,IAAI;IACF,IACEK,OAAO,CAACC,OAAO,CAACJ,uBAAuB,CAAC,IACxCG,OAAO,CAACC,OAAO,CAACF,wBAAwB,CAAC,EACzC;MACA,IAAIH,IAAI,EAAE;QACRM,iBAAM,CAACN,IAAI,CACR,aAAYO,aAAI,CAACC,QAAQ,CACxBV,OAAO,EACPC,QAAQ,CACR,sFAAqF,CACxF;MACH;MACA,OAAOE,uBAAuB;IAChC;EACF,CAAC,CAAC,OAAOQ,CAAC,EAAE;IACV;EAAA;;EAGF;EACA,IAAI;IACF,IAAIL,OAAO,CAACC,OAAO,CAACJ,uBAAuB,CAAC,EAAE;MAC5C,OAAOA,uBAAuB;IAChC;EACF,CAAC,CAAC,OAAOQ,CAAC,EAAE;IACV;EAAA;EAGF,IAAI;IACF,IAAIL,OAAO,CAACC,OAAO,CAACF,wBAAwB,CAAC,EAAE;MAC7C,OAAOA,wBAAwB;IACjC;EACF,CAAC,CAAC,OAAOM,CAAC,EAAE;IACV;EAAA;EAGF,OAAQ,EAAC;AACX"}