{"version":3,"file":"index.js","names":["debug","DebugCtor","resolveTheme","themeSpec","configFileThatDeclaredTheme","isMainConfig","rootDir","themeName","resolve","themeDir","scopedRequire","createRequireFromPath","path","dirname","e","pathToLocalTheme","join","resolvePlugin","localErr","reporter","panic","nodeResolutionPaths","module","paths","map","p","id","context","configFilePath","configModule","getConfigFile","theme","preferDefault","themeConfig","options","parentDir","processTheme","themesList","plugins","mapSeries","spec","themeObj","then","arr","concat","Promise","normalizePluginEntry","plugin","loadThemes","config","themesA","reduce","mergeGatsbyConfig","newConfig","mergedConfig","themes"],"sources":["../../../src/bootstrap/load-themes/index.ts"],"sourcesContent":["import { createRequireFromPath } from \"gatsby-core-utils\"\nimport * as path from \"path\"\nimport {\n  IGatsbyConfigInput,\n  mergeGatsbyConfig,\n  PluginEntry,\n  IPluginEntryWithParentDir,\n} from \"../../utils/merge-gatsby-config\"\nimport { mapSeries } from \"bluebird\"\nimport { flattenDeep, isEqual, isFunction, uniqWith } from \"lodash\"\nimport DebugCtor from \"debug\"\nimport { preferDefault } from \"../prefer-default\"\nimport { getConfigFile } from \"../get-config-file\"\nimport { resolvePlugin } from \"../load-plugins/resolve-plugin\"\nimport reporter from \"gatsby-cli/lib/reporter\"\n\nconst debug = DebugCtor(`gatsby:load-themes`)\n\ninterface IThemeObj {\n  themeName: string\n  themeConfig: IGatsbyConfigInput\n  themeDir: string\n  themeSpec: PluginEntry\n  parentDir: string\n  configFilePath?: string\n}\n\n// get the gatsby-config file for a theme\nconst resolveTheme = async (\n  themeSpec: PluginEntry,\n  configFileThatDeclaredTheme: string | undefined,\n  isMainConfig: boolean = false,\n  rootDir: string\n): Promise<IThemeObj> => {\n  const themeName =\n    typeof themeSpec === `string` ? themeSpec : themeSpec.resolve\n  let themeDir\n  try {\n    const scopedRequire = createRequireFromPath(`${rootDir}/:internal:`)\n    // theme is an node-resolvable module\n    themeDir = path.dirname(scopedRequire.resolve(themeName))\n  } catch (e) {\n    let pathToLocalTheme\n\n    // only try to look for local theme in main site\n    // local themes nested in other themes is potential source of problems:\n    // because those are not hosted by npm, there is potential for multiple\n    // local themes with same name that do different things and name being\n    // main identifier that Gatsby uses right now, it's safer not to support it for now.\n    if (isMainConfig) {\n      pathToLocalTheme = path.join(rootDir, `plugins`, themeName)\n      // is a local plugin OR it doesn't exist\n      try {\n        const { resolve } = resolvePlugin(themeName, rootDir)\n        themeDir = resolve\n      } catch (localErr) {\n        reporter.panic(`Failed to resolve ${themeName}`, localErr)\n      }\n    }\n\n    if (!themeDir) {\n      const nodeResolutionPaths = module.paths.map(p => path.join(p, themeName))\n      reporter.panic({\n        id: `10226`,\n        context: {\n          themeName,\n          configFilePath: configFileThatDeclaredTheme,\n          pathToLocalTheme,\n          nodeResolutionPaths,\n        },\n      })\n    }\n  }\n\n  const { configModule, configFilePath } = await getConfigFile(\n    themeDir,\n    `gatsby-config`\n  )\n  const theme:\n    | IGatsbyConfigInput\n    | ((options?: Record<string, unknown>) => IGatsbyConfigInput) =\n    preferDefault(configModule)\n\n  // if theme is a function, call it with the themeConfig\n  const themeConfig = isFunction(theme)\n    ? theme(typeof themeSpec === `string` ? {} : themeSpec.options)\n    : theme\n\n  return {\n    themeName,\n    themeConfig,\n    themeSpec,\n    themeDir,\n    parentDir: rootDir,\n    configFilePath,\n  }\n}\n\n// single iteration of a recursive function that resolve parent themes\n// It's recursive because we support child themes declaring parents and\n// have to resolve all the way `up the tree` of parent/children relationships\n//\n// Theoretically, there could be an infinite loop here but in practice there is\n// no use case for a loop so I expect that to only happen if someone is very\n// off track and creating their own set of themes\nconst processTheme = (\n  { themeName, themeConfig, themeSpec, themeDir, configFilePath }: IThemeObj,\n  { rootDir }: { rootDir: string }\n): Promise<Array<IThemeObj>> => {\n  const themesList = themeConfig && themeConfig.plugins\n  // Gatsby themes don't have to specify a gatsby-config.js (they might only use gatsby-node, etc)\n  // in this case they're technically plugins, but we should support it anyway\n  // because we can't guarantee which files theme creators create first\n  if (themeConfig && themesList) {\n    // for every parent theme a theme defines, resolve the parent's\n    // gatsby config and return it in order [parentA, parentB, child]\n    return mapSeries(\n      themesList,\n      async (spec: PluginEntry): Promise<Array<IThemeObj>> => {\n        const themeObj = await resolveTheme(\n          spec,\n          configFilePath,\n          false,\n          themeDir\n        )\n        return processTheme(themeObj, { rootDir: themeDir })\n      }\n    ).then(arr =>\n      flattenDeep(\n        arr.concat([\n          { themeName, themeConfig, themeSpec, themeDir, parentDir: rootDir },\n        ])\n      )\n    )\n  } else {\n    // if a theme doesn't define additional themes, return the original theme\n    return Promise.resolve([\n      { themeName, themeConfig, themeSpec, themeDir, parentDir: rootDir },\n    ])\n  }\n}\n\nfunction normalizePluginEntry(\n  plugin: PluginEntry,\n  parentDir: string\n): IPluginEntryWithParentDir {\n  return {\n    resolve: typeof plugin === `string` ? plugin : plugin.resolve,\n    options: typeof plugin === `string` ? {} : plugin.options || {},\n    parentDir,\n  }\n}\n\nexport async function loadThemes(\n  config: IGatsbyConfigInput,\n  { configFilePath, rootDir }: { configFilePath: string; rootDir: string }\n): Promise<{\n  config: IGatsbyConfigInput\n  themes: Array<IThemeObj>\n}> {\n  const themesA = await mapSeries(\n    config.plugins || [],\n    async (themeSpec: PluginEntry) => {\n      const themeObj = await resolveTheme(\n        themeSpec,\n        configFilePath,\n        true,\n        rootDir\n      )\n      return processTheme(themeObj, { rootDir })\n    }\n  ).then(arr => flattenDeep(arr))\n\n  // log out flattened themes list to aid in debugging\n  debug(themesA)\n\n  // map over each theme, adding the theme itself to the plugins\n  // list in the config for the theme. This enables the usage of\n  // gatsby-node, etc in themes.\n  return (\n    mapSeries(\n      themesA,\n      ({ themeName, themeConfig = {}, themeSpec, themeDir, parentDir }) => {\n        return {\n          ...themeConfig,\n          plugins: [\n            ...(themeConfig.plugins || []).map(plugin =>\n              normalizePluginEntry(plugin, themeDir)\n            ),\n            // theme plugin is last so it's gatsby-node, etc can override it's declared plugins, like a normal site.\n            {\n              resolve: themeName,\n              options: typeof themeSpec === `string` ? {} : themeSpec.options,\n              parentDir,\n            },\n          ],\n        }\n      }\n    )\n      /**\n       * themes resolve to a gatsby-config, so here we merge all of the configs\n       * into a single config, making sure to maintain the order in which\n       * they were defined so that later configs, like the user's site and\n       * children, can override functionality in earlier themes.\n       */\n      .reduce(mergeGatsbyConfig, {})\n      .then(newConfig => {\n        const mergedConfig = mergeGatsbyConfig(newConfig, {\n          ...config,\n          plugins: [\n            ...(config.plugins || []).map(plugin =>\n              normalizePluginEntry(plugin, rootDir)\n            ),\n          ],\n        })\n\n        mergedConfig.plugins = uniqWith(mergedConfig.plugins, isEqual)\n\n        return {\n          config: mergedConfig,\n          themes: themesA,\n        }\n      })\n  )\n}\n"],"mappings":"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"}