{"version":3,"file":"utils.js","names":["SEARCHABLE_ENUM","SEARCHABLE","NOT_SEARCHABLE","DEPRECATED_SEARCHABLE","removeEmptyFields","inputTypeComposer","cache","Set","convert","itc","has","add","fields","getFields","nonEmptyFields","Object","keys","forEach","fieldName","fieldITC","type","InputTypeComposer","convertedITC","getFieldNames","length","setFields","schemaComposer","typeComposer","preCreatedInputComposer","deprecationReason","postfix","onEnter","leafInputComposer","listInputComposer","inputTypeName","getTypeName","replace","addDerivedType","derivedTypeName","getITC","GraphQLInputObjectType","name","fieldNames","convertedFields","maybeContext","fieldConfig","getFieldConfig","getNamedType","getAnyTC","operatorsInputTC","isListType","getNullableType","GraphQLList","operatorFields","addFields","convertToNestedInputType","typeName","getOrCreateITC","getInputTypeComposer","fallbackType","hasField","getFieldType","extendField","filterInputTC"],"sources":["../../../src/schema/types/utils.ts"],"sourcesContent":["import {\n  getNamedType,\n  getNullableType,\n  GraphQLInputObjectType,\n  GraphQLEnumType,\n  GraphQLList,\n  GraphQLScalarType,\n} from \"graphql\"\nimport { addDerivedType } from \"./derived-types\"\nimport {\n  InputTypeComposer,\n  SchemaComposer,\n  ObjectTypeComposer,\n  EnumTypeComposer,\n  InterfaceTypeComposer,\n  UnionTypeComposer,\n  ScalarTypeComposer,\n  NonNullComposer,\n} from \"graphql-compose\"\n\ntype Context = any\n\ntype AnyComposeType<TContext> =\n  | ObjectTypeComposer<any, TContext>\n  | InputTypeComposer<TContext>\n  | EnumTypeComposer<TContext>\n  | InterfaceTypeComposer<any, TContext>\n  | UnionTypeComposer<any, TContext>\n  | ScalarTypeComposer<TContext>\n\nexport const SEARCHABLE_ENUM = {\n  SEARCHABLE: `SEARCHABLE`,\n  NOT_SEARCHABLE: `NON_SEARCHABLE`,\n  DEPRECATED_SEARCHABLE: `DERPECATED_SEARCHABLE`,\n} as const\n\nconst removeEmptyFields = (\n  { inputTypeComposer }: { inputTypeComposer: InputTypeComposer },\n  cache = new Set()\n): InputTypeComposer => {\n  const convert = (itc: InputTypeComposer): InputTypeComposer => {\n    if (cache.has(itc)) {\n      return itc\n    }\n    cache.add(itc)\n    const fields = itc.getFields()\n    const nonEmptyFields = {}\n    Object.keys(fields).forEach(fieldName => {\n      const fieldITC = fields[fieldName].type\n      if (fieldITC instanceof InputTypeComposer) {\n        const convertedITC = convert(fieldITC)\n        if (convertedITC.getFieldNames().length) {\n          nonEmptyFields[fieldName] = convertedITC\n        }\n      } else {\n        nonEmptyFields[fieldName] = fieldITC\n      }\n    })\n    itc.setFields(nonEmptyFields)\n    return itc\n  }\n  return convert(inputTypeComposer)\n}\n\nexport type IVisitContext =\n  | {\n      deprecationReason?: string\n    }\n  | undefined\n  | null\n\nexport type OnEnter = (visitorContext: {\n  fieldName: string\n  typeComposer: AnyComposeType<Context>\n}) => IVisitContext\n\nexport type LeafInput =\n  | InputTypeComposer<Context>\n  | NonNullComposer<InputTypeComposer<Context>>\n  | ((arg: {\n      type: GraphQLScalarType | GraphQLEnumType\n      schemaComposer: SchemaComposer<Context>\n    }) => InputTypeComposer<Context>)\n  | EnumTypeComposer<Context>\n  | NonNullComposer<EnumTypeComposer<Context>>\n\nexport type ListInput = (arg: {\n  inputTypeComposer: InputTypeComposer\n  schemaComposer: SchemaComposer<Context>\n}) => InputTypeComposer<Context>\n\nconst convert = ({\n  schemaComposer,\n  typeComposer,\n  inputTypeComposer,\n  preCreatedInputComposer,\n  deprecationReason,\n  postfix,\n  onEnter,\n  leafInputComposer,\n  listInputComposer,\n}: {\n  schemaComposer: SchemaComposer<Context>\n  typeComposer: AnyComposeType<Context>\n  inputTypeComposer: InputTypeComposer<Context>\n  preCreatedInputComposer?: InputTypeComposer<Context>\n  deprecationReason?: any\n  postfix: string\n  onEnter: OnEnter\n  leafInputComposer: LeafInput\n  listInputComposer?: ListInput\n}): InputTypeComposer<Context> => {\n  const inputTypeName = inputTypeComposer\n    .getTypeName()\n    .replace(/Input$/, postfix)\n\n  addDerivedType({ typeComposer, derivedTypeName: inputTypeName })\n\n  let convertedITC\n  if (preCreatedInputComposer) {\n    convertedITC = preCreatedInputComposer\n  } else if (schemaComposer.has(inputTypeName)) {\n    return schemaComposer.getITC(inputTypeName)\n  } else {\n    convertedITC = new InputTypeComposer(\n      new GraphQLInputObjectType({\n        name: inputTypeName,\n        fields: {},\n      }),\n      schemaComposer\n    )\n  }\n\n  schemaComposer.add(convertedITC)\n\n  const fieldNames = inputTypeComposer.getFieldNames()\n  const convertedFields = {}\n  fieldNames.forEach(fieldName => {\n    const maybeContext = onEnter({\n      fieldName,\n      typeComposer,\n    })\n\n    if (maybeContext === null) {\n      return\n    }\n\n    const fieldConfig = inputTypeComposer.getFieldConfig(fieldName)\n    const type = getNamedType(fieldConfig.type)\n\n    if (type instanceof GraphQLInputObjectType) {\n      // Input type composers has names `FooInput`, get the type associated\n      // with it\n      const typeComposer = schemaComposer.getAnyTC(\n        type.name.replace(/Input$/, ``)\n      )\n      const itc = new InputTypeComposer(type, schemaComposer)\n\n      const operatorsInputTC = convert({\n        schemaComposer,\n        typeComposer,\n        inputTypeComposer: itc,\n        deprecationReason: maybeContext?.deprecationReason ?? deprecationReason,\n        postfix,\n        onEnter,\n        leafInputComposer,\n        listInputComposer,\n      })\n\n      // TODO: array of arrays?\n      const isListType =\n        getNullableType(fieldConfig.type) instanceof GraphQLList\n\n      convertedFields[fieldName] = isListType\n        ? typeof listInputComposer === `function`\n          ? listInputComposer({\n              schemaComposer,\n              inputTypeComposer: operatorsInputTC,\n            })\n          : operatorsInputTC\n        : operatorsInputTC\n    } else {\n      // GraphQLScalarType || GraphQLEnumType\n      const operatorFields =\n        typeof leafInputComposer === `function`\n          ? leafInputComposer({ schemaComposer, type })\n          : leafInputComposer\n      if (operatorFields) {\n        convertedFields[fieldName] = operatorFields\n      }\n    }\n\n    if (convertedFields[fieldName]) {\n      convertedFields[fieldName].deprecationReason = deprecationReason\n    }\n  })\n\n  convertedITC.addFields(convertedFields)\n  return convertedITC\n}\n\nexport const convertToNestedInputType = ({\n  schemaComposer,\n  typeComposer,\n  postfix,\n  onEnter,\n  leafInputComposer,\n  listInputComposer,\n}: {\n  schemaComposer: SchemaComposer<Context>\n  typeComposer: ObjectTypeComposer<Context> | InterfaceTypeComposer<Context>\n  postfix: string\n  onEnter: OnEnter\n  leafInputComposer: LeafInput\n  listInputComposer?: ListInput\n}): InputTypeComposer => {\n  const typeName = typeComposer.getTypeName()\n  const preCreatedInputComposer = schemaComposer.getOrCreateITC(\n    `${typeName}${postfix}`\n  )\n  const inputTypeComposer = typeComposer.getInputTypeComposer({\n    fallbackType: null,\n  })\n\n  if (\n    inputTypeComposer?.hasField(`id`) &&\n    getNamedType(inputTypeComposer.getFieldType(`id`)).name === `ID`\n  ) {\n    inputTypeComposer.extendField(`id`, { type: `String` })\n  }\n\n  const filterInputTC = convert({\n    schemaComposer,\n    typeComposer,\n    inputTypeComposer,\n    preCreatedInputComposer,\n    postfix,\n    onEnter,\n    leafInputComposer,\n    listInputComposer,\n  })\n\n  return removeEmptyFields({ inputTypeComposer: filterInputTC })\n}\n"],"mappings":"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"}