{"version":3,"file":"sort.js","names":["SORTABLE_ENUM","SORTABLE","NOT_SORTABLE","DEPRECATED_SORTABLE","getSortOrderEnum","schemaComposer","getOrCreateETC","etc","setFields","ASC","value","DESC","MAX_SORT_DEPTH","SORT_FIELD_DELIMITER","convert","typeComposer","fields","prefix","depth","deprecationReason","parentFieldDeprecationReason","sortFields","Object","keys","forEach","fieldName","fieldConfig","sortable","UnionTypeComposer","ScalarTypeComposer","undefined","getFieldExtension","sortKey","sortKeyFieldName","split","join","getNullableType","type","GraphQLList","getNamedType","GraphQLInputObjectType","getAnyTC","name","replace","assign","getFields","getFieldsEnum","inputTypeComposer","typeName","getTypeName","fieldsEnumTypeName","fieldsEnumTypeComposer","addDerivedType","derivedTypeName","getType","getSortInput","toInputObjectType","fallbackType","sortOrderEnumTC","fieldsEnumTC","sortInputTypeName","getOrCreateITC","itc","addFields","order","defaultValue","getSortInputNestedObjects","convertToNestedInputType","postfix","onEnter","leafInputComposer","List"],"sources":["../../../src/schema/types/sort.ts"],"sourcesContent":["// @flow\nimport {\n  getNamedType,\n  getNullableType,\n  GraphQLInputObjectType,\n  GraphQLList,\n  GraphQLInputFieldMap,\n} from \"graphql\"\nimport { addDerivedType } from \"./derived-types\"\nimport {\n  SchemaComposer,\n  EnumTypeComposer,\n  ObjectTypeComposer,\n  InputTypeComposer,\n  InterfaceTypeComposer,\n  UnionTypeComposer,\n  ScalarTypeComposer,\n  toInputObjectType,\n} from \"graphql-compose\"\n\nimport { convertToNestedInputType, IVisitContext } from \"./utils\"\n\ntype AnyTypeComposer<TContext> =\n  | ObjectTypeComposer<any, TContext>\n  | InputTypeComposer<TContext>\n  | EnumTypeComposer<TContext>\n  | InterfaceTypeComposer<any, TContext>\n  | UnionTypeComposer<any, TContext>\n  | ScalarTypeComposer<TContext>\n\nexport const SORTABLE_ENUM = {\n  SORTABLE: `SORTABLE`,\n  NOT_SORTABLE: `NOT_SORTABLE`,\n  DEPRECATED_SORTABLE: `DEPRECATED_SORTABLE`,\n}\n\nexport const getSortOrderEnum = <TContext = any>({\n  schemaComposer,\n}: {\n  schemaComposer: SchemaComposer<TContext>\n}): EnumTypeComposer<TContext> =>\n  schemaComposer.getOrCreateETC(`SortOrderEnum`, etc => {\n    etc.setFields({\n      ASC: { value: `ASC` },\n      DESC: { value: `DESC` },\n    })\n  })\n\nconst MAX_SORT_DEPTH = 3\nconst SORT_FIELD_DELIMITER = `___`\n\nconst convert = <TContext = any>({\n  schemaComposer,\n  typeComposer,\n  fields,\n  prefix = null,\n  depth = 0,\n  deprecationReason: parentFieldDeprecationReason,\n}: {\n  schemaComposer: SchemaComposer<TContext>\n  typeComposer: AnyTypeComposer<TContext>\n  fields: GraphQLInputFieldMap\n  prefix?: string | null\n  depth?: number\n  deprecationReason?: string\n}): any => {\n  const sortFields = {}\n\n  Object.keys(fields).forEach(fieldName => {\n    let deprecationReason = parentFieldDeprecationReason\n    const fieldConfig = fields[fieldName]\n    const sortable =\n      typeComposer instanceof UnionTypeComposer ||\n      typeComposer instanceof ScalarTypeComposer\n        ? undefined\n        : typeComposer.getFieldExtension(fieldName, `sortable`)\n    if (sortable === SORTABLE_ENUM.NOT_SORTABLE) {\n      return\n    } else if (sortable === SORTABLE_ENUM.DEPRECATED_SORTABLE) {\n      deprecationReason = `Sorting on fields that need arguments to resolve is deprecated.`\n    }\n    const sortKey = prefix ? `${prefix}.${fieldName}` : fieldName\n    const sortKeyFieldName = sortKey.split(`.`).join(SORT_FIELD_DELIMITER)\n\n    // XXX(freiksenet): this is to preserve legacy behaviour, this probably doesn't actually sort\n    if (getNullableType(fieldConfig.type) instanceof GraphQLList) {\n      sortFields[sortKeyFieldName] = {\n        value: sortKey,\n        deprecationReason,\n      }\n    }\n\n    const type = getNamedType(fieldConfig.type)\n    if (type instanceof GraphQLInputObjectType) {\n      if (depth < MAX_SORT_DEPTH) {\n        const typeComposer = schemaComposer.getAnyTC(\n          type.name.replace(/Input$/, ``)\n        )\n        Object.assign(\n          sortFields,\n          convert({\n            schemaComposer,\n            typeComposer,\n            fields: type.getFields(),\n            prefix: sortKey,\n            depth: depth + 1,\n            deprecationReason,\n          })\n        )\n      }\n    } else {\n      // GraphQLScalarType || GraphQLEnumType\n      sortFields[sortKeyFieldName] = {\n        value: sortKey,\n        deprecationReason,\n      }\n    }\n  })\n  return sortFields\n}\n\nexport const getFieldsEnum = <TSource = any, TContext = any>({\n  schemaComposer,\n  typeComposer,\n  inputTypeComposer,\n}: {\n  schemaComposer: SchemaComposer<TContext>\n  typeComposer:\n    | ObjectTypeComposer<TSource, TContext>\n    | InterfaceTypeComposer<TSource, TContext>\n  inputTypeComposer: InputTypeComposer<TContext>\n}): EnumTypeComposer<TContext> => {\n  const typeName = typeComposer.getTypeName()\n  const fieldsEnumTypeName = `${typeName}FieldsEnum`\n  const fieldsEnumTypeComposer =\n    schemaComposer.getOrCreateETC(fieldsEnumTypeName)\n  addDerivedType({ typeComposer, derivedTypeName: fieldsEnumTypeName })\n\n  const fields = convert({\n    schemaComposer,\n    typeComposer,\n    fields: inputTypeComposer.getType().getFields(),\n  })\n  fieldsEnumTypeComposer.setFields(fields)\n  return fieldsEnumTypeComposer\n}\n\nexport const getSortInput = <TSource = any, TContext = any>({\n  schemaComposer,\n  typeComposer,\n}: {\n  schemaComposer: SchemaComposer<TContext>\n  typeComposer: ObjectTypeComposer<TSource, TContext>\n}): InputTypeComposer<TContext> => {\n  // toInputObjectType() will fail to convert fields of union types, e.g.\n  //   union FooBar = Foo | Bar\n  //   type Baz {\n  //     fooBar: FooBar\n  //   }\n  // Passing `fallbackType: null` allows us to skip this field in the input type\n  const inputTypeComposer = toInputObjectType(typeComposer, {\n    fallbackType: null,\n  })\n  const sortOrderEnumTC = getSortOrderEnum({ schemaComposer })\n  const fieldsEnumTC = getFieldsEnum({\n    schemaComposer,\n    typeComposer,\n    inputTypeComposer,\n  })\n  const typeName = typeComposer.getTypeName()\n  // console.log(fieldsEnumTC.getType().getValues())\n\n  const sortInputTypeName = `${typeName}SortInput`\n  addDerivedType({ typeComposer, derivedTypeName: sortInputTypeName })\n\n  return schemaComposer.getOrCreateITC(sortInputTypeName, itc => {\n    itc.addFields({\n      fields: [fieldsEnumTC],\n      order: { type: [sortOrderEnumTC], defaultValue: [`ASC`] },\n    })\n  })\n}\n\ntype Context = any\n\nexport const getSortInputNestedObjects = ({\n  schemaComposer,\n  typeComposer,\n}: {\n  schemaComposer: SchemaComposer<Context>\n  typeComposer: ObjectTypeComposer<Context> | InterfaceTypeComposer<Context>\n}): InputTypeComposer => {\n  const itc = convertToNestedInputType({\n    schemaComposer,\n    typeComposer,\n    postfix: `SortInput`,\n    onEnter: ({ fieldName, typeComposer }): IVisitContext => {\n      const sortable =\n        typeComposer instanceof UnionTypeComposer ||\n        typeComposer instanceof ScalarTypeComposer\n          ? undefined\n          : typeComposer.getFieldExtension(fieldName, `sortable`)\n      if (sortable === SORTABLE_ENUM.NOT_SORTABLE) {\n        // stop traversing\n        return null\n      } else if (sortable === SORTABLE_ENUM.DEPRECATED_SORTABLE) {\n        // mark this and all nested fields as deprecated\n        return {\n          deprecationReason: `Sorting on fields that need arguments to resolve is deprecated.`,\n        }\n      }\n\n      // continue\n      return undefined\n    },\n    // @ts-ignore TODO: correct types\n    leafInputComposer: getSortOrderEnum({ schemaComposer }),\n  })\n\n  // @ts-ignore TODO: correct types\n  return itc.List\n}\n"],"mappings":"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"}