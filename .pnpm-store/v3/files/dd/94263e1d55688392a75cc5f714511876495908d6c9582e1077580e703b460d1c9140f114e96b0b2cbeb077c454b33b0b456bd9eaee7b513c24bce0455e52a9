{"version":3,"file":"graphql-runner.js","names":["_rootNodeMap","WeakMap","_trackedRootNodes","WeakSet","GraphQLRunner","constructor","store","collectStats","graphqlTracing","schema","schemaCustomization","getState","nodeModel","LocalNodeModel","schemaComposer","composer","createPageDependency","parseCache","Map","validDocuments","scheduleClearCache","clearCache","bind","stats","totalQueries","uniqueOperations","Set","uniqueQueries","totalRunQuery","totalPluralRunQuery","totalIndexHits","totalSiftHits","totalNonSingleFilters","comparatorsUsed","uniqueFilterPaths","uniqueSorts","clear","parse","query","has","set","get","validate","originalQueryText","document","originalDocument","errors","warnings","validatedDocument","NoDeprecatedCustomRule","length","ast","transformedDocument","hasChanged","tranformDocument","reporter","warn","stripIndent","print","getStats","comparatorsUsedObj","forEach","value","key","push","comparator","amount","size","context","parentSpan","queryName","componentPath","forceGraphqlTracing","telemetryResolverTimings","queryText","body","hash","sha1","add","err","message","tracer","GraphQLSpanTracer","tags","start","execute","rootValue","contextValue","withResolverContext","customContext","variableValues","end"],"sources":["../../src/query/graphql-runner.ts"],"sourcesContent":["import { Span } from \"opentracing\"\nimport {\n  parse,\n  validate,\n  execute,\n  DocumentNode,\n  GraphQLSchema,\n  Source,\n  GraphQLError,\n  ExecutionResult,\n  NoDeprecatedCustomRule,\n  print,\n} from \"graphql\"\nimport { debounce } from \"lodash\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { sha1 } from \"gatsby-core-utils/hash\"\n\nimport { createPageDependency } from \"../redux/actions/add-page-dependency\"\nimport withResolverContext from \"../schema/context\"\nimport { LocalNodeModel } from \"../schema/node-model\"\nimport { Store } from \"redux\"\nimport { IGatsbyState } from \"../redux/types\"\nimport { IGraphQLRunnerStatResults, IGraphQLRunnerStats } from \"./types\"\nimport { IGraphQLTelemetryRecord } from \"../schema/type-definitions\"\nimport GraphQLSpanTracer from \"./graphql-span-tracer\"\nimport { tranformDocument } from \"./transform-document\"\n\n// Preserve these caches across graphql instances.\nconst _rootNodeMap = new WeakMap()\nconst _trackedRootNodes = new WeakSet()\n\ntype Query = string | Source\n\nexport interface IQueryOptions {\n  parentSpan: Span | undefined\n  queryName: string\n  componentPath?: string | undefined\n  forceGraphqlTracing?: boolean\n  telemetryResolverTimings?: Array<IGraphQLTelemetryRecord>\n}\n\nexport interface IGraphQLRunnerOptions {\n  collectStats?: boolean\n  graphqlTracing?: boolean\n}\n\nexport class GraphQLRunner {\n  parseCache: Map<Query, DocumentNode>\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  nodeModel: any // TODO: convert \"../schema/node-model\" from Flow\n\n  schema: GraphQLSchema\n\n  validDocuments: WeakMap<DocumentNode, DocumentNode>\n  scheduleClearCache: () => void\n\n  stats: IGraphQLRunnerStats | null\n  graphqlTracing: boolean\n\n  constructor(\n    protected store: Store<IGatsbyState>,\n    { collectStats, graphqlTracing }: IGraphQLRunnerOptions = {}\n  ) {\n    const { schema, schemaCustomization } = this.store.getState()\n\n    this.nodeModel = new LocalNodeModel({\n      schema,\n      schemaComposer: schemaCustomization.composer,\n      createPageDependency,\n      _rootNodeMap,\n      _trackedRootNodes,\n    })\n    this.schema = schema\n    this.parseCache = new Map()\n    this.validDocuments = new WeakMap()\n    this.scheduleClearCache = debounce(this.clearCache.bind(this), 5000)\n\n    this.graphqlTracing = graphqlTracing || false\n\n    if (collectStats) {\n      this.stats = {\n        totalQueries: 0,\n        uniqueOperations: new Set(),\n        uniqueQueries: new Set(),\n        totalRunQuery: 0,\n        totalPluralRunQuery: 0,\n        totalIndexHits: 0,\n        totalSiftHits: 0,\n        totalNonSingleFilters: 0,\n        comparatorsUsed: new Map(),\n        uniqueFilterPaths: new Set(),\n        uniqueSorts: new Set(),\n      }\n    } else {\n      this.stats = null\n    }\n  }\n\n  clearCache(): void {\n    this.parseCache.clear()\n    this.validDocuments = new WeakMap()\n  }\n\n  parse(query: Query): DocumentNode {\n    if (!this.parseCache.has(query)) {\n      this.parseCache.set(query, parse(query))\n    }\n    return this.parseCache.get(query) as DocumentNode\n  }\n\n  validate(\n    schema: GraphQLSchema,\n    originalQueryText: string,\n    document: DocumentNode,\n    originalDocument: DocumentNode = document\n  ): {\n    errors: ReadonlyArray<GraphQLError>\n    warnings: ReadonlyArray<GraphQLError>\n    document: DocumentNode\n  } {\n    let errors: ReadonlyArray<GraphQLError> = []\n    let warnings: ReadonlyArray<GraphQLError> = []\n    const validatedDocument = this.validDocuments.get(document)\n    if (validatedDocument) {\n      return { errors: [], warnings: [], document: validatedDocument }\n    }\n\n    errors = validate(schema, document)\n    warnings = validate(schema, document, [NoDeprecatedCustomRule])\n\n    if (!errors.length) {\n      this.validDocuments.set(originalDocument, document)\n    } else {\n      const { ast: transformedDocument, hasChanged } =\n        tranformDocument(document)\n      if (hasChanged) {\n        const { errors, warnings, document } = this.validate(\n          schema,\n          originalQueryText,\n          transformedDocument,\n          originalDocument\n        )\n\n        if (!errors.length) {\n          reporter.warn(\n            `Deprecated syntax of sort and/or aggregation field arguments were found in your query (see https://gatsby.dev/graphql-nested-sort-and-aggregate). Query was automatically converted to a new syntax. You should update query in your code.\\n\\nCurrent query:\\n\\n${reporter.stripIndent(\n              originalQueryText\n            )}\\n\\nConverted query:\\n\\n${print(transformedDocument)}`\n          )\n        }\n\n        return { errors, warnings, document }\n      }\n    }\n\n    return { errors, warnings, document }\n  }\n\n  getStats(): IGraphQLRunnerStatResults | null {\n    if (this.stats) {\n      const comparatorsUsedObj: Array<{\n        comparator: string\n        amount: number\n      }> = []\n      this.stats.comparatorsUsed.forEach((value, key) => {\n        comparatorsUsedObj.push({ comparator: key, amount: value })\n      })\n      return {\n        totalQueries: this.stats.totalQueries,\n        uniqueOperations: this.stats.uniqueOperations.size,\n        uniqueQueries: this.stats.uniqueQueries.size,\n        totalRunQuery: this.stats.totalRunQuery,\n        totalPluralRunQuery: this.stats.totalPluralRunQuery,\n        totalIndexHits: this.stats.totalIndexHits,\n        totalSiftHits: this.stats.totalSiftHits,\n        totalNonSingleFilters: this.stats.totalNonSingleFilters,\n        comparatorsUsed: comparatorsUsedObj,\n        uniqueFilterPaths: this.stats.uniqueFilterPaths.size,\n        uniqueSorts: this.stats.uniqueSorts.size,\n      }\n    } else {\n      return null\n    }\n  }\n\n  async query(\n    query: Query,\n    context: Record<string, unknown>,\n    {\n      parentSpan,\n      queryName,\n      componentPath,\n      forceGraphqlTracing = false,\n      telemetryResolverTimings,\n    }: IQueryOptions\n  ): Promise<ExecutionResult> {\n    const { schema, schemaCustomization } = this.store.getState()\n\n    if (this.schema !== schema) {\n      this.schema = schema\n      this.clearCache()\n    }\n\n    let queryText = query\n    if (typeof queryText !== `string`) {\n      queryText = queryText.body\n    }\n\n    if (this.stats) {\n      this.stats.totalQueries++\n\n      const hash = await sha1(queryText)\n\n      this.stats.uniqueQueries.add(hash)\n    }\n\n    const { errors, warnings, document } = this.validate(\n      schema,\n      queryText,\n      this.parse(query)\n    )\n\n    // Queries are usually executed in batch. But after the batch is finished\n    // cache just wastes memory without much benefits.\n    // TODO: consider a better strategy for cache purging/invalidation\n    this.scheduleClearCache()\n\n    if (warnings.length > 0) {\n      // TODO: move those warnings to the caller side, e.g. query-runner.ts\n      warnings.forEach(err => {\n        const message = componentPath ? `\\nQueried in ${componentPath}` : ``\n        reporter.warn(err.message + message)\n      })\n    }\n\n    if (errors.length > 0) {\n      return { errors }\n    }\n\n    let tracer\n    if ((this.graphqlTracing || forceGraphqlTracing) && parentSpan) {\n      tracer = new GraphQLSpanTracer(`GraphQL Query`, {\n        parentSpan,\n        tags: {\n          queryName: queryName,\n        },\n      })\n\n      tracer.start()\n    }\n\n    try {\n      // `execute` will return a promise\n      return await execute({\n        schema,\n        document,\n        rootValue: context,\n        contextValue: withResolverContext({\n          schema,\n          schemaComposer: schemaCustomization.composer,\n          context,\n          customContext: schemaCustomization.context,\n          nodeModel: this.nodeModel,\n          stats: this.stats,\n          tracer,\n          telemetryResolverTimings,\n        }),\n        variableValues: context,\n      })\n    } finally {\n      if (tracer) {\n        tracer.end()\n      }\n    }\n  }\n}\n"],"mappings":"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"}