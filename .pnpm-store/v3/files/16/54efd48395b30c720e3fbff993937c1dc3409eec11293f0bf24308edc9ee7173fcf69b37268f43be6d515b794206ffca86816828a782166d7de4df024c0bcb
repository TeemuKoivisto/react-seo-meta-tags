{"version":3,"file":"limited-exports-page-templates.js","names":["DEFAULT_GRAPHQL_TAG_NAME","isApiExport","node","name","declaration","type","id","declarations","source","specifiers","some","specifier","exported","hasOneValidNamedDeclaration","varName","nonQueryExports","e","isTemplateQuery","graphqlTagName","namespaceSpecifierName","every","el","init","tag","object","property","limitedExports","meta","messages","limitedExportsPageTemplates","create","context","isPageTemplate","store","queryVariableName","VariableDeclaration","requiredFromGatsby","find","arguments","quasis","value","raw","graphqlTagSpecifier","properties","key","undefined","ImportDeclaration","imported","local","TaggedTemplateExpression","parent","ExportNamedDeclaration","report","messageId","module","exports"],"sources":["../../../src/utils/eslint-rules/limited-exports-page-templates.ts"],"sourcesContent":["import { Rule } from \"eslint\"\nimport {\n  Node,\n  Identifier,\n  ImportDeclaration,\n  TaggedTemplateExpression,\n  VariableDeclaration,\n  CallExpression,\n  Literal,\n  TemplateLiteral,\n  VariableDeclarator,\n  ObjectPattern,\n  AssignmentProperty,\n  ExportNamedDeclaration,\n} from \"estree\"\nimport { store } from \"../../redux\"\nimport { isPageTemplate } from \"../eslint-rules-helpers\"\n\nconst DEFAULT_GRAPHQL_TAG_NAME = `graphql`\n\nfunction isApiExport(node: ExportNamedDeclaration, name: string): boolean {\n  // check for\n  // export function name() {}\n  // export async function name() {}\n  if (\n    node.declaration?.type === `FunctionDeclaration` &&\n    node.declaration.id?.name === name\n  ) {\n    return true\n  }\n\n  // check for\n  // export const name = () => {}\n  if (node.declaration?.type === `VariableDeclaration`) {\n    for (const declaration of node.declaration.declarations) {\n      if (\n        declaration.type === `VariableDeclarator` &&\n        declaration.id.type === `Identifier` &&\n        declaration.id.name === name\n      ) {\n        return true\n      }\n    }\n  }\n\n  if (name === `Head`) {\n    // Head can be re-exported, Head can be class components - so the checks above are not sufficient,\n    // we need to be more permisive here\n\n    // class component\n    if (\n      node.declaration?.type === `ClassDeclaration` &&\n      node.declaration?.id?.type === `Identifier` &&\n      node.declaration?.id?.name === name\n    ) {\n      return true\n    }\n\n    // re-exports\n    if (\n      node.source &&\n      node.specifiers.some(specifier => specifier.exported.name === name)\n    ) {\n      return true\n    }\n  }\n\n  return false\n}\n\nfunction hasOneValidNamedDeclaration(\n  node: Node,\n  varName: string | undefined\n): boolean {\n  // Checks for:\n  // const query = graphql``\n  // export { query }\n  if (node.type === `ExportNamedDeclaration` && node.declaration === null) {\n    // For export { foobar, query } the declaration will be null and specifiers exists\n    // For { foobar, query } it'll return true, for { query } it'll return false\n    // It will ignore any { default } declarations since these are allowed\n    const nonQueryExports = node.specifiers.some(e =>\n      varName\n        ? e.exported.name !== varName && e.exported.name !== `default`\n        : e.exported.name !== `default`\n    )\n    return !nonQueryExports\n  }\n\n  return false\n}\n\nfunction isTemplateQuery(\n  node: Node,\n  graphqlTagName: string,\n  namespaceSpecifierName: string\n): boolean {\n  // For export const query = 'foobar' the declaration exists with type 'VariableDeclaration'\n\n  // Checks for:\n  // export const query = graphql``\n  // This case only has one item in the declarations array\n  // For export const hello = 10, world = 'foo'\n  // The array will have two items. So use every() to check if only one item exists\n  // With TaggedTemplateExpression and \"graphql\" name\n\n  // In addition the declaration can also be a MemberExpression like\n  // Gatsby.graphql`` when the import happened with import * as Gatsby from \"gatsby\"\n\n  return (\n    node.type === `ExportNamedDeclaration` &&\n    node.declaration?.type === `VariableDeclaration` &&\n    node.declaration?.declarations.every(el => {\n      if (\n        el?.init?.type === `TaggedTemplateExpression` &&\n        el.init.tag.type === `Identifier`\n      ) {\n        return el.init.tag.name === graphqlTagName\n      } else if (\n        el?.init?.type === `TaggedTemplateExpression` &&\n        el.init.tag.type === `MemberExpression`\n      ) {\n        return (\n          (el.init.tag.object as Identifier).name === namespaceSpecifierName &&\n          (el.init.tag.property as Identifier).name === DEFAULT_GRAPHQL_TAG_NAME\n        )\n      }\n      return false\n    })\n  )\n}\n\nconst limitedExports: Rule.RuleModule = {\n  meta: {\n    type: `problem`,\n    messages: {\n      limitedExportsPageTemplates: `In page templates only a default export of a valid React component and the named exports of a page query, getServerData, Head or config are allowed.\n        All other named exports will cause Fast Refresh to not preserve local component state and do a full refresh.\n\n        Please move your other named exports to another file. Also make sure that you only export page queries that use the \"graphql\" tag from \"gatsby\".\n`,\n    },\n  },\n  create: context => {\n    if (!isPageTemplate(store, context)) {\n      return {}\n    }\n\n    let queryVariableName: string | undefined = ``\n    let graphqlTagName = ``\n    let namespaceSpecifierName = ``\n\n    return {\n      // const { graphql } = require('gatsby')\n      VariableDeclaration: (node): void => {\n        // Check if require('gatsby')\n        const requiredFromGatsby = (\n          node as VariableDeclaration\n        ).declarations.find(el => {\n          // Handle require(`gatsby`)\n          if (\n            (el.init as CallExpression)?.arguments?.[0]?.type ===\n            `TemplateLiteral`\n          ) {\n            return (\n              ((el.init as CallExpression).arguments[0] as TemplateLiteral)\n                ?.quasis[0].value.raw === `gatsby`\n            )\n          }\n\n          return (\n            ((el.init as CallExpression)?.arguments?.[0] as Literal)?.value ===\n            `gatsby`\n          )\n        })\n\n        if (requiredFromGatsby) {\n          // Search for \"graphql\" in a const { graphql, Link } = require('gatsby')\n          const graphqlTagSpecifier = (\n            (requiredFromGatsby as VariableDeclarator).id as ObjectPattern\n          )?.properties.find(\n            el =>\n              ((el as AssignmentProperty).key as Identifier).name ===\n              DEFAULT_GRAPHQL_TAG_NAME\n          )\n\n          if (graphqlTagSpecifier) {\n            graphqlTagName = (\n              (graphqlTagSpecifier as AssignmentProperty).value as Identifier\n            ).name\n          }\n        }\n\n        return undefined\n      },\n      // import { graphql } from \"gatsby\"\n      ImportDeclaration: (node): void => {\n        // Make sure that the specifier is imported from \"gatsby\"\n        if ((node as ImportDeclaration).source.value === `gatsby`) {\n          const graphqlTagSpecifier = (\n            node as ImportDeclaration\n          ).specifiers.find(el => {\n            // We only want import { graphql } from \"gatsby\"\n            // Not import graphql from \"gatsby\"\n            if (el.type === `ImportSpecifier`) {\n              // Only get the specifier with the original name of \"graphql\"\n              return el.imported.name === DEFAULT_GRAPHQL_TAG_NAME\n            }\n            // import * as Gatsby from \"gatsby\"\n            if (el.type === `ImportNamespaceSpecifier`) {\n              namespaceSpecifierName = el.local.name\n              return false\n            }\n            return false\n          })\n          if (graphqlTagSpecifier) {\n            // The local.name handles the case for import { graphql as otherName }\n            // For normal import { graphql } the imported & local name are the same\n            graphqlTagName = graphqlTagSpecifier.local.name\n          }\n        }\n        return undefined\n      },\n      TaggedTemplateExpression: (node): void => {\n        if (\n          (node as TaggedTemplateExpression).type ===\n            `TaggedTemplateExpression` &&\n          ((node as TaggedTemplateExpression).tag as Identifier)?.name ===\n            graphqlTagName\n        ) {\n          if (queryVariableName) {\n            return undefined\n          }\n          // @ts-ignore\n          queryVariableName = node.parent?.id?.name\n        }\n\n        return undefined\n      },\n      ExportNamedDeclaration: (node): void => {\n        if (hasOneValidNamedDeclaration(node, queryVariableName)) {\n          return undefined\n        }\n\n        if (isTemplateQuery(node, graphqlTagName, namespaceSpecifierName)) {\n          return undefined\n        }\n\n        if (isApiExport(node, `getServerData`)) {\n          return undefined\n        }\n\n        if (isApiExport(node, `config`)) {\n          return undefined\n        }\n\n        if (isApiExport(node, `Head`)) {\n          return undefined\n        }\n\n        context.report({\n          node,\n          messageId: `limitedExportsPageTemplates`,\n        })\n\n        return undefined\n      },\n    }\n  },\n}\n\nmodule.exports = limitedExports\n"],"mappings":";;AAeA;AACA;AAEA,MAAMA,wBAAwB,GAAI,SAAQ;AAE1C,SAASC,WAAW,CAACC,IAA4B,EAAEC,IAAY,EAAW;EAAA;EACxE;EACA;EACA;EACA,IACE,sBAAAD,IAAI,CAACE,WAAW,sDAAhB,kBAAkBC,IAAI,MAAM,qBAAoB,IAChD,yBAAAH,IAAI,CAACE,WAAW,CAACE,EAAE,yDAAnB,qBAAqBH,IAAI,MAAKA,IAAI,EAClC;IACA,OAAO,IAAI;EACb;;EAEA;EACA;EACA,IAAI,uBAAAD,IAAI,CAACE,WAAW,uDAAhB,mBAAkBC,IAAI,MAAM,qBAAoB,EAAE;IACpD,KAAK,MAAMD,WAAW,IAAIF,IAAI,CAACE,WAAW,CAACG,YAAY,EAAE;MACvD,IACEH,WAAW,CAACC,IAAI,KAAM,oBAAmB,IACzCD,WAAW,CAACE,EAAE,CAACD,IAAI,KAAM,YAAW,IACpCD,WAAW,CAACE,EAAE,CAACH,IAAI,KAAKA,IAAI,EAC5B;QACA,OAAO,IAAI;MACb;IACF;EACF;EAEA,IAAIA,IAAI,KAAM,MAAK,EAAE;IAAA;IACnB;IACA;;IAEA;IACA,IACE,uBAAAD,IAAI,CAACE,WAAW,uDAAhB,mBAAkBC,IAAI,MAAM,kBAAiB,IAC7C,uBAAAH,IAAI,CAACE,WAAW,gFAAhB,mBAAkBE,EAAE,0DAApB,sBAAsBD,IAAI,MAAM,YAAW,IAC3C,uBAAAH,IAAI,CAACE,WAAW,gFAAhB,mBAAkBE,EAAE,0DAApB,sBAAsBH,IAAI,MAAKA,IAAI,EACnC;MACA,OAAO,IAAI;IACb;;IAEA;IACA,IACED,IAAI,CAACM,MAAM,IACXN,IAAI,CAACO,UAAU,CAACC,IAAI,CAACC,SAAS,IAAIA,SAAS,CAACC,QAAQ,CAACT,IAAI,KAAKA,IAAI,CAAC,EACnE;MACA,OAAO,IAAI;IACb;EACF;EAEA,OAAO,KAAK;AACd;AAEA,SAASU,2BAA2B,CAClCX,IAAU,EACVY,OAA2B,EAClB;EACT;EACA;EACA;EACA,IAAIZ,IAAI,CAACG,IAAI,KAAM,wBAAuB,IAAIH,IAAI,CAACE,WAAW,KAAK,IAAI,EAAE;IACvE;IACA;IACA;IACA,MAAMW,eAAe,GAAGb,IAAI,CAACO,UAAU,CAACC,IAAI,CAACM,CAAC,IAC5CF,OAAO,GACHE,CAAC,CAACJ,QAAQ,CAACT,IAAI,KAAKW,OAAO,IAAIE,CAAC,CAACJ,QAAQ,CAACT,IAAI,KAAM,SAAQ,GAC5Da,CAAC,CAACJ,QAAQ,CAACT,IAAI,KAAM,SAAQ,CAClC;IACD,OAAO,CAACY,eAAe;EACzB;EAEA,OAAO,KAAK;AACd;AAEA,SAASE,eAAe,CACtBf,IAAU,EACVgB,cAAsB,EACtBC,sBAA8B,EACrB;EAAA;EACT;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA,OACEjB,IAAI,CAACG,IAAI,KAAM,wBAAuB,IACtC,uBAAAH,IAAI,CAACE,WAAW,uDAAhB,mBAAkBC,IAAI,MAAM,qBAAoB,2BAChDH,IAAI,CAACE,WAAW,uDAAhB,mBAAkBG,YAAY,CAACa,KAAK,CAACC,EAAE,IAAI;IAAA;IACzC,IACE,CAAAA,EAAE,aAAFA,EAAE,mCAAFA,EAAE,CAAEC,IAAI,6CAAR,SAAUjB,IAAI,MAAM,0BAAyB,IAC7CgB,EAAE,CAACC,IAAI,CAACC,GAAG,CAAClB,IAAI,KAAM,YAAW,EACjC;MACA,OAAOgB,EAAE,CAACC,IAAI,CAACC,GAAG,CAACpB,IAAI,KAAKe,cAAc;IAC5C,CAAC,MAAM,IACL,CAAAG,EAAE,aAAFA,EAAE,oCAAFA,EAAE,CAAEC,IAAI,8CAAR,UAAUjB,IAAI,MAAM,0BAAyB,IAC7CgB,EAAE,CAACC,IAAI,CAACC,GAAG,CAAClB,IAAI,KAAM,kBAAiB,EACvC;MACA,OACGgB,EAAE,CAACC,IAAI,CAACC,GAAG,CAACC,MAAM,CAAgBrB,IAAI,KAAKgB,sBAAsB,IACjEE,EAAE,CAACC,IAAI,CAACC,GAAG,CAACE,QAAQ,CAAgBtB,IAAI,KAAKH,wBAAwB;IAE1E;IACA,OAAO,KAAK;EACd,CAAC,CAAC;AAEN;AAEA,MAAM0B,cAA+B,GAAG;EACtCC,IAAI,EAAE;IACJtB,IAAI,EAAG,SAAQ;IACfuB,QAAQ,EAAE;MACRC,2BAA2B,EAAG;AACpC;AACA;AACA;AACA;IACI;EACF,CAAC;EACDC,MAAM,EAAEC,OAAO,IAAI;IACjB,IAAI,CAAC,IAAAC,kCAAc,EAACC,YAAK,EAAEF,OAAO,CAAC,EAAE;MACnC,OAAO,CAAC,CAAC;IACX;IAEA,IAAIG,iBAAqC,GAAI,EAAC;IAC9C,IAAIhB,cAAc,GAAI,EAAC;IACvB,IAAIC,sBAAsB,GAAI,EAAC;IAE/B,OAAO;MACL;MACAgB,mBAAmB,EAAGjC,IAAI,IAAW;QACnC;QACA,MAAMkC,kBAAkB,GACtBlC,IAAI,CACJK,YAAY,CAAC8B,IAAI,CAAChB,EAAE,IAAI;UAAA;UACxB;UACA,IACE,cAACA,EAAE,CAACC,IAAI,qEAAR,UAA6BgB,SAAS,gFAAtC,oBAAyC,CAAC,CAAC,yDAA3C,qBAA6CjC,IAAI,MAChD,iBAAgB,EACjB;YAAA;YACA,OACE,gBAAEgB,EAAE,CAACC,IAAI,CAAoBgB,SAAS,CAAC,CAAC,CAAC,gDAAzC,YACIC,MAAM,CAAC,CAAC,CAAC,CAACC,KAAK,CAACC,GAAG,MAAM,QAAO;UAExC;UAEA,OACE,cAAEpB,EAAE,CAACC,IAAI,qEAAR,UAA6BgB,SAAS,gFAAtC,oBAAyC,CAAC,CAAC,yDAA5C,qBAA0DE,KAAK,MAC9D,QAAO;QAEZ,CAAC,CAAC;QAEF,IAAIJ,kBAAkB,EAAE;UAAA;UACtB;UACA,MAAMM,mBAAmB,UACtBN,kBAAkB,CAAwB9B,EAAE,wCADnB,IAEzBqC,UAAU,CAACN,IAAI,CAChBhB,EAAE,IACEA,EAAE,CAAwBuB,GAAG,CAAgBzC,IAAI,KACnDH,wBAAwB,CAC3B;UAED,IAAI0C,mBAAmB,EAAE;YACvBxB,cAAc,GACXwB,mBAAmB,CAAwBF,KAAK,CACjDrC,IAAI;UACR;QACF;QAEA,OAAO0C,SAAS;MAClB,CAAC;MACD;MACAC,iBAAiB,EAAG5C,IAAI,IAAW;QACjC;QACA,IAAKA,IAAI,CAAuBM,MAAM,CAACgC,KAAK,KAAM,QAAO,EAAE;UACzD,MAAME,mBAAmB,GACvBxC,IAAI,CACJO,UAAU,CAAC4B,IAAI,CAAChB,EAAE,IAAI;YACtB;YACA;YACA,IAAIA,EAAE,CAAChB,IAAI,KAAM,iBAAgB,EAAE;cACjC;cACA,OAAOgB,EAAE,CAAC0B,QAAQ,CAAC5C,IAAI,KAAKH,wBAAwB;YACtD;YACA;YACA,IAAIqB,EAAE,CAAChB,IAAI,KAAM,0BAAyB,EAAE;cAC1Cc,sBAAsB,GAAGE,EAAE,CAAC2B,KAAK,CAAC7C,IAAI;cACtC,OAAO,KAAK;YACd;YACA,OAAO,KAAK;UACd,CAAC,CAAC;UACF,IAAIuC,mBAAmB,EAAE;YACvB;YACA;YACAxB,cAAc,GAAGwB,mBAAmB,CAACM,KAAK,CAAC7C,IAAI;UACjD;QACF;QACA,OAAO0C,SAAS;MAClB,CAAC;MACDI,wBAAwB,EAAG/C,IAAI,IAAW;QAAA;QACxC,IACGA,IAAI,CAA8BG,IAAI,KACpC,0BAAyB,IAC5B,SAAEH,IAAI,CAA8BqB,GAAG,yCAAvC,KAAwDpB,IAAI,MAC1De,cAAc,EAChB;UAAA;UACA,IAAIgB,iBAAiB,EAAE;YACrB,OAAOW,SAAS;UAClB;UACA;UACAX,iBAAiB,mBAAGhC,IAAI,CAACgD,MAAM,oEAAX,aAAa5C,EAAE,oDAAf,gBAAiBH,IAAI;QAC3C;QAEA,OAAO0C,SAAS;MAClB,CAAC;MACDM,sBAAsB,EAAGjD,IAAI,IAAW;QACtC,IAAIW,2BAA2B,CAACX,IAAI,EAAEgC,iBAAiB,CAAC,EAAE;UACxD,OAAOW,SAAS;QAClB;QAEA,IAAI5B,eAAe,CAACf,IAAI,EAAEgB,cAAc,EAAEC,sBAAsB,CAAC,EAAE;UACjE,OAAO0B,SAAS;QAClB;QAEA,IAAI5C,WAAW,CAACC,IAAI,EAAG,eAAc,CAAC,EAAE;UACtC,OAAO2C,SAAS;QAClB;QAEA,IAAI5C,WAAW,CAACC,IAAI,EAAG,QAAO,CAAC,EAAE;UAC/B,OAAO2C,SAAS;QAClB;QAEA,IAAI5C,WAAW,CAACC,IAAI,EAAG,MAAK,CAAC,EAAE;UAC7B,OAAO2C,SAAS;QAClB;QAEAd,OAAO,CAACqB,MAAM,CAAC;UACblD,IAAI;UACJmD,SAAS,EAAG;QACd,CAAC,CAAC;QAEF,OAAOR,SAAS;MAClB;IACF,CAAC;EACH;AACF,CAAC;AAEDS,MAAM,CAACC,OAAO,GAAG7B,cAAc"}