{"version":3,"file":"lmdb-datastore.js","names":["lmdbDatastore","getNode","getTypes","countNodes","iterateNodes","iterateNodesByType","updateDataStore","ready","runQuery","getNodes","getNodesByType","preSyncDeletedNodeIdsCache","Set","getDefaultDbPath","dbFileName","process","env","NODE_ENV","FORCE_TEST_DATABASE_ID","JEST_WORKER_ID","cwd","fullDbPath","rootDb","databases","getRootDb","Error","globalThis","__GATSBY_OPEN_ROOT_LMDBS","Map","get","open","name","path","compression","set","getDatabases","__GATSBY_OPEN_LMDBS","nodes","openDB","cache","expirer","nodesByType","dupSort","metadata","useVersions","indexes","result","Array","from","type","nodesDb","GatsbyIterable","getKeys","snapshot","map","nodeId","undefined","filter","Boolean","getValues","id","has","asArray","typeName","stats","getStats","Math","max","Number","entryCount","size","getValuesCount","args","GATSBY_EXPERIMENTAL_LMDB_INDEXES","doRunQuery","datastore","Promise","resolve","runFastFiltersAndSort","lastOperationPromise","action","dbs","transactionSync","clearSync","clearIndexes","operationPromise","all","updateNodes","updateNodesByType","delete","payload","add","then","clear","setupLmdbStore","dbPath","replaceReducer","state","emitter","on"],"sources":["../../../src/datastore/lmdb/lmdb-datastore.ts"],"sourcesContent":["import { RootDatabase, open, ArrayLikeIterable } from \"lmdb\"\n// import { performance } from \"perf_hooks\"\nimport { ActionsUnion, IGatsbyNode } from \"../../redux/types\"\nimport { updateNodes } from \"./updates/nodes\"\nimport { updateNodesByType } from \"./updates/nodes-by-type\"\nimport { IDataStore, ILmdbDatabases, IQueryResult } from \"../types\"\nimport { emitter, replaceReducer } from \"../../redux\"\nimport { GatsbyIterable } from \"../common/iterable\"\nimport { doRunQuery } from \"./query/run-query\"\nimport {\n  IRunFilterArg,\n  runFastFiltersAndSort,\n} from \"../in-memory/run-fast-filters\"\n\nconst lmdbDatastore = {\n  getNode,\n  getTypes,\n  countNodes,\n  iterateNodes,\n  iterateNodesByType,\n  updateDataStore,\n  ready,\n  runQuery,\n\n  // deprecated:\n  getNodes,\n  getNodesByType,\n}\n\nconst preSyncDeletedNodeIdsCache = new Set()\n\nfunction getDefaultDbPath(): string {\n  const dbFileName =\n    process.env.NODE_ENV === `test`\n      ? `test-datastore-${\n          // FORCE_TEST_DATABASE_ID will be set if this gets executed in worker context\n          // when running jest tests. JEST_WORKER_ID will be set when this gets executed directly\n          // in test context (jest will use jest-worker internally).\n          process.env.FORCE_TEST_DATABASE_ID ?? process.env.JEST_WORKER_ID\n        }`\n      : `datastore`\n\n  return process.cwd() + `/.cache/data/` + dbFileName\n}\n\nlet fullDbPath\nlet rootDb\nlet databases\n\n/* eslint-disable @typescript-eslint/no-namespace */\ndeclare global {\n  namespace NodeJS {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    interface Global {\n      __GATSBY_OPEN_LMDBS?: Map<string, ILmdbDatabases>\n      __GATSBY_OPEN_ROOT_LMDBS?: Map<string, RootDatabase>\n    }\n  }\n}\n\nfunction getRootDb(): RootDatabase {\n  if (!rootDb) {\n    if (!fullDbPath) {\n      throw new Error(`LMDB path is not set!`)\n    }\n\n    if (!globalThis.__GATSBY_OPEN_ROOT_LMDBS) {\n      globalThis.__GATSBY_OPEN_ROOT_LMDBS = new Map()\n    }\n    rootDb = globalThis.__GATSBY_OPEN_ROOT_LMDBS.get(fullDbPath)\n    if (rootDb) {\n      return rootDb\n    }\n\n    rootDb = open({\n      name: `root`,\n      path: fullDbPath,\n      compression: true,\n    })\n\n    globalThis.__GATSBY_OPEN_ROOT_LMDBS.set(fullDbPath, rootDb)\n  }\n  return rootDb\n}\n\nfunction getDatabases(): ILmdbDatabases {\n  if (!databases) {\n    // __GATSBY_OPEN_LMDBS tracks if we already opened given db in this process\n    // In `gatsby serve` case we might try to open it twice - once for engines\n    // and second to get access to `SitePage` nodes (to power trailing slashes\n    // redirect middleware). This ensure there is single instance within a process.\n    // Using more instances seems to cause weird random errors.\n    if (!globalThis.__GATSBY_OPEN_LMDBS) {\n      globalThis.__GATSBY_OPEN_LMDBS = new Map()\n    }\n    databases = globalThis.__GATSBY_OPEN_LMDBS.get(fullDbPath)\n    if (databases) {\n      return databases\n    }\n\n    const rootDb = getRootDb()\n    databases = {\n      nodes: rootDb.openDB({\n        name: `nodes`,\n        // FIXME: sharedStructuresKey breaks tests - probably need some cleanup for it on DELETE_CACHE\n        // sharedStructuresKey: Symbol.for(`structures`),\n        // @ts-ignore\n        cache: {\n          // expirer: false disables LRU part and only take care of WeakRefs\n          // this way we don't retain nodes strongly, but will continue to\n          // reuse them if they are loaded already\n          expirer: false,\n        },\n      }),\n      nodesByType: rootDb.openDB({\n        name: `nodesByType`,\n        dupSort: true,\n      }),\n      metadata: rootDb.openDB({\n        name: `metadata`,\n        useVersions: true,\n      }),\n      indexes: rootDb.openDB({\n        name: `indexes`,\n        // TODO: use dupSort when this is ready: https://github.com/DoctorEvidence/lmdb-store/issues/66\n        // dupSort: true\n      }),\n    }\n    globalThis.__GATSBY_OPEN_LMDBS.set(fullDbPath, databases)\n  }\n  return databases\n}\n\n/**\n * @deprecated\n */\nfunction getNodes(): Array<IGatsbyNode> {\n  // const start = performance.now()\n  const result = Array.from<IGatsbyNode>(iterateNodes())\n  // const timeTotal = performance.now() - start\n  // console.warn(\n  //   `getNodes() is deprecated, use iterateNodes() instead; ` +\n  //     `array length: ${result.length}; time(ms): ${timeTotal}`\n  // )\n  return result ?? []\n}\n\n/**\n * @deprecated\n */\nfunction getNodesByType(type: string): Array<IGatsbyNode> {\n  // const start = performance.now()\n  const result = Array.from<IGatsbyNode>(iterateNodesByType(type))\n  // const timeTotal = performance.now() - start\n  // console.warn(\n  //   `getNodesByType() is deprecated, use iterateNodesByType() instead; ` +\n  //     `array length: ${result.length}; time(ms): ${timeTotal}`\n  // )\n  return result ?? []\n}\n\nfunction iterateNodes(): GatsbyIterable<IGatsbyNode> {\n  // Additionally fetching items by id to leverage lmdb-store cache\n  const nodesDb = getDatabases().nodes\n  return new GatsbyIterable(\n    nodesDb\n      .getKeys({ snapshot: false })\n      .map(nodeId => (typeof nodeId === `string` ? getNode(nodeId) : undefined))\n      .filter(Boolean) as ArrayLikeIterable<IGatsbyNode>\n  )\n}\n\nfunction iterateNodesByType(type: string): GatsbyIterable<IGatsbyNode> {\n  const nodesByType = getDatabases().nodesByType\n  return new GatsbyIterable(\n    nodesByType\n      .getValues(type)\n      .map(nodeId => getNode(nodeId))\n      .filter(Boolean) as ArrayLikeIterable<IGatsbyNode>\n  )\n}\n\nfunction getNode(id: string): IGatsbyNode | undefined {\n  if (!id || preSyncDeletedNodeIdsCache.has(id)) {\n    return undefined\n  }\n\n  const { nodes } = getDatabases()\n  return nodes.get(id)\n}\n\nfunction getTypes(): Array<string> {\n  return getDatabases().nodesByType.getKeys({}).asArray\n}\n\nfunction countNodes(typeName?: string): number {\n  if (!typeName) {\n    const stats = getDatabases().nodes.getStats() as { entryCount: number }\n    return Math.max(\n      Number(stats.entryCount) - preSyncDeletedNodeIdsCache.size,\n      0\n    ) // FIXME: add -1 when restoring shared structures key\n  }\n\n  const { nodesByType } = getDatabases()\n  return nodesByType.getValuesCount(typeName)\n}\n\nasync function runQuery(args: IRunFilterArg): Promise<IQueryResult> {\n  if (process.env.GATSBY_EXPERIMENTAL_LMDB_INDEXES) {\n    return await doRunQuery({\n      datastore: lmdbDatastore,\n      databases: getDatabases(),\n      ...args,\n    })\n  }\n  return Promise.resolve(runFastFiltersAndSort(args))\n}\n\nlet lastOperationPromise: Promise<any> = Promise.resolve()\n\nfunction updateDataStore(action: ActionsUnion): void {\n  switch (action.type) {\n    case `DELETE_CACHE`: {\n      const dbs = getDatabases()\n      // Force sync commit\n      dbs.nodes.transactionSync(() => {\n        dbs.nodes.clearSync()\n        dbs.nodesByType.clearSync()\n        dbs.metadata.clearSync()\n        dbs.indexes.clearSync()\n      })\n      break\n    }\n    case `SET_PROGRAM`: {\n      // TODO: remove this when we have support for incremental indexes in lmdb\n      clearIndexes()\n      break\n    }\n    case `CREATE_NODE`:\n    case `DELETE_NODE`:\n    case `ADD_FIELD_TO_NODE`:\n    case `ADD_CHILD_NODE_TO_PARENT_NODE`:\n    case `MATERIALIZE_PAGE_MODE`: {\n      const dbs = getDatabases()\n      const operationPromise = Promise.all([\n        updateNodes(dbs.nodes, action),\n        updateNodesByType(dbs.nodesByType, action),\n      ])\n      lastOperationPromise = operationPromise\n\n      // if create is used in the same transaction as delete we should remove it from cache\n      if (action.type === `CREATE_NODE`) {\n        preSyncDeletedNodeIdsCache.delete(action.payload.id)\n      }\n\n      if (action.type === `DELETE_NODE` && action.payload?.id) {\n        preSyncDeletedNodeIdsCache.add(action.payload.id)\n        operationPromise.then(() => {\n          // only clear if no other operations have been done in the meantime\n          if (lastOperationPromise === operationPromise) {\n            preSyncDeletedNodeIdsCache.clear()\n          }\n        })\n      }\n    }\n  }\n}\n\nfunction clearIndexes(): void {\n  const dbs = getDatabases()\n  dbs.nodes.transactionSync(() => {\n    dbs.metadata.clearSync()\n    dbs.indexes.clearSync()\n  })\n}\n\n/**\n * Resolves when all the data is synced\n */\nasync function ready(): Promise<void> {\n  await lastOperationPromise\n}\n\nexport function setupLmdbStore({\n  dbPath = getDefaultDbPath(),\n}: { dbPath?: string } = {}): IDataStore {\n  fullDbPath = dbPath\n\n  replaceReducer({\n    nodes: (state = new Map(), action) =>\n      action.type === `DELETE_CACHE` ? new Map() : state,\n    nodesByType: (state = new Map(), action) =>\n      action.type === `DELETE_CACHE` ? new Map() : state,\n  })\n  emitter.on(`*`, action => {\n    if (action) {\n      updateDataStore(action)\n    }\n  })\n  // TODO: remove this when we have support for incremental indexes in lmdb\n  clearIndexes()\n  return lmdbDatastore\n}\n"],"mappings":"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"}