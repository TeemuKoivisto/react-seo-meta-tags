{"version":3,"file":"lmdb-bundling-patch.js","names":["createRequire","require","source","lmdbBinaryLocation","lmdbRoot","_module","resourceResolveData","descriptionFileRoot","path","dirname","resourcePath","replace","lmdbRequire","nodeGypBuild","e","slash","relative","JSON","stringify"],"sources":["../../../src/schema/graphql-engine/lmdb-bundling-patch.ts"],"sourcesContent":["/* eslint-disable @babel/no-invalid-this */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { slash } from \"gatsby-core-utils/path\"\nimport path from \"path\"\n\n// we need to require this module, we can't use import here\nconst { createRequire } = require(`module`)\n\n// This is hacky webpack loader that does string replacements to\n// allow lmdb@2 to be bundled by webpack for engines.\n// Currently `@vercel/webpack-asset-relocator-loader doesn't handle\n// the way lmdb is loading binaries and dictionary file\n// (can't statically analyze it). So we perform few localized changes\n// and we replace dynamic values with hardcoded ones to allow\n// asset-relocator to pick those assets up and handle them.\n//\n// Because lmdb code can diverge, we also pin version in gatsby\n// dependencies and will have manually bump it (with renovate most likely).\n//\n// To solve this upstream few things would need to change:\n//  - https://github.com/DoctorEvidence/lmdb-js/blob/544b3fda402f24a70a0e946921e4c9134c5adf85/node-index.js#L14-L16\n//  - https://github.com/DoctorEvidence/lmdb-js/blob/544b3fda402f24a70a0e946921e4c9134c5adf85/open.js#L77\n// Reliance on `import.meta.url` + usage of `.replace` is what seems to cause problems currently.\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport default function (this: any, source: string): string {\n  let lmdbBinaryLocation: string | undefined\n  try {\n    const lmdbRoot =\n      this?._module.resourceResolveData?.descriptionFileRoot ||\n      path.dirname(this.resourcePath).replace(`/dist`, ``)\n\n    const lmdbRequire = createRequire(this.resourcePath)\n    let nodeGypBuild\n    try {\n      nodeGypBuild = lmdbRequire(`node-gyp-build-optional-packages`)\n    } catch (e) {\n      // lmdb@2.3.8 way of loading binaries failed, we will try to fallback to\n      // old way before failing completely\n    }\n\n    if (!nodeGypBuild) {\n      // if lmdb@2.3.8 didn't import expected node-gyp-build fork (node-gyp-build-optional-packages)\n      // let's try falling back to upstream package - if that doesn't work, we will fail compilation\n      nodeGypBuild = lmdbRequire(`node-gyp-build`)\n    }\n\n    lmdbBinaryLocation = slash(\n      path.relative(\n        path.dirname(this.resourcePath),\n        nodeGypBuild.path(lmdbRoot)\n      )\n    )\n  } catch (e) {\n    return source\n  }\n  return source\n    .replace(\n      `require$1('node-gyp-build-optional-packages')(dirName)`,\n      `require(${JSON.stringify(lmdbBinaryLocation)})`\n    )\n    .replace(\n      `require$1('node-gyp-build')(dirName)`,\n      `require(${JSON.stringify(lmdbBinaryLocation)})`\n    )\n    .replace(\n      `loadNAPI__default[\"default\"](dirName);`,\n      `require(${JSON.stringify(lmdbBinaryLocation)})`\n    )\n    .replace(\n      `require$2.resolve('./dict/dict.txt')`,\n      `require.resolve('../dict/dict.txt')`\n    )\n    .replace(\n      /fs\\.readFileSync\\(new URL\\('\\.\\/dict\\/dict\\.txt',\\s*\\(typeof\\s*document\\s*===\\s*'undefined'\\s*\\?\\s*new\\s*\\(require\\('u'\\s*\\+\\s*'rl'\\)\\.URL\\)\\s*\\('file:'\\s*\\+\\s*__filename\\).href\\s*:\\s*\\(document\\.currentScript\\s*&&\\s*document\\.currentScript\\.src\\s*\\|\\|\\s*new URL\\('index\\.cjs',\\s*document\\.baseURI\\)\\.href\\)\\)\\.replace\\(\\/dist\\[\\\\\\\\\\\\\\/\\]index\\.cjs\\$\\/,\\s*''\\)\\)\\)/g,\n      `fs.readFileSync(require.resolve('../dict/dict.txt'))`\n    )\n}\n"],"mappings":";;;;;AAEA;AACA;AAHA;AACA;;AAIA;AACA,MAAM;EAAEA;AAAc,CAAC,GAAGC,OAAO,CAAE,QAAO,CAAC;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACe,kBAAqBC,MAAc,EAAU;EAC1D,IAAIC,kBAAsC;EAC1C,IAAI;IAAA;IACF,MAAMC,QAAQ,GACZ,KAAI,aAAJ,IAAI,gDAAJ,IAAI,CAAEC,OAAO,CAACC,mBAAmB,0DAAjC,sBAAmCC,mBAAmB,KACtDC,cAAI,CAACC,OAAO,CAAC,IAAI,CAACC,YAAY,CAAC,CAACC,OAAO,CAAE,OAAM,EAAG,EAAC,CAAC;IAEtD,MAAMC,WAAW,GAAGZ,aAAa,CAAC,IAAI,CAACU,YAAY,CAAC;IACpD,IAAIG,YAAY;IAChB,IAAI;MACFA,YAAY,GAAGD,WAAW,CAAE,kCAAiC,CAAC;IAChE,CAAC,CAAC,OAAOE,CAAC,EAAE;MACV;MACA;IAAA;IAGF,IAAI,CAACD,YAAY,EAAE;MACjB;MACA;MACAA,YAAY,GAAGD,WAAW,CAAE,gBAAe,CAAC;IAC9C;IAEAT,kBAAkB,GAAG,IAAAY,WAAK,EACxBP,cAAI,CAACQ,QAAQ,CACXR,cAAI,CAACC,OAAO,CAAC,IAAI,CAACC,YAAY,CAAC,EAC/BG,YAAY,CAACL,IAAI,CAACJ,QAAQ,CAAC,CAC5B,CACF;EACH,CAAC,CAAC,OAAOU,CAAC,EAAE;IACV,OAAOZ,MAAM;EACf;EACA,OAAOA,MAAM,CACVS,OAAO,CACL,wDAAuD,EACvD,WAAUM,IAAI,CAACC,SAAS,CAACf,kBAAkB,CAAE,GAAE,CACjD,CACAQ,OAAO,CACL,sCAAqC,EACrC,WAAUM,IAAI,CAACC,SAAS,CAACf,kBAAkB,CAAE,GAAE,CACjD,CACAQ,OAAO,CACL,wCAAuC,EACvC,WAAUM,IAAI,CAACC,SAAS,CAACf,kBAAkB,CAAE,GAAE,CACjD,CACAQ,OAAO,CACL,sCAAqC,EACrC,qCAAoC,CACtC,CACAA,OAAO,CACN,+WAA+W,EAC9W,sDAAqD,CACvD;AACL"}