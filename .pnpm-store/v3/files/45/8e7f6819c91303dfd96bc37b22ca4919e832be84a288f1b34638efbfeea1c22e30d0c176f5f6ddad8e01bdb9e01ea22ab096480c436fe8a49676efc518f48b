{"version":3,"file":"build-utils.js","names":["checkFolderIsEmpty","path","fs","existsSync","readdirSync","length","checkAndRemoveEmptyDir","publicDir","pagePath","pageHtmlDirectory","dirname","generateHtmlPath","pageDataDirectory","join","fixedPagePath","removeSync","sortedPageKeysByNestedLevel","pageKeys","sort","a","b","currentPagePathValue","split","previousPagePathValue","removePageFiles","removePages","map","removePromise","removePageHtmlFile","then","store","dispatch","type","payload","removePageDataList","removePageData","Promise","all","forEach","FSisCaseInsensitive","process","env","TEST_FORCE_CASE_FS","platform","normalizePagePath","toLowerCase","endsWith","slice","pageGenerationActionPriority","regenerate","reuse","delete","calcDirtyHtmlFiles","state","toRegenerate","Set","toDelete","toCleanupFromTrackedState","normalizedPagePathToAction","Map","markActionForPage","action","normalizedPagePath","previousAction","get","overwritePreviousAction","previousActionPriority","currentActionPriority","add","actualPath","set","html","unsafeBuiltinWasUsedInSSR","reporter","warn","trackedHtmlFiles","htmlFile","page","pages","isDeleted","getPageMode","dirty","Array","from","markHtmlDirtyIfResultOfUsedStaticQueryChanged","getState","dirtyStaticQueryResults","trackedStaticQueryResults","staticQueryResultState","staticQueryHash","dirtyTemplates","staticQueriesByTemplate","staticQueryHashes","componentPath","dirtyStaticQueryHash","includes","dirtyPages","dirtySlices","dirtyTemplate","component","components","isSlice","slices"],"sources":["../../src/commands/build-utils.ts"],"sourcesContent":["import fs from \"fs-extra\"\nimport path from \"path\"\nimport { platform } from \"os\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport {\n  remove as removePageHtmlFile,\n  generateHtmlPath,\n  fixedPagePath,\n} from \"gatsby-core-utils\"\nimport { removePageData } from \"../utils/page-data\"\nimport { store } from \"../redux\"\nimport { IGatsbyState } from \"../redux/types\"\nimport { getPageMode } from \"../utils/page-mode\"\n\nconst checkFolderIsEmpty = (path: string): boolean =>\n  fs.existsSync(path) && !fs.readdirSync(path).length\n\nconst checkAndRemoveEmptyDir = (publicDir: string, pagePath: string): void => {\n  const pageHtmlDirectory = path.dirname(generateHtmlPath(publicDir, pagePath))\n  const pageDataDirectory = path.join(\n    publicDir,\n    `page-data`,\n    fixedPagePath(pagePath)\n  )\n  // if page's folder is empty also remove matching page-data folder\n  if (checkFolderIsEmpty(pageHtmlDirectory)) {\n    fs.removeSync(pageHtmlDirectory)\n  }\n  if (checkFolderIsEmpty(pageDataDirectory)) {\n    fs.removeSync(pageDataDirectory)\n  }\n}\n\nconst sortedPageKeysByNestedLevel = (pageKeys: Array<string>): Array<string> =>\n  pageKeys.sort((a, b) => {\n    const currentPagePathValue = a.split(`/`).length\n    const previousPagePathValue = b.split(`/`).length\n    return previousPagePathValue - currentPagePathValue\n  })\n\nexport const removePageFiles = async (\n  publicDir: string,\n  pageKeys: Array<string>\n): Promise<void> => {\n  const removePages = pageKeys.map(pagePath => {\n    const removePromise = removePageHtmlFile({ publicDir }, pagePath)\n    removePromise.then(() => {\n      store.dispatch({\n        type: `HTML_REMOVED`,\n        payload: pagePath,\n      })\n    })\n    return removePromise\n  })\n\n  const removePageDataList = pageKeys.map(pagePath =>\n    removePageData(publicDir, pagePath)\n  )\n\n  return Promise.all([...removePages, ...removePageDataList]).then(() => {\n    // Sort removed pageKeys by nested directories and remove if empty.\n    sortedPageKeysByNestedLevel(pageKeys).forEach(pagePath => {\n      checkAndRemoveEmptyDir(publicDir, pagePath)\n    })\n  })\n}\n\nconst FSisCaseInsensitive = process.env.TEST_FORCE_CASE_FS\n  ? process.env.TEST_FORCE_CASE_FS === `INSENSITIVE`\n  : platform() === `win32` || platform() === `darwin`\nfunction normalizePagePath(path: string): string {\n  if (path === `/`) {\n    return `/`\n  }\n\n  if (FSisCaseInsensitive) {\n    // e.g. /TEST/ and /test/ would produce \"same\" artifacts on case insensitive\n    // file systems\n    path = path.toLowerCase()\n  }\n\n  return path.endsWith(`/`) ? path.slice(0, -1) : path\n}\n\ntype PageGenerationAction = \"delete\" | \"regenerate\" | \"reuse\"\nconst pageGenerationActionPriority: Record<PageGenerationAction, number> = {\n  // higher the number, higher the priority\n  regenerate: 2,\n  reuse: 1,\n  delete: 0,\n}\n\nexport function calcDirtyHtmlFiles(state: IGatsbyState): {\n  toRegenerate: Array<string>\n  toDelete: Array<string>\n  toCleanupFromTrackedState: Set<string>\n} {\n  const toRegenerate = new Set<string>()\n  const toDelete = new Set<string>()\n  const toCleanupFromTrackedState = new Set<string>()\n  const normalizedPagePathToAction = new Map<\n    string,\n    {\n      actualPath: string\n      action: PageGenerationAction\n    }\n  >()\n\n  /**\n   * multiple page paths can result in same html and page-data filenames\n   * so we need to keep that in mind when generating list of pages\n   * to regenerate and more importantly - to delete (so we don't delete html and page-data file\n   * when path changes slightly but it would still result in same html and page-data filenames\n   * for example adding/removing trailing slash between builds or even mid build with plugins\n   * like `gatsby-plugin-remove-trailing-slashes`). Additionally similar consideration need to\n   * be accounted for cases where page paths casing on case-insensitive file systems.\n   */\n  function markActionForPage(path: string, action: PageGenerationAction): void {\n    const normalizedPagePath = normalizePagePath(path)\n\n    const previousAction = normalizedPagePathToAction.get(normalizedPagePath)\n    let overwritePreviousAction = false\n    if (previousAction) {\n      const previousActionPriority =\n        pageGenerationActionPriority[previousAction.action]\n      const currentActionPriority = pageGenerationActionPriority[action]\n\n      if (currentActionPriority > previousActionPriority) {\n        overwritePreviousAction = true\n        toCleanupFromTrackedState.add(previousAction.actualPath)\n        if (previousAction.action === `delete`) {\n          // \"reuse\" or \"regenerate\" will take over, so we should\n          // remove path from list of paths to delete\n          toDelete.delete(previousAction.actualPath)\n        }\n      }\n    }\n\n    if (!previousAction || overwritePreviousAction) {\n      normalizedPagePathToAction.set(normalizedPagePath, {\n        actualPath: path,\n        action,\n      })\n      if (action === `delete`) {\n        toDelete.add(path)\n      } else if (action === `regenerate`) {\n        toRegenerate.add(path)\n      }\n    }\n  }\n\n  if (state.html.unsafeBuiltinWasUsedInSSR) {\n    reporter.warn(\n      `Previous build used unsafe builtin method. We need to rebuild all pages`\n    )\n  }\n\n  state.html.trackedHtmlFiles.forEach(function (htmlFile, path) {\n    const page = state.pages.get(path)\n    if (htmlFile.isDeleted || !page) {\n      // FIXME: checking pages state here because pages are not persisted\n      // and because of that `isDeleted` might not be set ...\n      markActionForPage(path, `delete`)\n    } else {\n      if (getPageMode(page, state) === `SSG`) {\n        if (htmlFile.dirty || state.html.unsafeBuiltinWasUsedInSSR) {\n          markActionForPage(path, `regenerate`)\n        } else {\n          markActionForPage(path, `reuse`)\n        }\n      }\n    }\n  })\n\n  return {\n    toRegenerate: Array.from(toRegenerate),\n    toDelete: Array.from(toDelete),\n    toCleanupFromTrackedState,\n  }\n}\n\nexport function markHtmlDirtyIfResultOfUsedStaticQueryChanged(): void {\n  const state = store.getState()\n\n  const dirtyStaticQueryResults = new Set<string>()\n  state.html.trackedStaticQueryResults.forEach(function (\n    staticQueryResultState,\n    staticQueryHash\n  ) {\n    if (staticQueryResultState.dirty) {\n      dirtyStaticQueryResults.add(staticQueryHash)\n    }\n  })\n\n  // we have dirty static query hashes - now we need to find templates that use them\n  const dirtyTemplates = new Set<string>()\n  state.staticQueriesByTemplate.forEach(function (\n    staticQueryHashes,\n    componentPath\n  ) {\n    for (const dirtyStaticQueryHash of dirtyStaticQueryResults) {\n      if (staticQueryHashes.includes(dirtyStaticQueryHash)) {\n        dirtyTemplates.add(componentPath)\n        break // we already know this template need to rebuild, no need to check rest of queries\n      }\n    }\n  })\n\n  // mark html as dirty\n  const dirtyPages = new Set<string>()\n  const dirtySlices = new Set<string>()\n  for (const dirtyTemplate of dirtyTemplates) {\n    const component = state.components.get(dirtyTemplate)\n    if (component) {\n      for (const page of component.pages) {\n        if (component.isSlice) {\n          dirtySlices.add(page)\n        } else {\n          dirtyPages.add(page)\n        }\n      }\n    }\n  }\n\n  store.dispatch({\n    type: `HTML_MARK_DIRTY_BECAUSE_STATIC_QUERY_RESULT_CHANGED`,\n    payload: {\n      pages: dirtyPages,\n      slices: dirtySlices,\n      staticQueryHashes: dirtyStaticQueryResults,\n    },\n  })\n}\n"],"mappings":"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"}