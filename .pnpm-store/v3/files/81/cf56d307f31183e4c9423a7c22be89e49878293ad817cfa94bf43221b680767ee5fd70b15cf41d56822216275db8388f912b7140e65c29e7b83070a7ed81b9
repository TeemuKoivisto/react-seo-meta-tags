{"version":3,"file":"compile-gatsby-files.js","names":["COMPILED_CACHE_DIR","PARCEL_CACHE_DIR","gatsbyFileRegex","RETRY_COUNT","getCacheDir","siteRoot","exponentialBackoff","retry","Promise","resolve","timeout","Math","pow","setTimeout","constructParcel","cache","Parcel","entries","defaultConfig","require","mode","targets","root","outputFormat","includeNodeModules","sourceMap","process","env","NODE_ENV","engines","node","distDir","cacheDir","compileGatsbyFiles","gatsbyNodeName","filesAndDirectories","readdir","withFileTypes","files","filter","i","isDirectory","map","name","nearMatch","file","path","parse","isNearMatch","isTSX","endsWith","reporter","panic","id","context","configName","ensureDir","emptyDir","LMDBCache","parcel","bundleGraph","run","cacheClosePromise","store","close","e","verbose","toString","bundles","getBundles","length","compiledTSFilesCount","bundle","filePath","retries","compiledFileLocation","sourceFileLocation","getMainEntry","message","remove","mainEntry","telemetry","isTrackingEnabled","trackCli","valueInteger","error","diagnostics","handleErrors","sourceMessage","forEach","err","codeFrames","c","codeHighlightsMessage","codeHighlights","specificMessage","undefined","generalMessage","origin","hints","getResolvedFieldsForPlugin","rootDir","pluginName","resolvedCompiledGatsbyNode","findCompiledLocalPluginModule","moduleName","compiledPathForPlugin","compiledPathForModule","isCompiled","existsSync"],"sources":["../../../src/utils/parcel/compile-gatsby-files.ts"],"sourcesContent":["import { Parcel } from \"@parcel/core\"\nimport { LMDBCache, Cache } from \"@parcel/cache\"\nimport path from \"path\"\nimport type { Diagnostic } from \"@parcel/diagnostic\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { ensureDir, emptyDir, existsSync, remove, readdir } from \"fs-extra\"\nimport telemetry from \"gatsby-telemetry\"\nimport { isNearMatch } from \"../is-near-match\"\n\nexport const COMPILED_CACHE_DIR = `.cache/compiled`\nexport const PARCEL_CACHE_DIR = `.cache/.parcel-cache`\nexport const gatsbyFileRegex = `gatsby-+(node|config).ts`\nconst RETRY_COUNT = 5\n\nfunction getCacheDir(siteRoot: string): string {\n  return `${siteRoot}/${PARCEL_CACHE_DIR}`\n}\n\nfunction exponentialBackoff(retry: number): Promise<void> {\n  if (retry === 0) {\n    return Promise.resolve()\n  }\n  const timeout = 50 * Math.pow(2, retry)\n  return new Promise(resolve => setTimeout(resolve, timeout))\n}\n\n/**\n * Construct Parcel with config.\n * @see {@link https://parceljs.org/features/targets/}\n */\nexport function constructParcel(siteRoot: string, cache?: Cache): Parcel {\n  return new Parcel({\n    entries: [\n      `${siteRoot}/${gatsbyFileRegex}`,\n      `${siteRoot}/plugins/**/${gatsbyFileRegex}`,\n    ],\n    defaultConfig: require.resolve(`gatsby-parcel-config`),\n    mode: `production`,\n    cache,\n    targets: {\n      root: {\n        outputFormat: `commonjs`,\n        includeNodeModules: false,\n        sourceMap: process.env.NODE_ENV === `development`,\n        engines: {\n          node: _CFLAGS_.GATSBY_MAJOR === `5` ? `>= 18.0.0` : `>= 14.15.0`,\n        },\n        distDir: `${siteRoot}/${COMPILED_CACHE_DIR}`,\n      },\n    },\n    cacheDir: getCacheDir(siteRoot),\n  })\n}\n\n/**\n * Compile known gatsby-* files (e.g. `gatsby-config`, `gatsby-node`)\n * and output in `<SITE_ROOT>/.cache/compiled`.\n */\nexport async function compileGatsbyFiles(\n  siteRoot: string,\n  retry: number = 0\n): Promise<void> {\n  try {\n    const gatsbyNodeName = `gatsby-node`\n\n    // Check for gatsby-node.jsx and gatsby-node.tsx (or other misnamed variations)\n    // We want to filter out directory names so we can use \"withFileTypes\"\n    // With \"withFileTypes\" the array will contain <fs.Dirent> objects\n    const filesAndDirectories = await readdir(siteRoot, { withFileTypes: true })\n    const files = filesAndDirectories\n      .filter(i => !i.isDirectory())\n      .map(i => i.name)\n\n    let nearMatch = ``\n\n    for (const file of files) {\n      if (nearMatch) {\n        break\n      }\n\n      const { name } = path.parse(file)\n      // Of course, allow valid gatsby-node files\n      if (\n        file === `gatsby-node.js` ||\n        file === `gatsby-node.mjs` ||\n        file === `gatsby-node.ts`\n      ) {\n        break\n      }\n\n      // Check for likely misnamed files\n      if (isNearMatch(name, gatsbyNodeName, 3)) {\n        nearMatch = file\n      }\n    }\n\n    // gatsby-node is misnamed\n    if (nearMatch) {\n      const isTSX = nearMatch.endsWith(`.tsx`)\n      reporter.panic({\n        id: `10128`,\n        context: {\n          configName: gatsbyNodeName,\n          nearMatch,\n          isTSX,\n        },\n      })\n    }\n\n    const distDir = `${siteRoot}/${COMPILED_CACHE_DIR}`\n    await ensureDir(distDir)\n    await emptyDir(distDir)\n\n    await exponentialBackoff(retry)\n\n    // for whatever reason TS thinks LMDBCache is some browser Cache and not actually Parcel's Cache\n    // so we force type it to Parcel's Cache\n    const cache = new LMDBCache(getCacheDir(siteRoot)) as unknown as Cache\n    const parcel = constructParcel(siteRoot, cache)\n    const { bundleGraph } = await parcel.run()\n    let cacheClosePromise = Promise.resolve()\n    try {\n      // @ts-ignore store is public field on LMDBCache class, but public interface for Cache\n      // doesn't have it. There doesn't seem to be proper public API for this, so we have to\n      // resort to reaching into internals. Just in case this is wrapped in try/catch if\n      // parcel changes internals in future (closing cache is only needed when retrying\n      // so the if the change happens we shouldn't fail on happy builds)\n      cacheClosePromise = cache.store.close()\n    } catch (e) {\n      reporter.verbose(`Failed to close parcel cache\\n${e.toString()}`)\n    }\n\n    await exponentialBackoff(retry)\n\n    const bundles = bundleGraph.getBundles()\n\n    if (bundles.length === 0) return\n\n    let compiledTSFilesCount = 0\n    for (const bundle of bundles) {\n      // validate that output exists and is valid\n      try {\n        delete require.cache[bundle.filePath]\n        require(bundle.filePath)\n      } catch (e) {\n        if (retry >= RETRY_COUNT) {\n          reporter.panic({\n            id: `11904`,\n            context: {\n              siteRoot,\n              retries: RETRY_COUNT,\n              compiledFileLocation: bundle.filePath,\n              sourceFileLocation: bundle.getMainEntry()?.filePath,\n            },\n          })\n        } else if (retry > 0) {\n          // first retry is most flaky and it seems it always get in good state\n          // after that - most likely cache clearing is the trick that fixes the problem\n          reporter.verbose(\n            `Failed to import compiled file \"${\n              bundle.filePath\n            }\" after retry, attempting another retry (#${\n              retry + 1\n            } of ${RETRY_COUNT}) - \"${e.message}\"`\n          )\n        }\n\n        // sometimes parcel cache gets in weird state and we need to clear the cache\n        await cacheClosePromise\n\n        try {\n          await remove(getCacheDir(siteRoot))\n        } catch {\n          // in windows we might get \"EBUSY\" errors if LMDB failed to close, so this try/catch is\n          // to prevent EBUSY errors from potentially hiding real import errors\n        }\n\n        await compileGatsbyFiles(siteRoot, retry + 1)\n        return\n      }\n\n      const mainEntry = bundle.getMainEntry()?.filePath\n      // mainEntry won't exist for shared chunks\n      if (mainEntry) {\n        if (mainEntry.endsWith(`.ts`)) {\n          compiledTSFilesCount = compiledTSFilesCount + 1\n        }\n      }\n    }\n\n    if (telemetry.isTrackingEnabled()) {\n      telemetry.trackCli(`PARCEL_COMPILATION_END`, {\n        valueInteger: compiledTSFilesCount,\n        name: `count of compiled ts files`,\n      })\n    }\n  } catch (error) {\n    if (error.diagnostics) {\n      handleErrors(error.diagnostics)\n    } else {\n      reporter.panic({\n        id: `11903`,\n        error,\n        context: {\n          siteRoot,\n          sourceMessage: error.message,\n        },\n      })\n    }\n  }\n}\n\nfunction handleErrors(diagnostics: Array<Diagnostic>): void {\n  diagnostics.forEach(err => {\n    if (err.codeFrames) {\n      err.codeFrames.forEach(c => {\n        // Assuming that codeHighlights only ever has one entry in the array. Local tests only ever showed one\n        const codeHighlightsMessage = c?.codeHighlights[0]?.message\n        // If both messages are the same don't print the specific, otherwise they would be duplicate\n        const specificMessage =\n          codeHighlightsMessage === err.message\n            ? undefined\n            : codeHighlightsMessage\n        reporter.panic({\n          id: `11901`,\n          context: {\n            filePath: c?.filePath,\n            generalMessage: err.message,\n            specificMessage,\n            origin: err?.origin,\n            hints: err?.hints,\n          },\n        })\n      })\n    } else {\n      reporter.panic({\n        id: `11901`,\n        context: {\n          generalMessage: err.message,\n          origin: err?.origin,\n          hints: err?.hints,\n        },\n      })\n    }\n  })\n}\n\nexport function getResolvedFieldsForPlugin(\n  rootDir: string,\n  pluginName: string\n): {\n  resolvedCompiledGatsbyNode?: string\n} {\n  return {\n    resolvedCompiledGatsbyNode: findCompiledLocalPluginModule(\n      rootDir,\n      pluginName,\n      `gatsby-node`\n    ),\n  }\n}\n\nexport function findCompiledLocalPluginModule(\n  rootDir: string,\n  pluginName: string,\n  moduleName: \"gatsby-config\" | \"gatsby-node\"\n): string | undefined {\n  const compiledPathForPlugin =\n    pluginName === `default-site-plugin`\n      ? `${rootDir}/${COMPILED_CACHE_DIR}`\n      : `${rootDir}/${COMPILED_CACHE_DIR}/plugins/${pluginName}`\n\n  const compiledPathForModule = `${compiledPathForPlugin}/${moduleName}.js`\n\n  const isCompiled = existsSync(compiledPathForModule)\n  if (isCompiled) {\n    return compiledPathForModule\n  }\n\n  return undefined\n}\n"],"mappings":"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"}