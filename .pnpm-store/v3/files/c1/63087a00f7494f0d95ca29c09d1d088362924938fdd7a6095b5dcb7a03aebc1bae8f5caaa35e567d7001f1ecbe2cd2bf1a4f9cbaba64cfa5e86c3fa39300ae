{"version":3,"file":"pool.js","names":["create","numWorkers","Math","max","cpuCoreCount","reporter","verbose","worker","WorkerPool","require","resolve","env","GATSBY_NODE_GLOBALS","JSON","stringify","global","__GATSBY","GATSBY_WORKER_POOL_WORKER","GATSBY_SKIP_WRITING_SCHEMA_TO_FILE","initJobsMessagingInMainProcess","initReporterMessagingInMainProcess","queriesChunkSize","Number","process","GATSBY_PARALLEL_QUERY_CHUNK_SIZE","handleRunQueriesInWorkersQueueError","e","panic","id","context","error","runQueriesInWorkersQueue","pool","queryIds","opts","activity","createProgress","staticQueryIds","length","pageQueryIds","parentSpan","start","staticQuerySegments","chunkSize","pageQuerySegments","all","setComponents","segment","single","runQueries","sliceQueryIds","then","replayWorkerActions","tick","catch","Promise","saveQueriesDependencies","end","mergeWorkerState","activityTimer","workerId","getWorkerInfo","state","loadPartialStateFromDisk","String","queryStateChunk","queries","queryStateTelemetryChunk","telemetry","payload","Object","keys","store","dispatch","type","nextTick","actions","i","action"],"sources":["../../../src/utils/worker/pool.ts"],"sourcesContent":["import { WorkerPool } from \"gatsby-worker\"\nimport { chunk } from \"lodash\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { cpuCoreCount } from \"gatsby-core-utils\"\nimport { Span } from \"opentracing\"\n\nimport { IGroupedQueryIds } from \"../../services\"\nimport { initJobsMessagingInMainProcess } from \"../jobs/worker-messaging\"\nimport { initReporterMessagingInMainProcess } from \"./reporter\"\n\nimport { GatsbyWorkerPool } from \"./types\"\nimport { loadPartialStateFromDisk, store } from \"../../redux\"\nimport { ActionsUnion, IGatsbyState } from \"../../redux/types\"\n\nexport type { GatsbyWorkerPool }\n\nexport const create = (): GatsbyWorkerPool => {\n  const numWorkers = Math.max(1, cpuCoreCount() - 1)\n  reporter.verbose(`Creating ${numWorkers} worker`)\n\n  const worker: GatsbyWorkerPool = new WorkerPool(require.resolve(`./child`), {\n    numWorkers,\n    env: {\n      GATSBY_NODE_GLOBALS: JSON.stringify(global.__GATSBY ?? {}),\n      GATSBY_WORKER_POOL_WORKER: `true`,\n      GATSBY_SKIP_WRITING_SCHEMA_TO_FILE: `true`,\n    },\n  })\n\n  initJobsMessagingInMainProcess(worker)\n  initReporterMessagingInMainProcess(worker)\n\n  return worker\n}\n\nconst queriesChunkSize =\n  Number(process.env.GATSBY_PARALLEL_QUERY_CHUNK_SIZE) || 50\n\nfunction handleRunQueriesInWorkersQueueError(e: Error): never {\n  reporter.panic({\n    id: `85928`,\n    context: {},\n    error: e,\n  })\n}\n\nexport async function runQueriesInWorkersQueue(\n  pool: GatsbyWorkerPool,\n  queryIds: IGroupedQueryIds,\n  opts?: {\n    chunkSize?: number\n    parentSpan?: Span\n  }\n): Promise<void> {\n  const activity = reporter.createProgress(\n    `run queries in workers`,\n    queryIds.staticQueryIds.length + queryIds.pageQueryIds.length,\n    0,\n    { parentSpan: opts?.parentSpan }\n  )\n  activity.start()\n  try {\n    const staticQuerySegments = chunk(\n      queryIds.staticQueryIds,\n      opts?.chunkSize ?? queriesChunkSize\n    )\n    const pageQuerySegments = chunk(\n      queryIds.pageQueryIds,\n      opts?.chunkSize ?? queriesChunkSize\n    )\n\n    pool.all.setComponents()\n\n    for (const segment of staticQuerySegments) {\n      pool.single\n        .runQueries({\n          pageQueryIds: [],\n          staticQueryIds: segment,\n          sliceQueryIds: [],\n        })\n        .then(replayWorkerActions)\n        .then(() => {\n          activity.tick(segment.length)\n        })\n        .catch(handleRunQueriesInWorkersQueueError)\n    }\n\n    for (const segment of pageQuerySegments) {\n      pool.single\n        .runQueries({\n          pageQueryIds: segment,\n          staticQueryIds: [],\n          sliceQueryIds: [],\n        })\n        .then(replayWorkerActions)\n        .then(() => {\n          activity.tick(segment.length)\n        })\n        .catch(handleRunQueriesInWorkersQueueError)\n    }\n\n    // note that we only await on this and not on anything before (`.setComponents()` or `.runQueries()`)\n    // because gatsby-worker will queue tasks internally and worker will never execute multiple tasks at the same time\n    // so awaiting `.saveQueriesDependencies()` is enough to make sure `.setComponents()` and `.runQueries()` finished\n    await Promise.all(pool.all.saveQueriesDependencies())\n  } catch (e) {\n    handleRunQueriesInWorkersQueueError(e)\n  } finally {\n    activity.end()\n  }\n}\n\nexport async function mergeWorkerState(\n  pool: GatsbyWorkerPool,\n  parentSpan?: Span\n): Promise<void> {\n  const activity = reporter.activityTimer(`Merge worker state`, { parentSpan })\n  activity.start()\n\n  for (const { workerId } of pool.getWorkerInfo()) {\n    const state = loadPartialStateFromDisk(\n      [`queries`, `telemetry`],\n      String(workerId)\n    )\n    const queryStateChunk = state.queries as IGatsbyState[\"queries\"]\n    const queryStateTelemetryChunk =\n      state.telemetry as IGatsbyState[\"telemetry\"]\n\n    const payload: {\n      queryStateChunk?: IGatsbyState[\"queries\"]\n      queryStateTelemetryChunk?: IGatsbyState[\"telemetry\"]\n    } = {}\n\n    if (queryStateChunk) {\n      payload.queryStateChunk = queryStateChunk\n    }\n\n    if (queryStateTelemetryChunk) {\n      payload.queryStateTelemetryChunk = queryStateTelemetryChunk\n    }\n\n    if (Object.keys(payload).length) {\n      // When there are too little queries, some worker can be inactive and its state is empty\n      store.dispatch({\n        type: `MERGE_WORKER_QUERY_STATE`,\n        payload: {\n          workerId,\n          ...payload,\n        },\n      })\n      await new Promise(resolve => process.nextTick(resolve))\n    }\n  }\n  activity.end()\n}\n\nasync function replayWorkerActions(\n  actions: Array<ActionsUnion>\n): Promise<void> {\n  let i = 1\n  for (const action of actions) {\n    store.dispatch(action)\n\n    // Give event loop some breath\n    if (i++ % 100 === 0) {\n      await new Promise(resolve => process.nextTick(resolve))\n    }\n  }\n}\n"],"mappings":"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"}