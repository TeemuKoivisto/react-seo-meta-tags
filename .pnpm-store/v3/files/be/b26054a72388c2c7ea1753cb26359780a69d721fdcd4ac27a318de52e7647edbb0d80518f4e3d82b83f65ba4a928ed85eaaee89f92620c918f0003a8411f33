{"version":3,"file":"manager.js","names":["activityForJobs","activeJobs","isListeningForMessages","hasShownIPCDisabledWarning","jobsInProcess","Map","externalJobsMap","convertPathsToAbsolute","filePath","path","isAbsolute","Error","slash","createFileHash","hasha","fromFileSync","algorithm","hasActiveJobs","hasExternalJobsEnabled","process","env","ENABLE_GATSBY_EXTERNAL_JOBS","runLocalWorker","workerFn","job","fs","ensureDir","outputDir","Promise","resolve","reject","setImmediate","inputPaths","args","err","WorkerError","isJobsIPCMessage","msg","type","payload","id","has","listenForJobMessages","on","deferred","get","MESSAGE_TYPES","JOB_COMPLETED","result","JOB_FAILED","error","JOB_NOT_WHITELISTED","runJob","delete","runExternalWorker","pDefer","set","jobCreatedMessage","JOB_CREATED","send","promise","forceLocal","plugin","importGatsbyPlugin","then","worker","name","isLocal","reporter","warn","version","isInternalJob","undefined","contentDigest","createInternalJob","inputPathsWithContentDigest","map","pth","internalJob","uuid","v4","includes","createContentDigest","inputPath","activitiesForJobTypes","enqueueJob","phantomActivity","start","jobType","activityForJobsProgress","createProgress","total","end","tick","getInProcessJobPromise","removeInProgressJob","waitUntilAllJobsComplete","progressActivity","values","clear","waitJobs","jobDigests","promises","digest","push","all","isJobStale","areInputPathsStale","some","existsSync","fileHash"],"sources":["../../../src/utils/jobs/manager.ts"],"sourcesContent":["import path from \"path\"\nimport hasha from \"hasha\"\nimport fs from \"fs-extra\"\nimport pDefer from \"p-defer\"\nimport _ from \"lodash\"\nimport { createContentDigest, slash, uuid } from \"gatsby-core-utils\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { IPhantomReporter } from \"gatsby-cli\"\nimport {\n  JobInput,\n  InternalJob,\n  MESSAGE_TYPES,\n  IJobCreatedMessage,\n  IJobCompletedMessage,\n  IJobFailed,\n  IJobNotWhitelisted,\n  WorkerError,\n} from \"./types\"\nimport { importGatsbyPlugin } from \"../import-gatsby-plugin\"\n\ntype IncomingMessages = IJobCompletedMessage | IJobFailed | IJobNotWhitelisted\n\ntype OutgoingMessages = IJobCreatedMessage\n\nexport { InternalJob }\nexport type JobResultInterface = Record<string, unknown>\n\nlet activityForJobs: IPhantomReporter | null = null\nlet activeJobs = 0\nlet isListeningForMessages = false\nlet hasShownIPCDisabledWarning = false\n\nconst jobsInProcess: Map<\n  string,\n  { id: string; deferred: pDefer.DeferredPromise<Record<string, unknown>> }\n> = new Map()\nconst externalJobsMap: Map<\n  string,\n  { job: InternalJob; deferred: pDefer.DeferredPromise<any> }\n> = new Map()\n\n/**\n * We want to use absolute paths to make sure they are on the filesystem\n */\nfunction convertPathsToAbsolute(filePath: string): string {\n  if (!path.isAbsolute(filePath)) {\n    throw new Error(`${filePath} should be an absolute path.`)\n  }\n\n  return slash(filePath)\n}\n/**\n * Get contenthash of a file\n */\nfunction createFileHash(path: string): string {\n  return hasha.fromFileSync(path, { algorithm: `sha1` })\n}\n\nlet hasActiveJobs: pDefer.DeferredPromise<void> | null = null\n\nfunction hasExternalJobsEnabled(): boolean {\n  return (\n    process.env.ENABLE_GATSBY_EXTERNAL_JOBS === `true` ||\n    process.env.ENABLE_GATSBY_EXTERNAL_JOBS === `1`\n  )\n}\n\n/**\n * Get the local worker function and execute it on the user's machine\n */\nasync function runLocalWorker<T>(\n  workerFn: { ({ inputPaths, outputDir, args }: InternalJob): T },\n  job: InternalJob\n): Promise<T> {\n  await fs.ensureDir(job.outputDir)\n\n  return new Promise((resolve, reject) => {\n    // execute worker nextTick\n    // TODO should we think about threading/queueing here?\n    setImmediate(() => {\n      try {\n        resolve(\n          workerFn({\n            inputPaths: job.inputPaths,\n            outputDir: job.outputDir,\n            args: job.args,\n          } as InternalJob)\n        )\n      } catch (err) {\n        reject(new WorkerError(err))\n      }\n    })\n  })\n}\n\nfunction isJobsIPCMessage(msg: any): msg is IncomingMessages {\n  return (\n    msg &&\n    msg.type &&\n    msg.payload &&\n    msg.payload.id &&\n    externalJobsMap.has(msg.payload.id)\n  )\n}\n\nfunction listenForJobMessages(): void {\n  process.on(`message`, msg => {\n    if (isJobsIPCMessage(msg)) {\n      const { job, deferred } = externalJobsMap.get(msg.payload.id)!\n\n      switch (msg.type) {\n        case MESSAGE_TYPES.JOB_COMPLETED: {\n          deferred.resolve(msg.payload.result)\n          break\n        }\n        case MESSAGE_TYPES.JOB_FAILED: {\n          deferred.reject(new WorkerError(msg.payload.error))\n          break\n        }\n        case MESSAGE_TYPES.JOB_NOT_WHITELISTED: {\n          deferred.resolve(runJob(job, true))\n          break\n        }\n      }\n\n      externalJobsMap.delete(msg.payload.id)\n    }\n  })\n}\n\nfunction runExternalWorker(job: InternalJob): Promise<any> {\n  const deferred = pDefer<any>()\n\n  externalJobsMap.set(job.id, {\n    job,\n    deferred,\n  })\n\n  const jobCreatedMessage: OutgoingMessages = {\n    type: MESSAGE_TYPES.JOB_CREATED,\n    payload: job,\n  }\n\n  process.send!(jobCreatedMessage)\n\n  return deferred.promise\n}\n\n/**\n * Make sure we have everything we need to run a job\n * If we do, run it locally.\n * TODO add external job execution through ipc\n */\nfunction runJob(\n  job: InternalJob,\n  forceLocal = false\n): Promise<Record<string, unknown>> {\n  const { plugin } = job\n  try {\n    return importGatsbyPlugin(plugin, `gatsby-worker`).then(worker => {\n      if (!worker[job.name]) {\n        throw new Error(`No worker function found for ${job.name}`)\n      }\n\n      if (!forceLocal && !job.plugin.isLocal && hasExternalJobsEnabled()) {\n        if (process.send) {\n          if (!isListeningForMessages) {\n            isListeningForMessages = true\n            listenForJobMessages()\n          }\n\n          return runExternalWorker(job)\n        } else {\n          // only show the offloading warning once\n          if (!hasShownIPCDisabledWarning) {\n            hasShownIPCDisabledWarning = true\n            reporter.warn(\n              `Offloading of a job failed as IPC could not be detected. Running job locally.`\n            )\n          }\n        }\n      }\n      return runLocalWorker(worker[job.name], job)\n    })\n  } catch (err) {\n    throw new Error(\n      `We couldn't find a gatsby-worker.js(${plugin.resolve}/gatsby-worker.js) file for ${plugin.name}@${plugin.version}`\n    )\n  }\n}\n\nfunction isInternalJob(job: JobInput | InternalJob): job is InternalJob {\n  return (\n    (job as InternalJob).id !== undefined &&\n    (job as InternalJob).contentDigest !== undefined\n  )\n}\n\n/**\n * Create an internal job object\n */\nexport function createInternalJob(\n  job: JobInput | InternalJob,\n  plugin: { name: string; version: string; resolve: string }\n): InternalJob {\n  // It looks like we already have an augmented job so we shouldn't redo this work\n  if (isInternalJob(job)) {\n    return job\n  }\n\n  const { name, inputPaths, outputDir, args } = job\n\n  // TODO see if we can make this async, filehashing might be expensive to wait for\n  // currently this needs to be sync as we could miss jobs to have been scheduled and\n  // are still processing their hashes\n  const inputPathsWithContentDigest = inputPaths.map((pth: string) => {\n    return {\n      path: convertPathsToAbsolute(pth),\n      contentDigest: createFileHash(pth),\n    }\n  })\n\n  const internalJob: InternalJob = {\n    id: uuid.v4(),\n    name,\n    contentDigest: ``,\n    inputPaths: inputPathsWithContentDigest,\n    outputDir: convertPathsToAbsolute(outputDir),\n    args,\n    plugin: {\n      name: plugin.name,\n      version: plugin.version,\n      resolve: plugin.resolve,\n      isLocal: !plugin.resolve.includes(`/node_modules/`),\n    },\n  }\n\n  // generate a contentDigest based on all parameters including file content\n  internalJob.contentDigest = createContentDigest({\n    name: job.name,\n    inputPaths: internalJob.inputPaths.map(\n      inputPath => inputPath.contentDigest\n    ),\n    outputDir: internalJob.outputDir,\n    args: internalJob.args,\n    plugin: internalJob.plugin,\n  })\n\n  return internalJob\n}\n\nconst activitiesForJobTypes = new Map<\n  string,\n  ReturnType<typeof reporter.createProgress>\n>()\n\n/**\n * Creates a job\n */\nexport async function enqueueJob(\n  job: InternalJob\n): Promise<Record<string, unknown>> {\n  // When we already have a job that's executing, return the same promise.\n  // we have another check in our createJobV2 action to return jobs that have been done in a previous gatsby run\n  if (jobsInProcess.has(job.contentDigest)) {\n    return jobsInProcess.get(job.contentDigest)!.deferred.promise\n  }\n\n  if (activeJobs === 0) {\n    hasActiveJobs = pDefer<void>()\n  }\n\n  // Bump active jobs\n  activeJobs++\n  if (!activityForJobs) {\n    activityForJobs = reporter.phantomActivity(`Running jobs v2`)\n    activityForJobs!.start()\n  }\n\n  const jobType = `${job.plugin.name}.${job.name}`\n\n  let activityForJobsProgress = activitiesForJobTypes.get(jobType)\n\n  if (!activityForJobsProgress) {\n    activityForJobsProgress = reporter.createProgress(\n      `Running ${jobType} jobs`,\n      1,\n      0\n    )\n    activityForJobsProgress.start()\n    activitiesForJobTypes.set(jobType, activityForJobsProgress)\n  } else {\n    activityForJobsProgress.total++\n  }\n\n  const deferred = pDefer<Record<string, unknown>>()\n  jobsInProcess.set(job.contentDigest, {\n    id: job.id,\n    deferred,\n  })\n\n  try {\n    const result = await runJob(job)\n    // this check is to keep our worker results consistent for cloud\n    if (result != null && !_.isPlainObject(result)) {\n      throw new Error(\n        `Result of a worker should be an object, type of \"${typeof result}\" was given`\n      )\n    }\n    deferred.resolve(result)\n  } catch (err) {\n    deferred.reject(new WorkerError(err))\n  } finally {\n    // when all jobs are done we end the activity\n    if (--activeJobs === 0) {\n      hasActiveJobs!.resolve()\n      activityForJobs!.end()\n      // eslint-disable-next-line require-atomic-updates\n      activityForJobs = null\n    }\n\n    activityForJobsProgress.tick()\n  }\n\n  return deferred.promise\n}\n\n/**\n * Get in progress job promise\n */\nexport function getInProcessJobPromise(\n  contentDigest: string\n): Promise<Record<string, unknown>> | undefined {\n  return jobsInProcess.get(contentDigest)?.deferred.promise\n}\n\n/**\n * Remove a job from our inProgressQueue to reduce memory usage\n */\nexport function removeInProgressJob(contentDigest: string): void {\n  jobsInProcess.delete(contentDigest)\n}\n\n/**\n * Wait for all processing jobs to have finished\n */\nexport async function waitUntilAllJobsComplete(): Promise<void> {\n  await (hasActiveJobs ? hasActiveJobs.promise : Promise.resolve())\n  for (const progressActivity of activitiesForJobTypes.values()) {\n    progressActivity.end()\n  }\n  activitiesForJobTypes.clear()\n}\n\n/**\n * Wait for specific jobs for engines\n */\nexport async function waitJobs(jobDigests: Set<string>): Promise<void> {\n  const promises: Array<Promise<any>> = []\n  for (const [digest, job] of jobsInProcess) {\n    if (jobDigests.has(digest)) {\n      promises.push(job.deferred.promise)\n    }\n  }\n  await Promise.all(promises)\n}\n\nexport function isJobStale(\n  job: Partial<InternalJob> & { inputPaths: InternalJob[\"inputPaths\"] }\n): boolean {\n  const areInputPathsStale = job.inputPaths.some(inputPath => {\n    // does the inputPath still exists?\n    if (!fs.existsSync(inputPath.path)) {\n      return true\n    }\n\n    // check if we're talking about the same file\n    const fileHash = createFileHash(inputPath.path)\n    return fileHash !== inputPath.contentDigest\n  })\n\n  return areInputPathsStale\n}\n"],"mappings":"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"}