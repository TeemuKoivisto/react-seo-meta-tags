{"version":3,"file":"date.js","names":["ISO_8601_FORMAT","GraphQLDate","GraphQLScalarType","name","description","oneLine","serialize","String","parseValue","parseLiteral","ast","kind","Kind","STRING","value","undefined","momentFormattingTokens","momentFormattingRegexes","YYYY","MM","DD","DDDD","HH","mm","ss","SSS","SSSSSS","E","W","WW","Z","ISO_8601_FORMAT_AS_REGEX","map","format","matchedFormat","match","token","join","ISO_8601_FORMAT_LENGTHS","Set","reduce","acc","val","endsWith","concat","length","quickDateValidateRegex","RegExp","looksLikeDateStartRegex","looksLikeDateEndRegex","looksLikeADate","includes","test","isDate","momentDate","moment","utc","isValid","formatDateCache","getFormatDateCache","GatsbyCacheLmdb","encoding","init","formatDate","date","fromNow","difference","formatString","locale","normalizedDate","JSON","parse","stringify","cacheKey","cachedFormat","get","result","set","diff","getDateResolver","options","fieldConfig","args","type","defaultValue","resolve","source","context","info","resolver","defaultFieldResolver","from","fromNode","Array","isArray","Promise","all","d"],"sources":["../../../src/schema/types/date.ts"],"sourcesContent":["import moment, { MomentInput, unitOfTime, LocaleSpecifier } from \"moment\"\nimport { GraphQLScalarType, Kind, GraphQLFieldConfig } from \"graphql\"\nimport { oneLine } from \"common-tags\"\nimport GatsbyCacheLmdb from \"../../utils/cache-lmdb\"\n\ninterface IFormatDateArgs {\n  date: Date | string\n  fromNow?: boolean\n  formatString?: string\n  difference?: unitOfTime.Diff\n  locale?: LocaleSpecifier\n}\ninterface IDateResolverOption {\n  locale?: string\n  formatString?: string\n  fromNow?: boolean\n  difference?: string\n  from?: string\n  fromNode?: boolean\n}\ntype DateResolverFieldConfig = GraphQLFieldConfig<any, any, any>\ntype DateResolver = (\n  source: any,\n  args: any,\n  context: any,\n  info: any\n) => Promise<null | string | number | Array<string | number>>\n\nconst ISO_8601_FORMAT = [\n  `YYYY`,\n  `YYYY-MM`,\n  `YYYY-MM-DD`,\n  `YYYYMMDD`,\n\n  // Local Time\n  `YYYY-MM-DDTHH`,\n  `YYYY-MM-DDTHH:mm`,\n  `YYYY-MM-DDTHHmm`,\n  `YYYY-MM-DDTHH:mm:ss`,\n  `YYYY-MM-DDTHHmmss`,\n  `YYYY-MM-DDTHH:mm:ss.SSS`,\n  `YYYY-MM-DDTHHmmss.SSS`,\n  `YYYY-MM-DDTHH:mm:ss.SSSSSS`,\n  `YYYY-MM-DDTHHmmss.SSSSSS`,\n  // `YYYY-MM-DDTHH:mm:ss.SSSSSSSSS`,\n  // `YYYY-MM-DDTHHmmss.SSSSSSSSS`,\n\n  // Local Time (Omit T)\n  `YYYY-MM-DD HH`,\n  `YYYY-MM-DD HH:mm`,\n  `YYYY-MM-DD HHmm`,\n  `YYYY-MM-DD HH:mm:ss`,\n  `YYYY-MM-DD HHmmss`,\n  `YYYY-MM-DD HH:mm:ss.SSS`,\n  `YYYY-MM-DD HHmmss.SSS`,\n  `YYYY-MM-DD HH:mm:ss.SSSSSS`,\n  `YYYY-MM-DD HHmmss.SSSSSS`,\n  // `YYYY-MM-DD HH:mm:ss.SSSSSSSSS`,\n  // `YYYY-MM-DD HHmmss.SSSSSSSSS`,\n\n  // Coordinated Universal Time (UTC)\n  `YYYY-MM-DDTHHZ`,\n  `YYYY-MM-DDTHH:mmZ`,\n  `YYYY-MM-DDTHHmmZ`,\n  `YYYY-MM-DDTHH:mm:ssZ`,\n  `YYYY-MM-DDTHHmmssZ`,\n  `YYYY-MM-DDTHH:mm:ss.SSSZ`,\n  `YYYY-MM-DDTHHmmss.SSSZ`,\n  `YYYY-MM-DDTHH:mm:ss.SSSSSSZ`,\n  `YYYY-MM-DDTHHmmss.SSSSSSZ`,\n  // `YYYY-MM-DDTHH:mm:ss.SSSSSSSSSZ`,\n  // `YYYY-MM-DDTHHmmss.SSSSSSSSSZ`,\n\n  // Coordinated Universal Time (UTC) (Omit T)\n  `YYYY-MM-DD HHZ`,\n  `YYYY-MM-DD HH:mmZ`,\n  `YYYY-MM-DD HHmmZ`,\n  `YYYY-MM-DD HH:mm:ssZ`,\n  `YYYY-MM-DD HHmmssZ`,\n  `YYYY-MM-DD HH:mm:ss.SSSZ`,\n  `YYYY-MM-DD HHmmss.SSSZ`,\n  `YYYY-MM-DD HH:mm:ss.SSSSSSZ`,\n  `YYYY-MM-DD HHmmss.SSSSSSZ`,\n  // `YYYY-MM-DD HH:mm:ss.SSSSSSSSSZ`,\n  // `YYYY-MM-DD HHmmss.SSSSSSSSSZ`,\n\n  // Coordinated Universal Time (UTC) (Omit T, Extra Space before Z)\n  `YYYY-MM-DD HH Z`,\n  `YYYY-MM-DD HH:mm Z`,\n  `YYYY-MM-DD HHmm Z`,\n  `YYYY-MM-DD HH:mm:ss Z`,\n  `YYYY-MM-DD HHmmss Z`,\n  `YYYY-MM-DD HH:mm:ss.SSS Z`,\n  `YYYY-MM-DD HHmmss.SSS Z`,\n  `YYYY-MM-DD HH:mm:ss.SSSSSS Z`,\n  `YYYY-MM-DD HHmmss.SSSSSS Z`,\n\n  `YYYY-[W]WW`,\n  `YYYY[W]WW`,\n  `YYYY-[W]WW-E`,\n  `YYYY[W]WWE`,\n  `YYYY-DDDD`,\n  `YYYYDDDD`,\n]\n\nexport const GraphQLDate = new GraphQLScalarType({\n  name: `Date`,\n  description: oneLine`\n    A date string, such as 2007-12-03, compliant with the ISO 8601 standard\n    for representation of dates and times using the Gregorian calendar.`,\n  serialize: String,\n  parseValue: String,\n  parseLiteral(ast): string | undefined {\n    return ast.kind === Kind.STRING ? ast.value : undefined\n  },\n})\n\nconst momentFormattingTokens =\n  /(\\[[^[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g\nconst momentFormattingRegexes = {\n  YYYY: `\\\\d{4}`,\n  MM: `\\\\d{2}`,\n  DD: `\\\\d{2}`,\n  DDDD: `\\\\d{4}`,\n  HH: `\\\\d{2}`,\n  mm: `\\\\d{2}`,\n  ss: `\\\\d{2}`,\n  SSS: `\\\\d{3}`,\n  SSSSSS: `\\\\d{6}`,\n  E: `\\\\d`,\n  W: `\\\\d`,\n  WW: `\\\\d{2}`,\n  \"[W]\": `W`,\n  \".\": `\\\\.`,\n  Z: `(Z|[+-]\\\\d\\\\d(?::?\\\\d\\\\d)?)`,\n}\nconst ISO_8601_FORMAT_AS_REGEX = ISO_8601_FORMAT.map(format => {\n  const matchedFormat = format.match(momentFormattingTokens)\n  if (matchedFormat === null) return ``\n  // convert ISO string to a map of momentTokens ([YYYY, MM, DD])\n  return [...matchedFormat]\n    .map(token =>\n      // see if the token (YYYY or ss) is found, else we just return the value\n      momentFormattingRegexes[token] ? momentFormattingRegexes[token] : token\n    )\n    .join(``)\n}).join(`|`)\n\n// calculate all lengths of the formats, if a string is longer or smaller it can't be valid\nconst ISO_8601_FORMAT_LENGTHS = [\n  ...new Set(\n    ISO_8601_FORMAT.reduce((acc: Array<number>, val: string) => {\n      if (!val.endsWith(`Z`)) {\n        return acc.concat(val.length)\n      }\n\n      // we add count of +01 & +01:00\n      return acc.concat([val.length, val.length + 3, val.length + 5])\n    }, [])\n  ),\n]\n\n// lets imagine these formats: YYYY-MM-DDTHH & YYYY-MM-DD HHmmss.SSSSSS Z\n// this regex looks like (/^(\\d{4}-\\d{2}-\\d{2}T\\d{2}|\\d{4}-\\d{2}-\\d{2} \\d{2}\\d{2}\\d{2}.\\d{6} Z)$)\nconst quickDateValidateRegex = new RegExp(`^(${ISO_8601_FORMAT_AS_REGEX})$`)\n\nconst looksLikeDateStartRegex = /^\\d{4}/\n// this regex makes sure the last characters are a number or the letter Z\nconst looksLikeDateEndRegex = /(\\d|Z)$/\n\n/**\n * looksLikeADate isn't a 100% valid check if it is a real date but at least it's something that looks like a date.\n * It won't catch values like 2010-02-30\n * 1) is it a number?\n * 2) does the length of the value comply with any of our formats\n * 3) does the str starts with 4 digites (YYYY)\n * 4) does the str ends with something that looks like a date\n * 5) Small regex to see if it matches any of the formats\n * 6) check momentjs\n *\n * @param {*} value\n * @return {boolean}\n */\nexport function looksLikeADate(value?: string): boolean {\n  // quick check if value does not look like a date\n  if (\n    !value ||\n    (value.length && !ISO_8601_FORMAT_LENGTHS.includes(value.length)) ||\n    !looksLikeDateStartRegex.test(value) ||\n    !looksLikeDateEndRegex.test(value)\n  ) {\n    return false\n  }\n\n  // If it looks like a date we parse the date with a regex to see if we can handle it.\n  // momentjs just does regex validation itself if you don't do any operations on it.\n  if (typeof value === `string` && quickDateValidateRegex.test(value)) {\n    return true\n  }\n\n  return isDate(value)\n}\n\n/**\n * @param {*} value\n * @return {boolean}\n */\nexport function isDate(value: MomentInput): boolean {\n  const momentDate = moment.utc(value, ISO_8601_FORMAT, true)\n  return typeof value !== `number` && momentDate.isValid()\n}\n\nlet formatDateCache: GatsbyCacheLmdb | undefined\nfunction getFormatDateCache(): GatsbyCacheLmdb {\n  if (!formatDateCache) {\n    formatDateCache = new GatsbyCacheLmdb({\n      name: `format-date-cache`,\n      encoding: `string`,\n    }).init()\n  }\n  return formatDateCache\n}\n\nconst formatDate = async ({\n  date,\n  fromNow,\n  difference,\n  formatString,\n  locale = `en`,\n}: IFormatDateArgs): Promise<string | number> => {\n  const normalizedDate = JSON.parse(JSON.stringify(date))\n  if (formatString) {\n    const cacheKey = `${normalizedDate}-${formatString}-${locale}`\n    const cachedFormat = await getFormatDateCache().get(cacheKey)\n    if (cachedFormat) {\n      return cachedFormat as string\n    }\n\n    const result = moment\n      .utc(normalizedDate, ISO_8601_FORMAT, true)\n      .locale(locale)\n      .format(formatString)\n\n    await getFormatDateCache().set(cacheKey, result)\n\n    return result\n  } else if (fromNow) {\n    return moment\n      .utc(normalizedDate, ISO_8601_FORMAT, true)\n      .locale(locale)\n      .fromNow()\n  } else if (difference) {\n    return moment().diff(\n      moment.utc(normalizedDate, ISO_8601_FORMAT, true).locale(locale),\n      difference\n    )\n  }\n  return normalizedDate\n}\n\nexport const getDateResolver = (\n  options: IDateResolverOption = {},\n  fieldConfig: DateResolverFieldConfig\n): { args: Record<string, any>; resolve: DateResolver } => {\n  const { locale, formatString, fromNow, difference } = options\n  return {\n    args: {\n      ...fieldConfig.args,\n      formatString: {\n        type: `String`,\n        description: oneLine`\n        Format the date using Moment.js' date tokens, e.g.\n        \\`date(formatString: \"YYYY MMMM DD\")\\`.\n        See https://momentjs.com/docs/#/displaying/format/\n        for documentation for different tokens.`,\n        defaultValue: formatString,\n      },\n      fromNow: {\n        type: `Boolean`,\n        description: oneLine`\n        Returns a string generated with Moment.js' \\`fromNow\\` function`,\n        defaultValue: fromNow,\n      },\n      difference: {\n        type: `String`,\n        description: oneLine`\n        Returns the difference between this date and the current time.\n        Defaults to \"milliseconds\" but you can also pass in as the\n        measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\",\n        and \"seconds\".`,\n        defaultValue: difference,\n      },\n      locale: {\n        type: `String`,\n        description: oneLine`\n        Configures the locale Moment.js will use to format the date.`,\n        defaultValue: locale,\n      },\n    },\n    async resolve(source, args, context, info): ReturnType<DateResolver> {\n      const resolver = fieldConfig.resolve || context.defaultFieldResolver\n      const date = await resolver(source, args, context, {\n        ...info,\n        from: options.from || info.from,\n        fromNode: options.from ? options.fromNode : info.fromNode,\n      })\n\n      if (date == null) {\n        return null\n      }\n\n      if (Array.isArray(date)) {\n        return await Promise.all(\n          date.map(d => formatDate({ date: d, ...args }))\n        )\n      }\n\n      return await formatDate({ date, ...args })\n    },\n  }\n}\n"],"mappings":"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"}