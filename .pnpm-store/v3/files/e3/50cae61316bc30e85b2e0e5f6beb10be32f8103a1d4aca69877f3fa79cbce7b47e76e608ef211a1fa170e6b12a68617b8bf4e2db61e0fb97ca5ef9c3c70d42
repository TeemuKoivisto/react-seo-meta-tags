{"version":3,"file":"flags.js","names":["satisfiesSemvers","semverConstraints","result","every","packageName","semverConstraint","packageVersion","require","version","e","semver","satisfies","includePrerelease","activeFlags","name","env","command","telemetryId","experimental","description","includedFlags","testFitness","umbrellaIssue","v18Constraint","react","v0Constraint","requires","Number"],"sources":["../../src/utils/flags.ts"],"sourcesContent":["import _ from \"lodash\"\nimport semver from \"semver\"\n\n// Does this experiment run for only builds\ntype executingCommand = \"build\" | \"develop\" | \"all\"\n\nexport const satisfiesSemvers = (\n  semverConstraints: Record<string, string>\n): boolean => {\n  // Check each semver check for the flag.\n  // If any are false, then the flag doesn't pass\n  const result = _.toPairs(semverConstraints).every(\n    ([packageName, semverConstraint]) => {\n      let packageVersion: string\n      try {\n        packageVersion = require(`${packageName}/package.json`).version\n      } catch (e) {\n        return false\n      }\n\n      // We care if the semver check doesn't pass.\n      return semver.satisfies(packageVersion, semverConstraint, {\n        includePrerelease: true,\n      })\n    }\n  )\n\n  return result\n}\n\nexport type fitnessEnum = true | false | \"OPT_IN\" | \"LOCKED_IN\"\n\nexport interface IFlag {\n  name: string\n  env: string\n  description: string\n  command: executingCommand\n  /**\n   * Use string identifier to track enabled flag or false to disable any tracking (useful when flag becomes new defaults)\n   */\n  telemetryId: string | false\n  // Heuristics for deciding if a flag is experimental:\n  // - there are known bugs most people will encounter and that block being\n  // able to use Gatsby normally\n  // - very few people have tested the feature so we're not sure if we've\n  // uncovered even common problems.\n  //\n  // Flags should start as experimental but once all serious known bugs are\n  // resolved and ~50+ people have tested it, experimental should be set to\n  // false.\n  experimental: boolean\n  /**\n   * True means conditions for the feature are met and can be opted in by user.\n   *\n   * False means it'll be disabled despite the user setting it true e.g.\n   * it just won't work e.g. it doesn't have new enough version for something.\n   *\n   * OPT_IN means the gatsby will enable the flag (unless the user explicitly\n   * disables it.\n   *\n   * LOCKED_IN means that feature is enabled always (unless `noCI` condition is met).\n   * This is mostly to provide more meaningful terminal messages instead of removing\n   * flag from the flag list when users has the flag set in configuration\n   * (avoids showing unknown flag message and shows \"no longer needed\" message).\n   */\n  testFitness: (flag: IFlag) => fitnessEnum\n  /**\n   * Human-readable text explaining requirements for this feature to be available\n   * (e.g. requires Node 14+)\n   *\n   * It is shown to users when testFitness() returns `false` but flag is set in gatsby-config.js\n   */\n  requires?: string\n  includedFlags?: Array<string>\n  umbrellaIssue?: string\n  noCI?: boolean\n}\n\nconst activeFlags: Array<IFlag> = [\n  {\n    name: `FAST_DEV`,\n    env: `GATSBY_EXPERIMENTAL_FAST_DEV`,\n    command: `develop`,\n    telemetryId: `FastDev`,\n    experimental: false,\n    description: `Enable all experiments aimed at improving develop server start time & develop DX.`,\n    includedFlags: [`DEV_SSR`, `PRESERVE_FILE_DOWNLOAD_CACHE`],\n    testFitness: (): fitnessEnum => true,\n  },\n  {\n    name: `DEV_SSR`,\n    env: `GATSBY_EXPERIMENTAL_DEV_SSR`,\n    command: `develop`,\n    telemetryId: `DevSsr`,\n    experimental: false,\n    description: `Server Side Render (SSR) pages on full reloads during develop. Helps you detect SSR bugs and fix them without needing to do full builds.`,\n    umbrellaIssue: `https://gatsby.dev/dev-ssr-feedback`,\n    testFitness: (): fitnessEnum => true,\n  },\n  {\n    name: `PRESERVE_FILE_DOWNLOAD_CACHE`,\n    env: `GATSBY_EXPERIMENTAL_PRESERVE_FILE_DOWNLOAD_CACHE`,\n    command: `all`,\n    telemetryId: `PreserveFileDownloadCache`,\n    experimental: false,\n    description: `Don't delete the downloaded files cache when changing gatsby-node.js & gatsby-config.js files.`,\n    umbrellaIssue: `https://gatsby.dev/cache-clearing-feedback`,\n    testFitness: (): fitnessEnum => true,\n  },\n  {\n    name: `PARALLEL_SOURCING`,\n    env: `GATSBY_EXPERIMENTAL_PARALLEL_SOURCING`,\n    command: `all`,\n    telemetryId: `ParallelSourcing`,\n    experimental: true,\n    description: `Run all source plugins at the same time instead of serially. For sites with multiple source plugins, this can speedup sourcing and transforming considerably.`,\n    umbrellaIssue: `https://gatsby.dev/parallel-sourcing-feedback`,\n    testFitness: (): fitnessEnum => true,\n  },\n  {\n    name: `DETECT_NODE_MUTATIONS`,\n    env: `GATSBY_DETECT_NODE_MUTATIONS`,\n    command: `all`,\n    telemetryId: `DetectNodeMutations`,\n    description: `Diagnostic mode to log any attempts to mutate node directly. Helpful when debugging missing data problems. See https://gatsby.dev/debugging-missing-data for more details.`,\n    experimental: false,\n    testFitness: (): fitnessEnum => true,\n  },\n  {\n    name: `PARTIAL_HYDRATION`,\n    env: `GATSBY_PARTIAL_HYDRATION`,\n    command: `build`,\n    telemetryId: `PartialHydration`,\n    description: `Enable partial hydration to reduce Total Blocking Time and Time To Interactive `,\n    umbrellaIssue: `https://gatsby.dev/partial-hydration-umbrella-issue`,\n    experimental: true,\n    testFitness: (): fitnessEnum => {\n      const v18Constraint = {\n        react: `>=18.0.0`,\n      }\n      const v0Constraint = {\n        react: `^0.0.0`,\n      }\n\n      return (\n        _CFLAGS_.GATSBY_MAJOR === `5` &&\n        (satisfiesSemvers(v18Constraint) || satisfiesSemvers(v0Constraint))\n      )\n    },\n    requires:\n      Number(_CFLAGS_.GATSBY_MAJOR) < 5\n        ? `Partial hydration is only available in Gatsby V5. Please upgrade Gatsby.`\n        : `Partial hydration requires React 18+ to work.`,\n  },\n]\n\nexport default activeFlags\n"],"mappings":";;;;;;AACA;AAKO,MAAMA,gBAAgB,GAC3BC,iBAAyC,IAC7B;EACZ;EACA;EACA,MAAMC,MAAM,GAAG,uBAAUD,iBAAiB,CAAC,CAACE,KAAK,CAC/C,CAAC,CAACC,WAAW,EAAEC,gBAAgB,CAAC,KAAK;IACnC,IAAIC,cAAsB;IAC1B,IAAI;MACFA,cAAc,GAAGC,OAAO,CAAE,GAAEH,WAAY,eAAc,CAAC,CAACI,OAAO;IACjE,CAAC,CAAC,OAAOC,CAAC,EAAE;MACV,OAAO,KAAK;IACd;;IAEA;IACA,OAAOC,eAAM,CAACC,SAAS,CAACL,cAAc,EAAED,gBAAgB,EAAE;MACxDO,iBAAiB,EAAE;IACrB,CAAC,CAAC;EACJ,CAAC,CACF;EAED,OAAOV,MAAM;AACf,CAAC;AAAA;AAkDD,MAAMW,WAAyB,GAAG,CAChC;EACEC,IAAI,EAAG,UAAS;EAChBC,GAAG,EAAG,8BAA6B;EACnCC,OAAO,EAAG,SAAQ;EAClBC,WAAW,EAAG,SAAQ;EACtBC,YAAY,EAAE,KAAK;EACnBC,WAAW,EAAG,mFAAkF;EAChGC,aAAa,EAAE,CAAE,SAAQ,EAAG,8BAA6B,CAAC;EAC1DC,WAAW,EAAE,MAAmB;AAClC,CAAC,EACD;EACEP,IAAI,EAAG,SAAQ;EACfC,GAAG,EAAG,6BAA4B;EAClCC,OAAO,EAAG,SAAQ;EAClBC,WAAW,EAAG,QAAO;EACrBC,YAAY,EAAE,KAAK;EACnBC,WAAW,EAAG,0IAAyI;EACvJG,aAAa,EAAG,qCAAoC;EACpDD,WAAW,EAAE,MAAmB;AAClC,CAAC,EACD;EACEP,IAAI,EAAG,8BAA6B;EACpCC,GAAG,EAAG,kDAAiD;EACvDC,OAAO,EAAG,KAAI;EACdC,WAAW,EAAG,2BAA0B;EACxCC,YAAY,EAAE,KAAK;EACnBC,WAAW,EAAG,gGAA+F;EAC7GG,aAAa,EAAG,4CAA2C;EAC3DD,WAAW,EAAE,MAAmB;AAClC,CAAC,EACD;EACEP,IAAI,EAAG,mBAAkB;EACzBC,GAAG,EAAG,uCAAsC;EAC5CC,OAAO,EAAG,KAAI;EACdC,WAAW,EAAG,kBAAiB;EAC/BC,YAAY,EAAE,IAAI;EAClBC,WAAW,EAAG,+JAA8J;EAC5KG,aAAa,EAAG,+CAA8C;EAC9DD,WAAW,EAAE,MAAmB;AAClC,CAAC,EACD;EACEP,IAAI,EAAG,uBAAsB;EAC7BC,GAAG,EAAG,8BAA6B;EACnCC,OAAO,EAAG,KAAI;EACdC,WAAW,EAAG,qBAAoB;EAClCE,WAAW,EAAG,4KAA2K;EACzLD,YAAY,EAAE,KAAK;EACnBG,WAAW,EAAE,MAAmB;AAClC,CAAC,EACD;EACEP,IAAI,EAAG,mBAAkB;EACzBC,GAAG,EAAG,0BAAyB;EAC/BC,OAAO,EAAG,OAAM;EAChBC,WAAW,EAAG,kBAAiB;EAC/BE,WAAW,EAAG,iFAAgF;EAC9FG,aAAa,EAAG,qDAAoD;EACpEJ,YAAY,EAAE,IAAI;EAClBG,WAAW,EAAE,MAAmB;IAC9B,MAAME,aAAa,GAAG;MACpBC,KAAK,EAAG;IACV,CAAC;IACD,MAAMC,YAAY,GAAG;MACnBD,KAAK,EAAG;IACV,CAAC;IAED,OACE,QAA2B,GAAE,KAC5BxB,gBAAgB,CAACuB,aAAa,CAAC,IAAIvB,gBAAgB,CAACyB,YAAY,CAAC,CAAC;EAEvE,CAAC;EACDC,QAAQ,EACNC,MAAM,KAAuB,GAAG,CAAC,GAC5B,0EAAyE,GACzE;AACT,CAAC,CACF;AAAA,eAEcd,WAAW;AAAA"}