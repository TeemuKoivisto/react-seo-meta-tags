{"version":3,"file":"config.js","names":["DEFAULT_LIMIT","defaultBodyParserOptions","limit","defaultUrlEncoded","extended","defaultConfig","bodyParser","text","raw","json","urlencoded","warnings","bodyParserConfigFailover","property","expectedType","actualFailover","_","original","push","replacedWith","functionConfigSchema","Joi","object","keys","type","string","alternatives","number","default","failover","unknown","boolean","required","createConfig","userConfig","functionObj","value","validate","length","warning","reporter","warn","originalRelativeFilePath","JSON","stringify"],"sources":["../../../src/internal-plugins/functions/config.ts"],"sourcesContent":["import Joi from \"joi\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport type { IGatsbyFunction } from \"../../internal\"\nimport type {\n  GatsbyFunctionBodyParserCommonMiddlewareConfig,\n  GatsbyFunctionBodyParserUrlencodedConfig,\n} from \"gatsby\"\n\nconst DEFAULT_LIMIT = `100kb`\n\n// similar to `GatsbyFunctionBodyParserConfig` and `IGatsbyFunctionConfigProcessed`\n// from index.d.ts, just with fields required (not optional).\n// `createConfig()` will fill in defaults\nexport interface IGatsbyBodyParserConfigProcessed {\n  json: GatsbyFunctionBodyParserCommonMiddlewareConfig\n  raw: GatsbyFunctionBodyParserCommonMiddlewareConfig\n  text: GatsbyFunctionBodyParserCommonMiddlewareConfig\n  urlencoded: GatsbyFunctionBodyParserUrlencodedConfig\n}\nexport interface IGatsbyFunctionConfigProcessed {\n  bodyParser: IGatsbyBodyParserConfigProcessed\n}\n\nconst defaultBodyParserOptions: GatsbyFunctionBodyParserCommonMiddlewareConfig =\n  {\n    limit: DEFAULT_LIMIT,\n  }\nconst defaultUrlEncoded = { extended: true }\nconst defaultConfig = {\n  bodyParser: {\n    text: defaultBodyParserOptions,\n    raw: defaultBodyParserOptions,\n    json: defaultBodyParserOptions,\n    urlencoded: { ...defaultBodyParserOptions, ...defaultUrlEncoded },\n  },\n}\n\nlet warnings: Array<{\n  property: string | null\n  original: any\n  expectedType: string\n  replacedWith: any\n}> = []\n\nfunction bodyParserConfigFailover(\n  property: keyof IGatsbyBodyParserConfigProcessed,\n  expectedType: string\n): any {\n  return function actualFailover(_, { original }): any {\n    warnings.push({\n      property: `bodyParser.${property}`,\n      original,\n      expectedType,\n      replacedWith: defaultConfig.bodyParser[property],\n    })\n\n    return defaultConfig.bodyParser[property]\n  }\n}\n\nconst functionConfigSchema: Joi.ObjectSchema<IGatsbyFunctionConfigProcessed> =\n  Joi.object()\n    .keys({\n      bodyParser: Joi.object()\n        .keys({\n          json: Joi.object()\n            .keys({\n              type: Joi.string(),\n              limit: Joi.alternatives(Joi.string(), Joi.number()),\n            })\n            .default(defaultConfig.bodyParser.json)\n            .failover(\n              bodyParserConfigFailover(\n                `json`,\n                `{\\n  type?: string\\n  limit?: string | number\\n}`\n              )\n            )\n            .unknown(false),\n          text: Joi.object()\n            .keys({\n              type: Joi.string(),\n              limit: Joi.alternatives(Joi.string(), Joi.number()),\n            })\n            .unknown(false)\n            .default(defaultConfig.bodyParser.text)\n            .failover(\n              bodyParserConfigFailover(\n                `text`,\n                `{\\n  type?: string\\n  limit?: string | number\\n}`\n              )\n            ),\n          raw: Joi.object()\n            .keys({\n              type: Joi.string(),\n              limit: Joi.alternatives(Joi.string(), Joi.number()),\n            })\n            .unknown(false)\n            .default(defaultConfig.bodyParser.raw)\n            .failover(\n              bodyParserConfigFailover(\n                `raw`,\n                `{\\n  type?: string\\n  limit?: string | number\\n}`\n              )\n            ),\n          urlencoded: Joi.object()\n            .keys({\n              type: Joi.string(),\n              limit: Joi.alternatives(Joi.string(), Joi.number()),\n              extended: Joi.boolean().required(),\n            })\n            .unknown(false)\n            .default(defaultConfig.bodyParser.urlencoded)\n            .failover(\n              bodyParserConfigFailover(\n                `urlencoded`,\n                `{\\n  type?: string\\n  limit: string | number\\n  extended: boolean\\n}`\n              )\n            ),\n        })\n        .unknown(false)\n        .default(defaultConfig.bodyParser)\n        .failover((_, { original }) => {\n          warnings.push({\n            property: `bodyParser`,\n            original,\n            expectedType: `{\\n  text?: GatsbyFunctionBodyParserCommonMiddlewareConfig\\n  json?: GatsbyFunctionBodyParserCommonMiddlewareConfig\\n  raw?: GatsbyFunctionBodyParserCommonMiddlewareConfig\\n  urlencoded?: GatsbyFunctionBodyParserUrlencodedConfig\\n}`,\n            replacedWith: defaultConfig.bodyParser,\n          })\n          return defaultConfig.bodyParser\n        }),\n    })\n    .unknown(false)\n    .default(defaultConfig)\n    .failover((_, { original }) => {\n      warnings.push({\n        property: null,\n        original,\n        expectedType: `{\\n  bodyParser?: GatsbyFunctionBodyParserConfig\\n}`,\n        replacedWith: defaultConfig,\n      })\n      return defaultConfig\n    })\n\nexport function createConfig(\n  userConfig: unknown,\n  functionObj: IGatsbyFunction\n): IGatsbyFunctionConfigProcessed {\n  warnings = []\n  const { value } = functionConfigSchema.validate(userConfig)\n\n  if (warnings.length) {\n    for (const warning of warnings) {\n      reporter.warn(\n        `${\n          warning.property\n            ? `\\`${warning.property}\\` property of exported config`\n            : `Exported config`\n        } in \\`${\n          functionObj.originalRelativeFilePath\n        }\\` is misconfigured.\\nExpected object:\\n\\n${\n          warning.expectedType\n        }\\n\\nGot:\\n\\n${JSON.stringify(\n          warning.original\n        )}\\n\\nUsing default:\\n\\n${JSON.stringify(\n          warning.replacedWith,\n          null,\n          2\n        )}`\n      )\n    }\n  }\n\n  return value as IGatsbyFunctionConfigProcessed\n}\n"],"mappings":"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"}