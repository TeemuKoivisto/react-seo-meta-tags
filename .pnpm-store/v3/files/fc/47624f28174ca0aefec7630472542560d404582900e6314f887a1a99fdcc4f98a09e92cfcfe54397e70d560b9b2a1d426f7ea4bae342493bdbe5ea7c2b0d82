{"version":3,"file":"queries.js","names":["setComponents","setState","saveQueriesDependencies","pickNecessaryQueryState","state","queries","queryNodes","Map","savePartialStateToDisk","process","env","GATSBY_WORKER_ID","waitUntilPageQueryResultsAreStored","gqlRunner","getGraphqlRunner","GraphQLRunner","store","collectStats","graphqlTracing","getState","program","runQueries","queryIds","actionsToReplay","unsubscribe","subscribe","action","lastAction","type","push","doRunQueries","workerStore","schemaCustomization","composer","buildSchema","graphqlRunner","runStaticQueries","runPageQueries","getDataStore","ready"],"sources":["../../../../src/utils/worker/child/queries.ts"],"sourcesContent":["import {\n  IGroupedQueryIds,\n  runPageQueries,\n  runStaticQueries,\n} from \"../../../services\"\nimport { savePartialStateToDisk, store } from \"../../../redux\"\nimport { GraphQLRunner } from \"../../../query/graphql-runner\"\nimport { getDataStore } from \"../../../datastore\"\nimport { setState } from \"./state\"\nimport { buildSchema } from \"./schema\"\nimport {\n  IAddPendingPageDataWriteAction,\n  ICreatePageDependencyAction,\n  IGatsbyState,\n  IPageQueryRunAction,\n  IQueryStartAction,\n} from \"../../../redux/types\"\nimport { DeepPartial } from \"redux\"\nimport { waitUntilPageQueryResultsAreStored } from \"../../page-data\"\n\nexport function setComponents(): void {\n  setState([`components`, `staticQueryComponents`])\n}\n\nexport async function saveQueriesDependencies(): Promise<void> {\n  // Drop `queryNodes` from query state - it can be restored from other pieces of state\n  // and is there only as a perf optimization\n  const pickNecessaryQueryState = <T extends DeepPartial<IGatsbyState>>(\n    state: T\n  ): T => {\n    if (!state?.queries?.queryNodes) return state\n    return { ...state, queries: { ...state.queries, queryNodes: new Map() } }\n  }\n  savePartialStateToDisk(\n    [`queries`, `telemetry`],\n    process.env.GATSBY_WORKER_ID,\n    pickNecessaryQueryState\n  )\n\n  // make sure page query results we put in lmdb-store are flushed\n  await waitUntilPageQueryResultsAreStored()\n}\n\nlet gqlRunner\n\nfunction getGraphqlRunner(): GraphQLRunner {\n  if (!gqlRunner) {\n    gqlRunner = new GraphQLRunner(store, {\n      collectStats: true,\n      graphqlTracing: store.getState().program.graphqlTracing,\n    })\n  }\n  return gqlRunner\n}\n\ntype ActionsToReplay = Array<\n  | IQueryStartAction\n  | IPageQueryRunAction\n  | IAddPendingPageDataWriteAction\n  | ICreatePageDependencyAction\n>\n\nexport async function runQueries(\n  queryIds: IGroupedQueryIds\n): Promise<ActionsToReplay> {\n  const actionsToReplay: ActionsToReplay = []\n\n  const unsubscribe = store.subscribe(() => {\n    const action = store.getState().lastAction\n    if (\n      action.type === `QUERY_START` ||\n      action.type === `PAGE_QUERY_RUN` ||\n      action.type === `ADD_PENDING_PAGE_DATA_WRITE`\n      // Note: Instead of saving/replaying `CREATE_COMPONENT_DEPENDENCY` action\n      // we do state merging once at the end of the query running (replaying this action is expensive)\n    ) {\n      actionsToReplay.push(action)\n    }\n  })\n\n  try {\n    await doRunQueries(queryIds)\n    return actionsToReplay\n  } finally {\n    unsubscribe()\n  }\n}\n\nasync function doRunQueries(queryIds: IGroupedQueryIds): Promise<void> {\n  const workerStore = store.getState()\n\n  // If buildSchema() didn't run yet, execute it\n  if (workerStore.schemaCustomization.composer === null) {\n    await buildSchema()\n  }\n\n  const graphqlRunner = getGraphqlRunner()\n\n  await runStaticQueries({\n    queryIds,\n    store,\n    graphqlRunner,\n  })\n\n  await runPageQueries({\n    queryIds,\n    store,\n    graphqlRunner,\n  })\n\n  await getDataStore().ready()\n}\n"],"mappings":";;;;;;AAAA;AAKA;AACA;AACA;AACA;AACA;AASA;AAEO,SAASA,aAAa,GAAS;EACpC,IAAAC,eAAQ,EAAC,CAAE,YAAW,EAAG,uBAAsB,CAAC,CAAC;AACnD;AAEO,eAAeC,uBAAuB,GAAkB;EAC7D;EACA;EACA,MAAMC,uBAAuB,GAC3BC,KAAQ,IACF;IAAA;IACN,IAAI,EAACA,KAAK,aAALA,KAAK,iCAALA,KAAK,CAAEC,OAAO,2CAAd,eAAgBC,UAAU,GAAE,OAAOF,KAAK;IAC7C,OAAO;MAAE,GAAGA,KAAK;MAAEC,OAAO,EAAE;QAAE,GAAGD,KAAK,CAACC,OAAO;QAAEC,UAAU,EAAE,IAAIC,GAAG;MAAG;IAAE,CAAC;EAC3E,CAAC;EACD,IAAAC,6BAAsB,EACpB,CAAE,SAAQ,EAAG,WAAU,CAAC,EACxBC,OAAO,CAACC,GAAG,CAACC,gBAAgB,EAC5BR,uBAAuB,CACxB;;EAED;EACA,MAAM,IAAAS,4CAAkC,GAAE;AAC5C;AAEA,IAAIC,SAAS;AAEb,SAASC,gBAAgB,GAAkB;EACzC,IAAI,CAACD,SAAS,EAAE;IACdA,SAAS,GAAG,IAAIE,4BAAa,CAACC,YAAK,EAAE;MACnCC,YAAY,EAAE,IAAI;MAClBC,cAAc,EAAEF,YAAK,CAACG,QAAQ,EAAE,CAACC,OAAO,CAACF;IAC3C,CAAC,CAAC;EACJ;EACA,OAAOL,SAAS;AAClB;AASO,eAAeQ,UAAU,CAC9BC,QAA0B,EACA;EAC1B,MAAMC,eAAgC,GAAG,EAAE;EAE3C,MAAMC,WAAW,GAAGR,YAAK,CAACS,SAAS,CAAC,MAAM;IACxC,MAAMC,MAAM,GAAGV,YAAK,CAACG,QAAQ,EAAE,CAACQ,UAAU;IAC1C,IACED,MAAM,CAACE,IAAI,KAAM,aAAY,IAC7BF,MAAM,CAACE,IAAI,KAAM,gBAAe,IAChCF,MAAM,CAACE,IAAI,KAAM;IACjB;IACA;IAAA,EACA;MACAL,eAAe,CAACM,IAAI,CAACH,MAAM,CAAC;IAC9B;EACF,CAAC,CAAC;EAEF,IAAI;IACF,MAAMI,YAAY,CAACR,QAAQ,CAAC;IAC5B,OAAOC,eAAe;EACxB,CAAC,SAAS;IACRC,WAAW,EAAE;EACf;AACF;AAEA,eAAeM,YAAY,CAACR,QAA0B,EAAiB;EACrE,MAAMS,WAAW,GAAGf,YAAK,CAACG,QAAQ,EAAE;;EAEpC;EACA,IAAIY,WAAW,CAACC,mBAAmB,CAACC,QAAQ,KAAK,IAAI,EAAE;IACrD,MAAM,IAAAC,mBAAW,GAAE;EACrB;EAEA,MAAMC,aAAa,GAAGrB,gBAAgB,EAAE;EAExC,MAAM,IAAAsB,0BAAgB,EAAC;IACrBd,QAAQ;IACRN,KAAK,EAALA,YAAK;IACLmB;EACF,CAAC,CAAC;EAEF,MAAM,IAAAE,wBAAc,EAAC;IACnBf,QAAQ;IACRN,KAAK,EAALA,YAAK;IACLmB;EACF,CAAC,CAAC;EAEF,MAAM,IAAAG,uBAAY,GAAE,CAACC,KAAK,EAAE;AAC9B"}