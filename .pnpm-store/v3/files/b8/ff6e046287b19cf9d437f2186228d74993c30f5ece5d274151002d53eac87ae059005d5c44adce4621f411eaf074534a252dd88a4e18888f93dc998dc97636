{"version":3,"file":"index.js","names":["RECOMPILE_PANIC_LIMIT","getGraphqlTypegenConfig","ctx","store","getState","config","graphqlTypegen","developConfig","predictableActionArguments","id","initial","on","ADD_NODE_MUTATION","actions","SOURCE_FILE_CHANGED","WEBHOOK_RECEIVED","target","QUERY_RUN_REQUESTED","SET_SCHEMA","cond","shouldRunInitialTypegen","SET_GRAPHQL_DEFINITIONS","states","initializing","undefined","invoke","src","onDone","onError","initializingData","data","parentSpan","webhookBody","program","reporter","shouldRunCreatePagesStatefully","deferNodeMutation","runningPostBootstrap","runningQueries","forwardTo","gatsbyNodeGraphQLFunction","graphqlRunner","websocketManager","pendingQueryRuns","nodesMutatedDuringQueryRun","nodesMutatedDuringQueryRunRecompileCount","compiler","sourceFilesDirty","exit","assign","recompiling","entry","startingDevServers","initialGraphQLTypegen","waiting","always","size","EXTRACT_QUERIES_NOW","nodeMutationBatch","runningBatch","reloadingData","webhookSourcePluginName","refresh","recreatingPages","developMachine","createMachine","services","developServices","buildActions"],"sources":["../../../src/state-machines/develop/index.ts"],"sourcesContent":["import {\n  MachineConfig,\n  AnyEventObject,\n  forwardTo,\n  createMachine,\n  assign,\n} from \"xstate\"\nimport { IDataLayerContext } from \"../data-layer/types\"\nimport { IQueryRunningContext } from \"../query-running/types\"\nimport { IWaitingContext } from \"../waiting/types\"\nimport { buildActions } from \"./actions\"\nimport { developServices } from \"./services\"\nimport { IBuildContext } from \"../../services\"\n\nconst RECOMPILE_PANIC_LIMIT = 6\n\nconst getGraphqlTypegenConfig = (ctx: IBuildContext): boolean =>\n  !!ctx.store!.getState().config.graphqlTypegen\n\n/**\n * This is the top-level state machine for the `gatsby develop` command\n */\nconst developConfig: MachineConfig<IBuildContext, any, AnyEventObject> = {\n  predictableActionArguments: true,\n  id: `build`,\n  initial: `initializing`,\n  // These are mutation events, sent to this machine by the mutation listener\n  // in `services/listen-for-mutations.ts`\n  on: {\n    // These are deferred node mutations, mainly `createNode`\n    ADD_NODE_MUTATION: {\n      actions: `addNodeMutation`,\n    },\n    // Sent when webpack or chokidar sees a changed file\n    SOURCE_FILE_CHANGED: {\n      actions: `markSourceFilesDirty`,\n    },\n    // These are calls to the refresh endpoint. Also used by Gatsby Preview.\n    // Saves the webhook body from the event into context, then reloads data\n    WEBHOOK_RECEIVED: {\n      target: `reloadingData`,\n      actions: `assignWebhookBody`,\n    },\n    QUERY_RUN_REQUESTED: {\n      actions: `trackRequestedQueryRun`,\n    },\n    SET_SCHEMA: {\n      actions: `schemaTypegen`,\n      cond: (ctx: IBuildContext): boolean =>\n        getGraphqlTypegenConfig(ctx) && !ctx.shouldRunInitialTypegen,\n    },\n    SET_GRAPHQL_DEFINITIONS: {\n      actions: `definitionsTypegen`,\n      cond: (ctx: IBuildContext): boolean =>\n        getGraphqlTypegenConfig(ctx) && !ctx.shouldRunInitialTypegen,\n    },\n  },\n  states: {\n    // Here we handle the initial bootstrap\n    initializing: {\n      on: {\n        // Ignore mutation events because we'll be running everything anyway\n        ADD_NODE_MUTATION: undefined,\n        SOURCE_FILE_CHANGED: undefined,\n        WEBHOOK_RECEIVED: undefined,\n      },\n      invoke: {\n        id: `initialize`,\n        src: `initialize`,\n        onDone: {\n          target: `initializingData`,\n          actions: [`assignStoreAndWorkerPool`, `spawnMutationListener`],\n        },\n        onError: {\n          actions: `panic`,\n        },\n      },\n    },\n    // Sourcing nodes, customising and inferring schema, then running createPages\n    initializingData: {\n      on: {\n        // We need to run mutations immediately when in this state\n        ADD_NODE_MUTATION: {\n          actions: `callApi`,\n        },\n      },\n      invoke: {\n        id: `initialize-data`,\n        src: `initializeData`,\n        data: ({\n          parentSpan,\n          store,\n          webhookBody,\n          program,\n          reporter,\n        }: IBuildContext): IDataLayerContext => {\n          return {\n            parentSpan,\n            store,\n            webhookBody,\n            shouldRunCreatePagesStatefully: true,\n            deferNodeMutation: true,\n            program,\n            reporter,\n          }\n        },\n        onDone: {\n          actions: [\n            `assignServiceResult`,\n            `clearWebhookBody`,\n            `finishParentSpan`,\n          ],\n          target: `runningPostBootstrap`,\n        },\n        onError: {\n          actions: `logError`,\n          target: `waiting`,\n        },\n      },\n    },\n    runningPostBootstrap: {\n      invoke: {\n        id: `post-bootstrap`,\n        src: `postBootstrap`,\n        onDone: `runningQueries`,\n      },\n    },\n    // Running page and static queries and generating the SSRed HTML and page data\n    runningQueries: {\n      on: {\n        SOURCE_FILE_CHANGED: {\n          actions: [forwardTo(`run-queries`), `markSourceFilesDirty`],\n        },\n        ADD_NODE_MUTATION: {\n          actions: [`markNodesDirty`, `callApi`],\n        },\n        QUERY_RUN_REQUESTED: {\n          actions: forwardTo(`run-queries`),\n        },\n      },\n      invoke: {\n        id: `run-queries`,\n        src: `runQueries`,\n        // This is all the data that we're sending to the child machine\n        data: ({\n          program,\n          store,\n          parentSpan,\n          gatsbyNodeGraphQLFunction,\n          graphqlRunner,\n          websocketManager,\n          pendingQueryRuns,\n          reporter,\n        }: IBuildContext): IQueryRunningContext => {\n          return {\n            program,\n            store,\n            parentSpan,\n            gatsbyNodeGraphQLFunction,\n            graphqlRunner,\n            websocketManager,\n            pendingQueryRuns,\n            reporter,\n          }\n        },\n        onDone: [\n          {\n            // If we're at the recompile limit and nodes were mutated again then panic\n            target: `waiting`,\n            actions: `panicBecauseOfInfiniteLoop`,\n            cond: ({\n              nodesMutatedDuringQueryRun = false,\n              nodesMutatedDuringQueryRunRecompileCount = 0,\n            }: IBuildContext): boolean =>\n              nodesMutatedDuringQueryRun &&\n              nodesMutatedDuringQueryRunRecompileCount >= RECOMPILE_PANIC_LIMIT,\n          },\n          {\n            // Nodes were mutated while querying, so we need to re-run everything\n            target: `recreatingPages`,\n            cond: ({ nodesMutatedDuringQueryRun }: IBuildContext): boolean =>\n              !!nodesMutatedDuringQueryRun,\n            actions: [\n              `markNodesClean`,\n              `incrementRecompileCount`,\n              `clearPendingQueryRuns`,\n            ],\n          },\n          {\n            // If we have no compiler (i.e. it's first run), then spin up the\n            // webpack and socket.io servers\n            target: `startingDevServers`,\n            actions: [`setQueryRunningFinished`, `clearPendingQueryRuns`],\n            cond: ({ compiler }: IBuildContext): boolean => !compiler,\n          },\n          {\n            // If source files have changed, then recompile the JS bundle\n            target: `recompiling`,\n            cond: ({ sourceFilesDirty }: IBuildContext): boolean =>\n              !!sourceFilesDirty,\n            actions: [`clearPendingQueryRuns`],\n          },\n          {\n            // ...otherwise just wait.\n            target: `waiting`,\n            actions: [`clearPendingQueryRuns`],\n          },\n        ],\n        onError: {\n          actions: [`logError`, `clearPendingQueryRuns`],\n          target: `waiting`,\n        },\n      },\n      exit: assign<IBuildContext>({ shouldRunInitialTypegen: false }),\n    },\n    // Recompile the JS bundle\n    recompiling: {\n      // Important: mark source files as clean when recompiling starts\n      // Doing this `onDone` will wipe all file change events that occur **during** recompilation\n      // See https://github.com/gatsbyjs/gatsby/issues/27609\n      entry: [`setRecompiledFiles`, `markSourceFilesClean`],\n      invoke: {\n        src: `recompile`,\n        onDone: {\n          target: `waiting`,\n        },\n        onError: {\n          actions: `logError`,\n          target: `waiting`,\n        },\n      },\n    },\n    // Spin up webpack and socket.io\n    startingDevServers: {\n      invoke: {\n        src: `startWebpackServer`,\n        onDone: [\n          {\n            target: `initialGraphQLTypegen`,\n            cond: (ctx: IBuildContext): boolean => getGraphqlTypegenConfig(ctx),\n          },\n          {\n            target: `waiting`,\n          },\n        ],\n        onError: {\n          actions: `panic`,\n          target: `waiting`,\n        },\n      },\n      exit: [`assignServers`, `spawnWebpackListener`, `markSourceFilesClean`],\n    },\n    initialGraphQLTypegen: {\n      invoke: {\n        src: `graphQLTypegen`,\n        onDone: {\n          target: `waiting`,\n        },\n        onError: {\n          actions: `logError`,\n          target: `waiting`,\n        },\n      },\n    },\n    // Idle, waiting for events that make us rebuild\n    waiting: {\n      always: [\n        {\n          target: `runningQueries`,\n          cond: ({ pendingQueryRuns }: IBuildContext): boolean =>\n            !!pendingQueryRuns && pendingQueryRuns.size > 0,\n        },\n      ],\n      entry: [`saveDbState`, `resetRecompileCount`],\n      on: {\n        // Forward these events to the child machine, so it can handle batching\n        ADD_NODE_MUTATION: {\n          actions: forwardTo(`waiting`),\n        },\n        SOURCE_FILE_CHANGED: {\n          actions: [forwardTo(`waiting`), `markSourceFilesDirty`],\n        },\n        // This event is sent from the child\n        EXTRACT_QUERIES_NOW: {\n          target: `runningQueries`,\n        },\n      },\n      invoke: {\n        id: `waiting`,\n        src: `waitForMutations`,\n        // Send existing queued mutations to the child machine, which will execute them\n        data: ({\n          store,\n          nodeMutationBatch = [],\n          sourceFilesDirty,\n        }: IBuildContext): IWaitingContext => {\n          return {\n            store,\n            nodeMutationBatch,\n            sourceFilesDirty,\n            runningBatch: [],\n          }\n        },\n        // \"done\" means we need to rebuild\n        onDone: {\n          actions: `assignServiceResult`,\n          target: `recreatingPages`,\n        },\n        onError: {\n          actions: `panic`,\n        },\n      },\n    },\n    // Almost the same as initializing data, but skips various first-run stuff\n    reloadingData: {\n      on: {\n        // We need to run mutations immediately when in this state\n        ADD_NODE_MUTATION: {\n          actions: `callApi`,\n        },\n      },\n      invoke: {\n        src: `reloadData`,\n        data: ({\n          parentSpan,\n          store,\n          webhookBody,\n          webhookSourcePluginName,\n          program,\n          reporter,\n        }: IBuildContext): IDataLayerContext => {\n          return {\n            parentSpan,\n            store,\n            webhookBody,\n            webhookSourcePluginName,\n            refresh: true,\n            deferNodeMutation: true,\n            shouldRunCreatePagesStatefully: false,\n            program,\n            reporter,\n          }\n        },\n        onDone: {\n          actions: [\n            `assignServiceResult`,\n            `clearWebhookBody`,\n            `finishParentSpan`,\n          ],\n          target: `runningQueries`,\n        },\n        onError: {\n          actions: `logError`,\n          target: `waiting`,\n        },\n      },\n    },\n    // Rebuild pages if a node has been mutated outside of sourceNodes\n    recreatingPages: {\n      on: {\n        // We need to run mutations immediately when in this state\n        ADD_NODE_MUTATION: {\n          actions: `callApi`,\n        },\n      },\n      invoke: {\n        id: `recreate-pages`,\n        src: `recreatePages`,\n        data: ({\n          parentSpan,\n          store,\n          program,\n          reporter,\n        }: IBuildContext): IDataLayerContext => {\n          return {\n            parentSpan,\n            store,\n            program,\n            deferNodeMutation: true,\n            shouldRunCreatePagesStatefully: false,\n            reporter,\n          }\n        },\n        onDone: {\n          actions: `assignServiceResult`,\n          target: `runningQueries`,\n        },\n        onError: {\n          actions: `logError`,\n          target: `waiting`,\n        },\n      },\n    },\n  },\n}\n\nexport const developMachine = createMachine(developConfig, {\n  services: developServices,\n  actions: buildActions,\n})\n"],"mappings":"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"}