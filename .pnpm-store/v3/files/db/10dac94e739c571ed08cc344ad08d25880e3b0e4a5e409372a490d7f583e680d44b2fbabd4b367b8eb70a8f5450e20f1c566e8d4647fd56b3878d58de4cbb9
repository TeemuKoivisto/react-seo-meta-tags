{"version":3,"file":"cache-lmdb.js","names":["cacheDbFile","process","env","NODE_ENV","FORCE_TEST_DATABASE_ID","JEST_WORKER_ID","dbPath","path","join","cwd","getAlreadyOpenedStore","globalThis","__GATSBY_OPEN_ROOT_LMDBS","Map","get","GatsbyCacheLmdb","constructor","name","encoding","directory","cache","init","fs","ensureDirSync","getStore","rootDb","open","compression","maxDbs","set","getDb","db","openDB","key","value","put","del","remove","resetCache","store","close","delete","emptyDir"],"sources":["../../src/utils/cache-lmdb.ts"],"sourcesContent":["import { open, RootDatabase, Database, DatabaseOptions } from \"lmdb\"\nimport * as fs from \"fs-extra\"\nimport * as path from \"path\"\n\n// Since the regular GatsbyCache saves to \"caches\" this should be \"caches-lmdb\"\nconst cacheDbFile =\n  process.env.NODE_ENV === `test`\n    ? `caches-lmdb-${\n        // FORCE_TEST_DATABASE_ID will be set if this gets executed in worker context\n        // when running jest tests. JEST_WORKER_ID will be set when this gets executed directly\n        // in test context (jest will use jest-worker internally).\n        process.env.FORCE_TEST_DATABASE_ID ?? process.env.JEST_WORKER_ID\n      }`\n    : `caches-lmdb`\n\nconst dbPath = path.join(process.cwd(), `.cache/${cacheDbFile}`)\n\nfunction getAlreadyOpenedStore(): RootDatabase | undefined {\n  if (!globalThis.__GATSBY_OPEN_ROOT_LMDBS) {\n    globalThis.__GATSBY_OPEN_ROOT_LMDBS = new Map()\n  }\n  return globalThis.__GATSBY_OPEN_ROOT_LMDBS.get(dbPath)\n}\n\nexport default class GatsbyCacheLmdb {\n  private db: Database | undefined\n  private encoding: DatabaseOptions[\"encoding\"]\n  public readonly name: string\n  // Needed for plugins that want to write data to the cache directory\n  public readonly directory: string\n  // TODO: remove `.cache` in v4. This is compat mode - cache-manager cache implementation\n  // expose internal cache that gives access to `.del` function that wasn't available in public\n  // cache interface (gatsby-plugin-sharp use it to clear no longer needed data)\n  public readonly cache: GatsbyCacheLmdb\n\n  constructor({\n    name = `db`,\n    encoding = `json`,\n  }: {\n    name: string\n    encoding?: DatabaseOptions[\"encoding\"]\n  }) {\n    this.name = name\n    this.encoding = encoding\n    this.directory = path.join(process.cwd(), `.cache/caches/${name}`)\n    this.cache = this\n  }\n\n  init(): GatsbyCacheLmdb {\n    fs.ensureDirSync(this.directory)\n    return this\n  }\n\n  private static getStore(): RootDatabase {\n    let rootDb = getAlreadyOpenedStore()\n    if (rootDb) {\n      return rootDb\n    }\n\n    rootDb = open({\n      name: `root`,\n      path: dbPath,\n      compression: true,\n      maxDbs: 200,\n    })\n\n    globalThis.__GATSBY_OPEN_ROOT_LMDBS.set(dbPath, rootDb)\n\n    return rootDb\n  }\n\n  private getDb(): Database {\n    if (!this.db) {\n      this.db = GatsbyCacheLmdb.getStore().openDB({\n        name: this.name,\n        encoding: this.encoding,\n      })\n    }\n    return this.db\n  }\n\n  async get<T = unknown>(key): Promise<T | undefined> {\n    return this.getDb().get(key)\n  }\n\n  async set<T>(key: string, value: T): Promise<T | undefined> {\n    await this.getDb().put(key, value)\n    return value\n  }\n\n  async del(key: string): Promise<void> {\n    return this.getDb().remove(key) as unknown as Promise<void>\n  }\n}\n\nexport async function resetCache(): Promise<void> {\n  const store = getAlreadyOpenedStore()\n  if (store) {\n    await store.close()\n    globalThis.__GATSBY_OPEN_ROOT_LMDBS.delete(dbPath)\n  }\n\n  await fs.emptyDir(dbPath)\n}\n"],"mappings":"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"}