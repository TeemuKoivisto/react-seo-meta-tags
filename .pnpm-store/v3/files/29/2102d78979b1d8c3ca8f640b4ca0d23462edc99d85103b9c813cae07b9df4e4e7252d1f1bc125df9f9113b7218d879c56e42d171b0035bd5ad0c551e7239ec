{"version":3,"file":"get-static-dir.js","names":["copyStaticDirs","flattenedPlugins","store","getState","themesSet","map","plugin","themeDir","pluginFilepath","themeName","name","theme","nodePath","resolve","filter","themeStaticPath","fs","existsSync","folder","copySync","join","process","cwd","dereference","staticDir","undefined","syncStaticDir","chokidar","watch","on","path","relativePath","relative","copy"],"sources":["../../src/utils/get-static-dir.ts"],"sourcesContent":["import fs from \"fs-extra\"\nimport chokidar from \"chokidar\"\nimport nodePath from \"path\"\nimport { store } from \"../redux\"\n\n/**\n * copyStaticDirs\n * --\n * Copy files from the static directory to the public directory\n */\nexport const copyStaticDirs = (): void => {\n  // access the store to get themes\n  const { flattenedPlugins } = store.getState()\n  // if there are legacy themes, only use them. Otherwise proceed with plugins\n  const themesSet = flattenedPlugins.map(plugin => {\n    return {\n      themeDir: plugin.pluginFilepath,\n      themeName: plugin.name,\n    }\n  })\n\n  themesSet\n    // create an array of potential theme static folders\n    .map(theme => nodePath.resolve(theme.themeDir, `static`))\n    // filter out the static folders that don't exist\n    .filter(themeStaticPath => fs.existsSync(themeStaticPath))\n    // copy the files for each folder into the user's build\n    .map(folder =>\n      fs.copySync(folder, nodePath.join(process.cwd(), `public`), {\n        dereference: true,\n      })\n    )\n\n  const staticDir = nodePath.join(process.cwd(), `static`)\n  if (!fs.existsSync(staticDir)) return undefined\n  return fs.copySync(staticDir, nodePath.join(process.cwd(), `public`), {\n    dereference: true,\n  })\n}\n\n/**\n * syncStaticDir\n * --\n * Set up a watcher to sync changes from the static directory to the public directory\n */\nexport const syncStaticDir = (): void => {\n  const staticDir = nodePath.join(process.cwd(), `static`)\n  chokidar\n    .watch(staticDir)\n    .on(`add`, path => {\n      const relativePath = nodePath.relative(staticDir, path)\n      fs.copy(path, `${process.cwd()}/public/${relativePath}`)\n    })\n    .on(`change`, path => {\n      const relativePath = nodePath.relative(staticDir, path)\n      fs.copy(path, `${process.cwd()}/public/${relativePath}`)\n    })\n}\n"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACO,MAAMA,cAAc,GAAG,MAAY;EACxC;EACA,MAAM;IAAEC;EAAiB,CAAC,GAAGC,YAAK,CAACC,QAAQ,EAAE;EAC7C;EACA,MAAMC,SAAS,GAAGH,gBAAgB,CAACI,GAAG,CAACC,MAAM,IAAI;IAC/C,OAAO;MACLC,QAAQ,EAAED,MAAM,CAACE,cAAc;MAC/BC,SAAS,EAAEH,MAAM,CAACI;IACpB,CAAC;EACH,CAAC,CAAC;EAEFN;EACE;EAAA,CACCC,GAAG,CAACM,KAAK,IAAIC,aAAQ,CAACC,OAAO,CAACF,KAAK,CAACJ,QAAQ,EAAG,QAAO,CAAC;EACxD;EAAA,CACCO,MAAM,CAACC,eAAe,IAAIC,gBAAE,CAACC,UAAU,CAACF,eAAe,CAAC;EACzD;EAAA,CACCV,GAAG,CAACa,MAAM,IACTF,gBAAE,CAACG,QAAQ,CAACD,MAAM,EAAEN,aAAQ,CAACQ,IAAI,CAACC,OAAO,CAACC,GAAG,EAAE,EAAG,QAAO,CAAC,EAAE;IAC1DC,WAAW,EAAE;EACf,CAAC,CAAC,CACH;EAEH,MAAMC,SAAS,GAAGZ,aAAQ,CAACQ,IAAI,CAACC,OAAO,CAACC,GAAG,EAAE,EAAG,QAAO,CAAC;EACxD,IAAI,CAACN,gBAAE,CAACC,UAAU,CAACO,SAAS,CAAC,EAAE,OAAOC,SAAS;EAC/C,OAAOT,gBAAE,CAACG,QAAQ,CAACK,SAAS,EAAEZ,aAAQ,CAACQ,IAAI,CAACC,OAAO,CAACC,GAAG,EAAE,EAAG,QAAO,CAAC,EAAE;IACpEC,WAAW,EAAE;EACf,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AAJA;AAKO,MAAMG,aAAa,GAAG,MAAY;EACvC,MAAMF,SAAS,GAAGZ,aAAQ,CAACQ,IAAI,CAACC,OAAO,CAACC,GAAG,EAAE,EAAG,QAAO,CAAC;EACxDK,iBAAQ,CACLC,KAAK,CAACJ,SAAS,CAAC,CAChBK,EAAE,CAAE,KAAI,EAAEC,IAAI,IAAI;IACjB,MAAMC,YAAY,GAAGnB,aAAQ,CAACoB,QAAQ,CAACR,SAAS,EAAEM,IAAI,CAAC;IACvDd,gBAAE,CAACiB,IAAI,CAACH,IAAI,EAAG,GAAET,OAAO,CAACC,GAAG,EAAG,WAAUS,YAAa,EAAC,CAAC;EAC1D,CAAC,CAAC,CACDF,EAAE,CAAE,QAAO,EAAEC,IAAI,IAAI;IACpB,MAAMC,YAAY,GAAGnB,aAAQ,CAACoB,QAAQ,CAACR,SAAS,EAAEM,IAAI,CAAC;IACvDd,gBAAE,CAACiB,IAAI,CAACH,IAAI,EAAG,GAAET,OAAO,CAACC,GAAG,EAAG,WAAUS,YAAa,EAAC,CAAC;EAC1D,CAAC,CAAC;AACN,CAAC;AAAA"}