{"version":3,"file":"state-machine-logging.js","names":["isInterpreter","actor","logTransitions","service","listeners","WeakSet","last","onTransition","state","changed","matches","process","env","gatsby_log_level","reporter","verbose","JSON","stringify","value","children","forEach","child","has","sublast","substate","add"],"sources":["../../src/utils/state-machine-logging.ts"],"sourcesContent":["import {\n  DefaultContext,\n  Interpreter,\n  Actor,\n  State,\n  AnyEventObject,\n} from \"xstate\"\nimport reporter from \"gatsby-cli/lib/reporter\"\n\ntype AnyInterpreterWithContext<T> = Interpreter<T, any, any, any, any>\n\nconst isInterpreter = <T>(\n  actor: Actor<T> | Interpreter<T>\n): actor is Interpreter<T> => `machine` in actor\n\nexport function logTransitions<T = DefaultContext>(\n  service: AnyInterpreterWithContext<T>\n): void {\n  const listeners = new WeakSet()\n  let last: State<T, AnyEventObject, any, any>\n\n  service.onTransition(state => {\n    if (!last) {\n      last = state\n    } else if (!state.changed || last.matches(state)) {\n      return\n    }\n    last = state\n    if (process.env.gatsby_log_level === `verbose`) {\n      reporter.verbose(`Transition to ${JSON.stringify(state.value)}`)\n    }\n    // eslint-disable-next-line no-unused-expressions\n    service.children?.forEach(child => {\n      // We want to ensure we don't attach a listener to the same\n      // actor. We don't need to worry about detaching the listener\n      // because xstate handles that for us when the actor is stopped.\n\n      // @ts-ignore - TODO: Fix it\n      if (isInterpreter(child) && !listeners.has(child)) {\n        let sublast = child.state\n        child.onTransition(substate => {\n          if (!sublast) {\n            sublast = substate\n          } else if (!substate.changed || sublast.matches(substate)) {\n            return\n          }\n          sublast = substate\n          if (process.env.gatsby_log_level === `verbose`) {\n            reporter.verbose(\n              `Transition to ${JSON.stringify(state.value)} > ${JSON.stringify(\n                substate.value\n              )}`\n            )\n          }\n        })\n        listeners.add(child)\n      }\n    })\n  })\n}\n"],"mappings":";;;;;AAOA;AAIA,MAAMA,aAAa,GACjBC,KAAgC,IACH,SAAQ,IAAIA,KAAK;AAEzC,SAASC,cAAc,CAC5BC,OAAqC,EAC/B;EACN,MAAMC,SAAS,GAAG,IAAIC,OAAO,EAAE;EAC/B,IAAIC,IAAwC;EAE5CH,OAAO,CAACI,YAAY,CAACC,KAAK,IAAI;IAAA;IAC5B,IAAI,CAACF,IAAI,EAAE;MACTA,IAAI,GAAGE,KAAK;IACd,CAAC,MAAM,IAAI,CAACA,KAAK,CAACC,OAAO,IAAIH,IAAI,CAACI,OAAO,CAACF,KAAK,CAAC,EAAE;MAChD;IACF;IACAF,IAAI,GAAGE,KAAK;IACZ,IAAIG,OAAO,CAACC,GAAG,CAACC,gBAAgB,KAAM,SAAQ,EAAE;MAC9CC,iBAAQ,CAACC,OAAO,CAAE,iBAAgBC,IAAI,CAACC,SAAS,CAACT,KAAK,CAACU,KAAK,CAAE,EAAC,CAAC;IAClE;IACA;IACA,qBAAAf,OAAO,CAACgB,QAAQ,sDAAhB,kBAAkBC,OAAO,CAACC,KAAK,IAAI;MACjC;MACA;MACA;;MAEA;MACA,IAAIrB,aAAa,CAACqB,KAAK,CAAC,IAAI,CAACjB,SAAS,CAACkB,GAAG,CAACD,KAAK,CAAC,EAAE;QACjD,IAAIE,OAAO,GAAGF,KAAK,CAACb,KAAK;QACzBa,KAAK,CAACd,YAAY,CAACiB,QAAQ,IAAI;UAC7B,IAAI,CAACD,OAAO,EAAE;YACZA,OAAO,GAAGC,QAAQ;UACpB,CAAC,MAAM,IAAI,CAACA,QAAQ,CAACf,OAAO,IAAIc,OAAO,CAACb,OAAO,CAACc,QAAQ,CAAC,EAAE;YACzD;UACF;UACAD,OAAO,GAAGC,QAAQ;UAClB,IAAIb,OAAO,CAACC,GAAG,CAACC,gBAAgB,KAAM,SAAQ,EAAE;YAC9CC,iBAAQ,CAACC,OAAO,CACb,iBAAgBC,IAAI,CAACC,SAAS,CAACT,KAAK,CAACU,KAAK,CAAE,MAAKF,IAAI,CAACC,SAAS,CAC9DO,QAAQ,CAACN,KAAK,CACd,EAAC,CACJ;UACH;QACF,CAAC,CAAC;QACFd,SAAS,CAACqB,GAAG,CAACJ,KAAK,CAAC;MACtB;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ"}