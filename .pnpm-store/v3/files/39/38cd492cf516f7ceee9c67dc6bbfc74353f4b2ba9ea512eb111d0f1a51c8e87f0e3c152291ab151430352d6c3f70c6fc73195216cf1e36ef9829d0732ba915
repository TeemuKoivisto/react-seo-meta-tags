{"version":3,"file":"page-mode.js","names":["pageConfigMap","Map","getPageMode","page","state","components","store","getState","component","get","componentPath","serverData","config","resolvePageMode","pageMode","undefined","pageConfigFn","componentChunkName","fsRouteParams","context","pageConfig","params","defer","path","reportOnce","materializePageMode","pages","dispatchCount","values","Error","action","type","payload","dispatch","Promise","resolve","setImmediate","getDataStore","ready","preparePageTemplateConfigs","graphql","program","pageRendererPath","directory","ROUTES_DIRECTORY","pageRenderer","require","global","all","Array","from","map","componentInstance","getPageChunk","set"],"sources":["../../src/utils/page-mode.ts"],"sourcesContent":["import { store } from \"../redux\"\nimport {\n  IGatsbyPage,\n  IGatsbyState,\n  IMaterializePageMode,\n  PageMode,\n} from \"../redux/types\"\nimport { reportOnce } from \"./report-once\"\nimport { ROUTES_DIRECTORY } from \"../constants\"\nimport { Runner } from \"../bootstrap/create-graphql-runner\"\nimport { getDataStore } from \"../datastore\"\n\ntype IPageConfigFn = (arg: { params: Record<string, unknown> }) => {\n  defer: boolean\n}\n\nconst pageConfigMap = new Map<string, IPageConfigFn>()\n\n/**\n * In develop IGatsbyPage[\"mode\"] can change at any time, so as a general rule we need to resolve it\n * every time from page component and IGatsbyPage[\"defer\"] value.\n *\n * IGatsbyPage[\"mode\"] is only reliable in engines and in `onPostBuild` hook.\n */\nexport function getPageMode(page: IGatsbyPage, state?: IGatsbyState): PageMode {\n  const { components } = state ?? store.getState()\n\n  // assume SSG until components are actually extracted\n  const component = components.get(page.componentPath) ?? {\n    serverData: false,\n    config: false,\n  }\n\n  return resolvePageMode(page, component)\n}\n\nfunction resolvePageMode(\n  page: IGatsbyPage,\n  component: { serverData: boolean; config: boolean }\n): PageMode {\n  let pageMode: PageMode | undefined = undefined\n  if (component.serverData) {\n    pageMode = `SSR`\n  } else if (component.config) {\n    const pageConfigFn = pageConfigMap.get(page.componentChunkName)\n    if (!pageConfigFn) {\n      // This is possible in warm builds when `component.config` was persisted but\n      // `preparePageTemplateConfigs` hasn't been executed yet\n      // TODO: if we move `mode` away from page and persist it in the state separately,\n      //  we can just return the old `mode` that should be in sync with `component.config`\n      return `SSG`\n    }\n\n    const fsRouteParams = (\n      typeof page.context[`__params`] === `object`\n        ? page.context[`__params`]\n        : {}\n    ) as Record<string, unknown>\n\n    const pageConfig = pageConfigFn({ params: fsRouteParams })\n    if (typeof pageConfig.defer === `boolean`) {\n      pageMode = pageConfig.defer ? `DSG` : `SSG`\n    }\n  }\n\n  if (!pageMode) {\n    pageMode = page.defer ? `DSG` : `SSG`\n  }\n  if (\n    pageMode !== `SSG` &&\n    (page.path === `/404.html` || page.path === `/500.html`)\n  ) {\n    reportOnce(\n      `Status page \"${page.path}\" ignores page mode (\"${pageMode}\") and force sets it to SSG (this page can't be lazily rendered).`\n    )\n    pageMode = `SSG`\n  }\n\n  return pageMode\n}\n\n/**\n * Persist page.mode for SSR/DSG pages to ensure they work with `gatsby serve`\n *\n * TODO: ideally IGatsbyPage[\"mode\"] should not exist at all and instead we need a different entity\n *   holding this information: an entity that is only created in the end of the build e.g. Route\n *   then materializePageMode transforms to createRoutes\n */\nexport async function materializePageMode(): Promise<void> {\n  const { pages, components } = store.getState()\n\n  let dispatchCount = 0\n  for (const page of pages.values()) {\n    const component = components.get(page.componentPath)\n    if (!component) {\n      throw new Error(`Could not find matching component for page ${page.path}`)\n    }\n    const pageMode = resolvePageMode(page, component)\n\n    // Do not materialize for SSG pages: saves some CPU time as `page.mode` === `SSG` by default when creating a page\n    // and our pages are re-generated on each build, not persisted\n    // (so no way to get DSG/SSR value from the previous build)\n    if (pageMode !== `SSG`) {\n      const action: IMaterializePageMode = {\n        type: `MATERIALIZE_PAGE_MODE`,\n        payload: { path: page.path, pageMode },\n      }\n      store.dispatch(action)\n    }\n    // Do not block task queue of the event loop for too long:\n    if (dispatchCount++ % 100 === 0) {\n      await new Promise(resolve => setImmediate(resolve))\n    }\n  }\n  await getDataStore().ready()\n}\n\nexport async function preparePageTemplateConfigs(\n  graphql: Runner\n): Promise<void> {\n  const { program } = store.getState()\n  const pageRendererPath = `${program.directory}/${ROUTES_DIRECTORY}render-page.js`\n\n  const pageRenderer = require(pageRendererPath)\n  global[`__gatsbyGraphql`] = graphql\n\n  await Promise.all(\n    Array.from(store.getState().components.values()).map(async component => {\n      if (component.config) {\n        const componentInstance = await pageRenderer.getPageChunk({\n          componentChunkName: component.componentChunkName,\n        })\n        const pageConfigFn = await componentInstance.config()\n        if (typeof pageConfigFn !== `function`) {\n          throw new Error(\n            `Unexpected result of config factory. Expected \"function\", got \"${typeof pageConfigFn}\".`\n          )\n        }\n\n        pageConfigMap.set(component.componentChunkName, pageConfigFn)\n      }\n    })\n  )\n  delete global[`__gatsbyGraphql`]\n}\n"],"mappings":"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"}