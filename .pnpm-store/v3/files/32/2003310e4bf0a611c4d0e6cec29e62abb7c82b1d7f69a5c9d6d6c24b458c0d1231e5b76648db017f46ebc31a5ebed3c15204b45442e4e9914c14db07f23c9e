{"version":3,"file":"get-ssr-chunk-hashes.js","names":["getHashes","chunkGroup","compilation","hashes","chunk","chunks","hash","Error","push","childChunkGroup","childrenIterable","isNotImportedByAsyncRequires","origins","every","origin","module","identifier","includes","getSSRChunkHashes","stats","components","templateHashes","componentChunkNameToTemplatePath","renderPageHash","forEach","component","componentChunkName","componentPath","chunkGroups","name","concenatedChunksByName","join","templatePath"],"sources":["../../../src/utils/webpack/get-ssr-chunk-hashes.ts"],"sourcesContent":["import type webpack from \"webpack\"\nimport type { IGatsbyState } from \"../../internal\"\n\ntype ChunkGroup = webpack.Compilation[\"chunkGroups\"][0]\n\nfunction getHashes(\n  chunkGroup: ChunkGroup,\n  compilation: webpack.Compilation,\n  hashes: Array<string> = []\n): Array<string> {\n  for (const chunk of chunkGroup.chunks) {\n    if (!chunk.hash) {\n      throw new Error(\n        `Invariant: [generating template hashes] Chunk doesn't have hash`\n      )\n    }\n    hashes.push(chunk.hash)\n  }\n\n  for (const childChunkGroup of chunkGroup.childrenIterable) {\n    const isNotImportedByAsyncRequires = childChunkGroup.origins.every(\n      origin => !origin.module.identifier().includes(`async-requires`)\n    )\n\n    if (isNotImportedByAsyncRequires) {\n      getHashes(childChunkGroup, compilation, hashes)\n    }\n  }\n\n  return hashes\n}\n\nexport function getSSRChunkHashes({\n  stats,\n  components,\n}: {\n  stats: webpack.Stats\n  components: IGatsbyState[\"components\"]\n}): {\n  templateHashes: Record<string, string>\n  renderPageHash: string\n} {\n  const templateHashes: Record<string, string> = {}\n  const componentChunkNameToTemplatePath: Record<string, string> = {}\n  let renderPageHash = ``\n\n  components.forEach(component => {\n    componentChunkNameToTemplatePath[component.componentChunkName] =\n      component.componentPath\n  })\n\n  for (const chunkGroup of stats.compilation.chunkGroups) {\n    if (chunkGroup.name) {\n      const concenatedChunksByName = getHashes(\n        chunkGroup,\n        stats.compilation\n      ).join(`--`)\n\n      if (chunkGroup.name !== `render-page`) {\n        const templatePath = componentChunkNameToTemplatePath[chunkGroup.name]\n        if (!templatePath) {\n          // additional chunk group can be created by lazy imports\n          // we handle them by handling children chunk groups on top level ones\n          continue\n        }\n        templateHashes[templatePath] = concenatedChunksByName\n      } else {\n        renderPageHash = concenatedChunksByName\n      }\n    }\n  }\n\n  return { templateHashes, renderPageHash }\n}\n"],"mappings":";;;;AAKA,SAASA,SAAS,CAChBC,UAAsB,EACtBC,WAAgC,EAChCC,MAAqB,GAAG,EAAE,EACX;EACf,KAAK,MAAMC,KAAK,IAAIH,UAAU,CAACI,MAAM,EAAE;IACrC,IAAI,CAACD,KAAK,CAACE,IAAI,EAAE;MACf,MAAM,IAAIC,KAAK,CACZ,iEAAgE,CAClE;IACH;IACAJ,MAAM,CAACK,IAAI,CAACJ,KAAK,CAACE,IAAI,CAAC;EACzB;EAEA,KAAK,MAAMG,eAAe,IAAIR,UAAU,CAACS,gBAAgB,EAAE;IACzD,MAAMC,4BAA4B,GAAGF,eAAe,CAACG,OAAO,CAACC,KAAK,CAChEC,MAAM,IAAI,CAACA,MAAM,CAACC,MAAM,CAACC,UAAU,EAAE,CAACC,QAAQ,CAAE,gBAAe,CAAC,CACjE;IAED,IAAIN,4BAA4B,EAAE;MAChCX,SAAS,CAACS,eAAe,EAAEP,WAAW,EAAEC,MAAM,CAAC;IACjD;EACF;EAEA,OAAOA,MAAM;AACf;AAEO,SAASe,iBAAiB,CAAC;EAChCC,KAAK;EACLC;AAIF,CAAC,EAGC;EACA,MAAMC,cAAsC,GAAG,CAAC,CAAC;EACjD,MAAMC,gCAAwD,GAAG,CAAC,CAAC;EACnE,IAAIC,cAAc,GAAI,EAAC;EAEvBH,UAAU,CAACI,OAAO,CAACC,SAAS,IAAI;IAC9BH,gCAAgC,CAACG,SAAS,CAACC,kBAAkB,CAAC,GAC5DD,SAAS,CAACE,aAAa;EAC3B,CAAC,CAAC;EAEF,KAAK,MAAM1B,UAAU,IAAIkB,KAAK,CAACjB,WAAW,CAAC0B,WAAW,EAAE;IACtD,IAAI3B,UAAU,CAAC4B,IAAI,EAAE;MACnB,MAAMC,sBAAsB,GAAG9B,SAAS,CACtCC,UAAU,EACVkB,KAAK,CAACjB,WAAW,CAClB,CAAC6B,IAAI,CAAE,IAAG,CAAC;MAEZ,IAAI9B,UAAU,CAAC4B,IAAI,KAAM,aAAY,EAAE;QACrC,MAAMG,YAAY,GAAGV,gCAAgC,CAACrB,UAAU,CAAC4B,IAAI,CAAC;QACtE,IAAI,CAACG,YAAY,EAAE;UACjB;UACA;UACA;QACF;QACAX,cAAc,CAACW,YAAY,CAAC,GAAGF,sBAAsB;MACvD,CAAC,MAAM;QACLP,cAAc,GAAGO,sBAAsB;MACzC;IACF;EACF;EAEA,OAAO;IAAET,cAAc;IAAEE;EAAe,CAAC;AAC3C"}