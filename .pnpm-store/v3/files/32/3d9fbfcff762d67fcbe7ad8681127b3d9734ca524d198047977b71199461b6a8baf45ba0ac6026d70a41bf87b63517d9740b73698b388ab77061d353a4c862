{"version":3,"file":"merge-gatsby-config.js","names":["howToMerge","byDefault","a","b","siteMetadata","objA","objB","plugins","concat","mapping","mergeGatsbyConfig","allGatsbyConfigKeysWithAValue","Object","keys","mergedConfig","reduce","config","gatsbyConfigKey","mergeFn"],"sources":["../../src/utils/merge-gatsby-config.ts"],"sourcesContent":["import _ from \"lodash\"\nimport { Express } from \"express\"\nimport type { TrailingSlash } from \"gatsby-page-utils\"\n\nexport interface IPluginEntryWithParentDir {\n  resolve: string\n  options?: Record<string, unknown>\n  parentDir: string\n}\n// TODO export it in index.d.ts\nexport type PluginEntry = string | IPluginEntryWithParentDir\n\nexport interface IGatsbyConfigInput {\n  siteMetadata?: Record<string, unknown>\n  plugins?: Array<PluginEntry>\n  pathPrefix?: string\n  assetPrefix?: string\n  polyfill?: boolean\n  mapping?: Record<string, string>\n  proxy?: {\n    prefix: string\n    url: string\n  }\n  developMiddleware?(app: Express): void\n  jsxRuntime?: \"classic\" | \"automatic\"\n  jsxImportSource?: string\n  trailingSlash?: TrailingSlash\n}\n\ntype ConfigKey = keyof IGatsbyConfigInput\ntype Metadata = IGatsbyConfigInput[\"siteMetadata\"]\ntype Mapping = IGatsbyConfigInput[\"mapping\"]\n\nconst howToMerge = {\n  /**\n   * pick a truthy value by default.\n   * This makes sure that if a single value is defined, that one it used.\n   * We prefer the \"right\" value, because the user's config will be \"on the right\"\n   */\n  byDefault: (a: ConfigKey, b: ConfigKey): ConfigKey => b || a,\n  siteMetadata: (objA: Metadata, objB: Metadata): Metadata =>\n    _.merge({}, objA, objB),\n  // plugins are concatenated and uniq'd, so we don't get two of the same plugin value\n  plugins: (\n    a: Array<PluginEntry> = [],\n    b: Array<PluginEntry> = []\n  ): Array<PluginEntry> => a.concat(b),\n  mapping: (objA: Mapping, objB: Mapping): Mapping => _.merge({}, objA, objB),\n} as const\n\n/**\n * Defines how a theme object is merged with the user's config\n */\nexport const mergeGatsbyConfig = (\n  a: IGatsbyConfigInput,\n  b: IGatsbyConfigInput\n): IGatsbyConfigInput => {\n  // a and b are gatsby configs, If they have keys, that means there are values to merge\n  const allGatsbyConfigKeysWithAValue = _.uniq(\n    Object.keys(a).concat(Object.keys(b))\n  ) as Array<ConfigKey>\n\n  // reduce the array of mergable keys into a single gatsby config object\n  const mergedConfig = allGatsbyConfigKeysWithAValue.reduce(\n    (config, gatsbyConfigKey) => {\n      // choose a merge function for the config key if there's one defined,\n      // otherwise use the default value merge function\n      const mergeFn = howToMerge[gatsbyConfigKey] || howToMerge.byDefault\n      return {\n        ...config,\n        [gatsbyConfigKey]: mergeFn(a[gatsbyConfigKey], b[gatsbyConfigKey]),\n      }\n    },\n    {} as IGatsbyConfigInput\n  )\n\n  // return the fully merged config\n  return mergedConfig\n}\n"],"mappings":";;;;;;;AAiCA,MAAMA,UAAU,GAAG;EACjB;AACF;AACA;AACA;AACA;EACEC,SAAS,EAAE,CAACC,CAAY,EAAEC,CAAY,KAAgBA,CAAC,IAAID,CAAC;EAC5DE,YAAY,EAAE,CAACC,IAAc,EAAEC,IAAc,KAC3C,qBAAQ,CAAC,CAAC,EAAED,IAAI,EAAEC,IAAI,CAAC;EACzB;EACAC,OAAO,EAAE,CACPL,CAAqB,GAAG,EAAE,EAC1BC,CAAqB,GAAG,EAAE,KACHD,CAAC,CAACM,MAAM,CAACL,CAAC,CAAC;EACpCM,OAAO,EAAE,CAACJ,IAAa,EAAEC,IAAa,KAAc,qBAAQ,CAAC,CAAC,EAAED,IAAI,EAAEC,IAAI;AAC5E,CAAU;;AAEV;AACA;AACA;AACO,MAAMI,iBAAiB,GAAG,CAC/BR,CAAqB,EACrBC,CAAqB,KACE;EACvB;EACA,MAAMQ,6BAA6B,GAAG,oBACpCC,MAAM,CAACC,IAAI,CAACX,CAAC,CAAC,CAACM,MAAM,CAACI,MAAM,CAACC,IAAI,CAACV,CAAC,CAAC,CAAC,CAClB;;EAErB;EACA,MAAMW,YAAY,GAAGH,6BAA6B,CAACI,MAAM,CACvD,CAACC,MAAM,EAAEC,eAAe,KAAK;IAC3B;IACA;IACA,MAAMC,OAAO,GAAGlB,UAAU,CAACiB,eAAe,CAAC,IAAIjB,UAAU,CAACC,SAAS;IACnE,OAAO;MACL,GAAGe,MAAM;MACT,CAACC,eAAe,GAAGC,OAAO,CAAChB,CAAC,CAACe,eAAe,CAAC,EAAEd,CAAC,CAACc,eAAe,CAAC;IACnE,CAAC;EACH,CAAC,EACD,CAAC,CAAC,CACH;;EAED;EACA,OAAOH,YAAY;AACrB,CAAC;AAAA"}