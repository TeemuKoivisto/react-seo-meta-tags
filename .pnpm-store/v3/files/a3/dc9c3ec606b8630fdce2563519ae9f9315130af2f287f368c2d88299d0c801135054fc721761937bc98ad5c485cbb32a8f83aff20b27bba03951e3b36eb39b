{"version":3,"file":"ts-codegen.js","names":["DEFAULT_TYPES_OUTPUT_PATH","DEFAULT_DOCUMENT_SEARCH_PATHS","NAMESPACE","DEFAULT_TYPESCRIPT_CONFIG","avoidOptionals","immutableTypes","maybeValue","noExport","enumsAsTypes","scalars","Date","JSON","GatsbyImageData","useTypeImports","DEFAULT_TYPESCRIPT_OPERATIONS_CONFIG","exportFragmentSpreadSubTypes","writeTypeScriptTypes","directory","schema","definitions","graphqlTypegenOptions","pluginConfig","pluginMap","add","require","typescript","typescriptOperations","plugins","placement","content","filename","join","typesOutputPath","gatsbyNodeDocuments","loadDocuments","documentSearchPaths","loaders","CodeFileLoader","pluckConfig","modules","name","identifier","sort","e","documents","filterTargetDefinitions","values","sortDefinitions","map","definitionMeta","document","kind","Kind","DOCUMENT","def","hash","toString","codegenOptions","undefined","schemaAst","stabilizeSchema","concat","config","namingConvention","typeNames","enumValues","transformUnderscore","addUnderscoreToArgsType","skipTypename","result","codegen","fs","outputFile"],"sources":["../../../src/utils/graphql-typegen/ts-codegen.ts"],"sourcesContent":["import * as fs from \"fs-extra\"\nimport { join } from \"path\"\nimport { codegen } from \"@graphql-codegen/core\"\nimport { GraphQLSchema, Kind } from \"graphql\"\nimport type { Types } from \"@graphql-codegen/plugin-helpers\"\nimport type { TypeScriptPluginConfig } from \"@graphql-codegen/typescript\"\nimport type { TypeScriptDocumentsPluginConfig } from \"@graphql-codegen/typescript-operations\"\nimport { CodeFileLoader } from \"@graphql-tools/code-file-loader\"\nimport { loadDocuments } from \"@graphql-tools/load\"\nimport {\n  IDefinitionMeta,\n  IStateProgram,\n  IGraphQLTypegenOptions,\n} from \"../../redux/types\"\nimport {\n  filterTargetDefinitions,\n  sortDefinitions,\n  stabilizeSchema,\n} from \"./utils\"\n\nexport const DEFAULT_TYPES_OUTPUT_PATH = `src/gatsby-types.d.ts`\nexport const DEFAULT_DOCUMENT_SEARCH_PATHS = [\n  `./gatsby-node.ts`,\n  `./plugins/**/gatsby-node.ts`,\n]\nconst NAMESPACE = `Queries`\n\n// These override the defaults from\n// https://www.graphql-code-generator.com/plugins/typescript\nconst DEFAULT_TYPESCRIPT_CONFIG: Readonly<TypeScriptPluginConfig> = {\n  // <Maybe> Type is enough\n  avoidOptionals: true,\n  // Types come from the data layer so they can't be modified\n  immutableTypes: true,\n  // TODO: Better maybeValue\n  maybeValue: `T | null`,\n  // We'll want to re-export ourselves\n  noExport: true,\n  // Recommended for .d.ts files\n  enumsAsTypes: true,\n  scalars: {\n    Date: `string`,\n    JSON: `Record<string, unknown>`,\n    GatsbyImageData: `import('gatsby-plugin-image').IGatsbyImageData`,\n  },\n  // import type {} syntax is nicer\n  useTypeImports: true,\n}\n\nconst DEFAULT_TYPESCRIPT_OPERATIONS_CONFIG: Readonly<TypeScriptDocumentsPluginConfig> =\n  {\n    ...DEFAULT_TYPESCRIPT_CONFIG,\n    exportFragmentSpreadSubTypes: true,\n  }\n\nexport async function writeTypeScriptTypes(\n  directory: IStateProgram[\"directory\"],\n  schema: GraphQLSchema,\n  definitions: Map<string, IDefinitionMeta>,\n  graphqlTypegenOptions: IGraphQLTypegenOptions\n): Promise<void> {\n  const pluginConfig: Pick<Types.GenerateOptions, \"plugins\" | \"pluginMap\"> = {\n    pluginMap: {\n      add: require(`@graphql-codegen/add`),\n      typescript: require(`@graphql-codegen/typescript`),\n      typescriptOperations: require(`@graphql-codegen/typescript-operations`),\n    },\n    plugins: [\n      {\n        add: {\n          placement: `prepend`,\n          content: `/* eslint-disable */\\n`,\n        },\n      },\n      {\n        add: {\n          placement: `prepend`,\n          content: `/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */\\n`,\n        },\n      },\n      {\n        add: {\n          placement: `prepend`,\n          content: `declare namespace ${NAMESPACE} {\\n`,\n        },\n      },\n      {\n        typescript: DEFAULT_TYPESCRIPT_CONFIG,\n      },\n      {\n        typescriptOperations: DEFAULT_TYPESCRIPT_OPERATIONS_CONFIG,\n      },\n      {\n        add: {\n          placement: `append`,\n          content: `\\n}\\n`,\n        },\n      },\n    ],\n  }\n\n  const filename = join(directory, graphqlTypegenOptions.typesOutputPath)\n\n  let gatsbyNodeDocuments: Array<Types.DocumentFile> = []\n  // The loadDocuments + CodeFileLoader looks for graphql(``) functions inside the gatsby-node.ts files\n  // And then extracts the queries into documents\n  // TODO: This codepath can be made obsolete if Gatsby itself already places the queries inside gatsby-node into the `definitions`\n  try {\n    gatsbyNodeDocuments = await loadDocuments(\n      graphqlTypegenOptions.documentSearchPaths,\n      {\n        loaders: [\n          new CodeFileLoader({\n            // Configures https://www.graphql-tools.com/docs/graphql-tag-pluck to only check graphql function from Gatsby\n            pluckConfig: {\n              modules: [{ name: `gatsby`, identifier: `graphql` }],\n            },\n          }),\n        ],\n        sort: true,\n      }\n    )\n  } catch (e) {\n    // These files might not exist, so just skip this\n  }\n\n  const documents: Array<Types.DocumentFile> = [\n    ...filterTargetDefinitions(definitions).values(),\n  ]\n    .sort(sortDefinitions)\n    .map(definitionMeta => {\n      return {\n        document: {\n          kind: Kind.DOCUMENT,\n          definitions: [definitionMeta.def],\n        },\n        hash: definitionMeta.hash.toString(),\n      }\n    })\n\n  const codegenOptions: Omit<Types.GenerateOptions, \"plugins\" | \"pluginMap\"> = {\n    // @ts-ignore - Incorrect types\n    schema: undefined,\n    schemaAst: stabilizeSchema(schema),\n    documents: documents.concat(gatsbyNodeDocuments),\n    filename,\n    config: {\n      namingConvention: {\n        typeNames: `keep`,\n        enumValues: `keep`,\n        transformUnderscore: false,\n      },\n      addUnderscoreToArgsType: true,\n      skipTypename: true,\n    },\n  }\n\n  const result = await codegen({\n    ...pluginConfig,\n    ...codegenOptions,\n  })\n\n  await fs.outputFile(filename, result)\n}\n"],"mappings":"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"}