{"version":3,"file":"types.js","names":[],"sources":["../../src/datastore/types.ts"],"sourcesContent":["import { Database } from \"lmdb\"\nimport { IGatsbyNode } from \"../redux/types\"\nimport { GatsbyGraphQLType } from \"../../index\"\nimport { IInputQuery } from \"./common/query\"\nimport { IGraphQLRunnerStats } from \"../query/types\"\nimport { GatsbyIterable } from \"./common/iterable\"\n\nexport type NodeId = string\nexport type NodeType = string\n\nexport interface ILmdbDatabases {\n  nodes: Database<IGatsbyNode, NodeId>\n  nodesByType: Database<NodeId, NodeType>\n  indexes: Database<NodeId, Array<any>>\n  metadata: Database<any, string>\n}\n\nexport interface IQueryResult {\n  entries: GatsbyIterable<IGatsbyNode>\n  totalCount: () => Promise<number>\n}\n\nexport interface IRunQueryArgs {\n  gqlType: GatsbyGraphQLType\n  queryArgs: {\n    filter: IInputQuery | undefined\n    sort:\n      | {\n          fields: Array<string>\n          order: Array<boolean | \"asc\" | \"desc\" | \"ASC\" | \"DESC\">\n        }\n      | undefined\n    limit?: number\n    skip?: number\n  }\n  firstOnly: boolean\n  resolvedFields: Record<string, any>\n  nodeTypeNames: Array<string>\n  stats: IGraphQLRunnerStats\n}\n\nexport interface IDataStore {\n  getNode(id: string): IGatsbyNode | undefined\n  getTypes(): Array<string>\n  countNodes(typeName?: string): number\n  ready(): Promise<void>\n  iterateNodes(): GatsbyIterable<IGatsbyNode>\n  iterateNodesByType(type: string): GatsbyIterable<IGatsbyNode>\n  runQuery(args: IRunQueryArgs): Promise<IQueryResult>\n\n  /** @deprecated */\n  getNodes(): Array<IGatsbyNode>\n  /** @deprecated */\n  getNodesByType(type: string): Array<IGatsbyNode>\n}\n"],"mappings":""}