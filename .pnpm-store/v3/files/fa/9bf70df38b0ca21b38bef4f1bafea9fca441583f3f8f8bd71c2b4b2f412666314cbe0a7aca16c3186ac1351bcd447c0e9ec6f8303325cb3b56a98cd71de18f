{"version":3,"file":"calculate-dirty-queries.js","names":["calculateDirtyQueries","store","websocketManager","currentlyHandledPendingQueryRuns","assertStore","state","getState","queryIds","calcDirtyQueryIds","queriesToRun","process","env","gatsby_executing_command","GATSBY_QUERY_ON_DEMAND","pagePathFilter","Set","activePaths","activePath","add","pendingQuery","filter","queryId","startsWith","has","groupQueryIds"],"sources":["../../src/services/calculate-dirty-queries.ts"],"sourcesContent":["import { calcDirtyQueryIds, groupQueryIds } from \"../query\"\nimport { IGroupedQueryIds } from \"./\"\nimport { IQueryRunningContext } from \"../state-machines/query-running/types\"\nimport { assertStore } from \"../utils/assert-store\"\n\nexport async function calculateDirtyQueries({\n  store,\n  websocketManager,\n  currentlyHandledPendingQueryRuns,\n}: Partial<IQueryRunningContext>): Promise<{\n  queryIds: IGroupedQueryIds\n}> {\n  assertStore(store)\n  const state = store.getState()\n  const queryIds: Array<string> = calcDirtyQueryIds(state)\n\n  let queriesToRun = queryIds\n\n  if (\n    process.env.gatsby_executing_command === `develop` &&\n    process.env.GATSBY_QUERY_ON_DEMAND\n  ) {\n    // 404 are special cases in our runtime that ideally use\n    // generic things to work, but for now they have special handling\n    const pagePathFilter = new Set([`/404.html`, `/dev-404-page/`])\n\n    // we want to make sure we run queries for pages that user currently\n    // view in the browser\n    if (websocketManager?.activePaths) {\n      for (const activePath of websocketManager.activePaths) {\n        pagePathFilter.add(activePath)\n      }\n    }\n\n    // we also want to make sure we include pages that were requested from\n    // via `page-data` fetches or websocket requests\n    if (currentlyHandledPendingQueryRuns) {\n      for (const pendingQuery of currentlyHandledPendingQueryRuns) {\n        pagePathFilter.add(pendingQuery)\n      }\n    }\n\n    // static and slice queries are also not on demand\n    queriesToRun = queryIds.filter(\n      queryId =>\n        queryId.startsWith(`sq--`) ||\n        queryId.startsWith(`slice--`) ||\n        pagePathFilter.has(queryId)\n    )\n  }\n\n  return {\n    queryIds: groupQueryIds(queriesToRun),\n  }\n}\n"],"mappings":";;;;AAAA;AAGA;AAEO,eAAeA,qBAAqB,CAAC;EAC1CC,KAAK;EACLC,gBAAgB;EAChBC;AAC6B,CAAC,EAE7B;EACD,IAAAC,wBAAW,EAACH,KAAK,CAAC;EAClB,MAAMI,KAAK,GAAGJ,KAAK,CAACK,QAAQ,EAAE;EAC9B,MAAMC,QAAuB,GAAG,IAAAC,wBAAiB,EAACH,KAAK,CAAC;EAExD,IAAII,YAAY,GAAGF,QAAQ;EAE3B,IACEG,OAAO,CAACC,GAAG,CAACC,wBAAwB,KAAM,SAAQ,IAClDF,OAAO,CAACC,GAAG,CAACE,sBAAsB,EAClC;IACA;IACA;IACA,MAAMC,cAAc,GAAG,IAAIC,GAAG,CAAC,CAAE,WAAU,EAAG,gBAAe,CAAC,CAAC;;IAE/D;IACA;IACA,IAAIb,gBAAgB,aAAhBA,gBAAgB,eAAhBA,gBAAgB,CAAEc,WAAW,EAAE;MACjC,KAAK,MAAMC,UAAU,IAAIf,gBAAgB,CAACc,WAAW,EAAE;QACrDF,cAAc,CAACI,GAAG,CAACD,UAAU,CAAC;MAChC;IACF;;IAEA;IACA;IACA,IAAId,gCAAgC,EAAE;MACpC,KAAK,MAAMgB,YAAY,IAAIhB,gCAAgC,EAAE;QAC3DW,cAAc,CAACI,GAAG,CAACC,YAAY,CAAC;MAClC;IACF;;IAEA;IACAV,YAAY,GAAGF,QAAQ,CAACa,MAAM,CAC5BC,OAAO,IACLA,OAAO,CAACC,UAAU,CAAE,MAAK,CAAC,IAC1BD,OAAO,CAACC,UAAU,CAAE,SAAQ,CAAC,IAC7BR,cAAc,CAACS,GAAG,CAACF,OAAO,CAAC,CAC9B;EACH;EAEA,OAAO;IACLd,QAAQ,EAAE,IAAAiB,oBAAa,EAACf,YAAY;EACtC,CAAC;AACH"}