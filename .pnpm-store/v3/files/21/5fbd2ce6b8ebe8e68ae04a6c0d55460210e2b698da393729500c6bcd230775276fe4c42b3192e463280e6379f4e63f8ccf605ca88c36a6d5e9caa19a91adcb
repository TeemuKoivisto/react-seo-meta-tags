{"version":3,"file":"static-query-utils.js","names":["join","path","posix","outputDir","process","cwd","getStaticQueryPath","hash","getStaticQueryResult","staticQueryPath","absoluteStaticQueryPath","staticQueryRaw","fs","readFile","JSON","parse","toString","staticQueryResultCache","Map","inFlightStaticQueryPromise","clearStaticQueryCaches","clear","getStaticQueryContext","staticQueryHashes","staticQueryResultPromises","staticQueryContext","staticQueryHash","memoizedStaticQueryResult","get","getStaticQueryPromise","set","then","delete","push","results","Promise","all","writeStaticQueryContext","templatePath","outputFilePath","stringifiedContext","stringify","outputFile"],"sources":["../../src/utils/static-query-utils.ts"],"sourcesContent":["import fs from \"fs-extra\"\nimport * as path from \"path\"\n// we want to force posix-style joins, so Windows doesn't produce backslashes for urls\nconst { join } = path.posix\nimport type { IScriptsAndStyles } from \"./client-assets-for-template\"\nimport { IPageDataWithQueryResult } from \"./page-data\"\n\nconst outputDir = path.join(process.cwd(), `.cache`, `page-ssr`)\n\nexport const getStaticQueryPath = (hash: string): string =>\n  join(`page-data`, `sq`, `d`, `${hash}.json`)\n\nexport const getStaticQueryResult = async (hash: string): Promise<any> => {\n  const staticQueryPath = getStaticQueryPath(hash)\n  const absoluteStaticQueryPath = join(process.cwd(), `public`, staticQueryPath)\n  const staticQueryRaw = await fs.readFile(absoluteStaticQueryPath)\n\n  return JSON.parse(staticQueryRaw.toString())\n}\n\nexport interface IResourcesForTemplate extends IScriptsAndStyles {\n  staticQueryContext: Record<string, { data: unknown }>\n}\n\nconst staticQueryResultCache = new Map<string, any>()\nconst inFlightStaticQueryPromise = new Map<string, Promise<any>>()\n\nexport function clearStaticQueryCaches(): void {\n  staticQueryResultCache.clear()\n  inFlightStaticQueryPromise.clear()\n}\n\nexport const getStaticQueryContext = async (\n  staticQueryHashes: IPageDataWithQueryResult[\"staticQueryHashes\"]\n): Promise<{\n  staticQueryContext: IResourcesForTemplate[\"staticQueryContext\"]\n}> => {\n  const staticQueryResultPromises: Array<Promise<void>> = []\n  const staticQueryContext: IResourcesForTemplate[\"staticQueryContext\"] = {}\n\n  for (const staticQueryHash of staticQueryHashes) {\n    const memoizedStaticQueryResult =\n      staticQueryResultCache.get(staticQueryHash)\n    if (memoizedStaticQueryResult) {\n      staticQueryContext[staticQueryHash] = memoizedStaticQueryResult\n      continue\n    }\n\n    let getStaticQueryPromise = inFlightStaticQueryPromise.get(staticQueryHash)\n    if (!getStaticQueryPromise) {\n      getStaticQueryPromise = getStaticQueryResult(staticQueryHash)\n      inFlightStaticQueryPromise.set(staticQueryHash, getStaticQueryPromise)\n      getStaticQueryPromise.then(() => {\n        inFlightStaticQueryPromise.delete(staticQueryHash)\n      })\n    }\n\n    staticQueryResultPromises.push(\n      getStaticQueryPromise.then(results => {\n        staticQueryContext[staticQueryHash] = results\n      })\n    )\n  }\n\n  await Promise.all(staticQueryResultPromises)\n\n  return { staticQueryContext }\n}\n\nexport const writeStaticQueryContext = async (\n  staticQueryHashes: IPageDataWithQueryResult[\"staticQueryHashes\"],\n  templatePath: string\n): Promise<{\n  staticQueryContext: IResourcesForTemplate[\"staticQueryContext\"]\n}> => {\n  const outputFilePath = path.join(\n    outputDir,\n    `sq-context`,\n    templatePath,\n    `sq-context.json`\n  )\n\n  const { staticQueryContext } = await getStaticQueryContext(staticQueryHashes)\n\n  const stringifiedContext = JSON.stringify(staticQueryContext)\n  await fs.outputFile(outputFilePath, stringifiedContext)\n\n  return { staticQueryContext }\n}\n"],"mappings":";;;;;;AAAA;AACA;AAA4B;AAAA;AAC5B;AACA,MAAM;EAAEA;AAAK,CAAC,GAAGC,IAAI,CAACC,KAAK;AAI3B,MAAMC,SAAS,GAAGF,IAAI,CAACD,IAAI,CAACI,OAAO,CAACC,GAAG,EAAE,EAAG,QAAO,EAAG,UAAS,CAAC;AAEzD,MAAMC,kBAAkB,GAAIC,IAAY,IAC7CP,IAAI,CAAE,WAAU,EAAG,IAAG,EAAG,GAAE,EAAG,GAAEO,IAAK,OAAM,CAAC;AAAA;AAEvC,MAAMC,oBAAoB,GAAG,MAAOD,IAAY,IAAmB;EACxE,MAAME,eAAe,GAAGH,kBAAkB,CAACC,IAAI,CAAC;EAChD,MAAMG,uBAAuB,GAAGV,IAAI,CAACI,OAAO,CAACC,GAAG,EAAE,EAAG,QAAO,EAAEI,eAAe,CAAC;EAC9E,MAAME,cAAc,GAAG,MAAMC,gBAAE,CAACC,QAAQ,CAACH,uBAAuB,CAAC;EAEjE,OAAOI,IAAI,CAACC,KAAK,CAACJ,cAAc,CAACK,QAAQ,EAAE,CAAC;AAC9C,CAAC;AAAA;AAMD,MAAMC,sBAAsB,GAAG,IAAIC,GAAG,EAAe;AACrD,MAAMC,0BAA0B,GAAG,IAAID,GAAG,EAAwB;AAE3D,SAASE,sBAAsB,GAAS;EAC7CH,sBAAsB,CAACI,KAAK,EAAE;EAC9BF,0BAA0B,CAACE,KAAK,EAAE;AACpC;AAEO,MAAMC,qBAAqB,GAAG,MACnCC,iBAAgE,IAG5D;EACJ,MAAMC,yBAA+C,GAAG,EAAE;EAC1D,MAAMC,kBAA+D,GAAG,CAAC,CAAC;EAE1E,KAAK,MAAMC,eAAe,IAAIH,iBAAiB,EAAE;IAC/C,MAAMI,yBAAyB,GAC7BV,sBAAsB,CAACW,GAAG,CAACF,eAAe,CAAC;IAC7C,IAAIC,yBAAyB,EAAE;MAC7BF,kBAAkB,CAACC,eAAe,CAAC,GAAGC,yBAAyB;MAC/D;IACF;IAEA,IAAIE,qBAAqB,GAAGV,0BAA0B,CAACS,GAAG,CAACF,eAAe,CAAC;IAC3E,IAAI,CAACG,qBAAqB,EAAE;MAC1BA,qBAAqB,GAAGrB,oBAAoB,CAACkB,eAAe,CAAC;MAC7DP,0BAA0B,CAACW,GAAG,CAACJ,eAAe,EAAEG,qBAAqB,CAAC;MACtEA,qBAAqB,CAACE,IAAI,CAAC,MAAM;QAC/BZ,0BAA0B,CAACa,MAAM,CAACN,eAAe,CAAC;MACpD,CAAC,CAAC;IACJ;IAEAF,yBAAyB,CAACS,IAAI,CAC5BJ,qBAAqB,CAACE,IAAI,CAACG,OAAO,IAAI;MACpCT,kBAAkB,CAACC,eAAe,CAAC,GAAGQ,OAAO;IAC/C,CAAC,CAAC,CACH;EACH;EAEA,MAAMC,OAAO,CAACC,GAAG,CAACZ,yBAAyB,CAAC;EAE5C,OAAO;IAAEC;EAAmB,CAAC;AAC/B,CAAC;AAAA;AAEM,MAAMY,uBAAuB,GAAG,OACrCd,iBAAgE,EAChEe,YAAoB,KAGhB;EACJ,MAAMC,cAAc,GAAGtC,IAAI,CAACD,IAAI,CAC9BG,SAAS,EACR,YAAW,EACZmC,YAAY,EACX,iBAAgB,CAClB;EAED,MAAM;IAAEb;EAAmB,CAAC,GAAG,MAAMH,qBAAqB,CAACC,iBAAiB,CAAC;EAE7E,MAAMiB,kBAAkB,GAAG1B,IAAI,CAAC2B,SAAS,CAAChB,kBAAkB,CAAC;EAC7D,MAAMb,gBAAE,CAAC8B,UAAU,CAACH,cAAc,EAAEC,kBAAkB,CAAC;EAEvD,OAAO;IAAEf;EAAmB,CAAC;AAC/B,CAAC;AAAA"}