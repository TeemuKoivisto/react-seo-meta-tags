{"version":3,"file":"transform-document.js","names":["extractEnumValues","value","acc","hasValue","kind","graphql","Kind","ENUM","push","LIST","listItem","values","undefined","isOldSortObject","props","Array","isArray","hasFields","key","Object","entries","pathSegmentsToAst","path","split","reduceRight","previousNode","fieldPathSegment","OBJECT","fields","OBJECT_FIELD","name","NAME","processGraphQLQuery","query","hasChanged","ast","parse","visit","Argument","node","field","newObjects","i","length","order","err","Error","tranformDocument","error"],"sources":["../../src/query/transform-document.ts"],"sourcesContent":["import * as graphql from \"graphql\"\n\nfunction extractEnumValues(\n  value: graphql.ValueNode,\n  acc: Array<string> = []\n): undefined | Array<string> {\n  let hasValue = false\n  if (value.kind === graphql.Kind.ENUM) {\n    hasValue = true\n    acc.push(value.value)\n  } else if (value.kind === graphql.Kind.LIST) {\n    // list can be empty but it indicate that it is set at least\n    hasValue = true\n    for (const listItem of value.values) {\n      extractEnumValues(listItem, acc)\n    }\n  }\n  return hasValue ? acc : undefined\n}\n\ninterface IOldSortObject {\n  fields: Array<string>\n  order?: Array<\"ASC\" | \"DESC\">\n}\n\nfunction isOldSortObject(props: unknown): props is IOldSortObject {\n  if (!props || typeof props !== `object` || Array.isArray(props)) {\n    return false\n  }\n\n  let hasFields = false\n  // skip if there any unexpected keys\n  for (const [key, value] of Object.entries(props)) {\n    if (key === `fields`) {\n      if (value) {\n        hasFields = true\n      }\n    } else if (key !== `order`) {\n      return false\n    }\n  }\n\n  return hasFields\n}\n\nfunction pathSegmentsToAst(\n  path: string,\n  value: string\n): graphql.ObjectValueNode | graphql.EnumValueNode {\n  return path.split(`___`).reduceRight(\n    (previousNode, fieldPathSegment) => {\n      return {\n        kind: graphql.Kind.OBJECT,\n        fields: [\n          {\n            kind: graphql.Kind.OBJECT_FIELD,\n            name: {\n              kind: graphql.Kind.NAME,\n              value: fieldPathSegment,\n            },\n            value: previousNode,\n          },\n        ],\n      }\n    },\n    {\n      kind: graphql.Kind.ENUM,\n      value,\n    } as graphql.ObjectValueNode | graphql.EnumValueNode\n  )\n}\n\nfunction processGraphQLQuery(query: string | graphql.DocumentNode): {\n  ast: graphql.DocumentNode\n  hasChanged: boolean\n} {\n  try {\n    let hasChanged = false // this is sort of a hack, but print changes formatting and we only want to use it when we have to\n    const ast = typeof query === `string` ? graphql.parse(query) : query\n\n    graphql.visit(ast, {\n      Argument(node) {\n        if (node.name.value === `sort`) {\n          if (node.value.kind !== graphql.Kind.OBJECT) {\n            return\n          }\n\n          // old style sort: `allX(sort: { fields: <something>, order?: </something> })\n          const props: Record<string, Array<string> | undefined> = {}\n          for (const field of node.value.fields) {\n            props[field.name.value] = extractEnumValues(field.value)\n          }\n\n          if (!isOldSortObject(props)) {\n            return\n          }\n\n          // iterate over each pair of field and order and create new object style for each\n          const newObjects: Array<\n            graphql.ObjectValueNode | graphql.EnumValueNode\n          > = []\n          for (let i = 0; i < props.fields.length; i++) {\n            const field = props.fields[i]\n            const order = props.order?.[i] ?? `ASC`\n\n            newObjects.push(pathSegmentsToAst(field, order))\n          }\n\n          if (newObjects.length === 0) {\n            return\n          }\n\n          // @ts-ignore node.value apparently is read-only ...\n          node.value =\n            newObjects.length > 1\n              ? {\n                  kind: graphql.Kind.LIST,\n                  values: newObjects,\n                }\n              : newObjects[0]\n          hasChanged = true\n        } else if (node.name.value === `field`) {\n          if (node.value.kind !== graphql.Kind.ENUM) {\n            return\n          }\n\n          // @ts-ignore read-only ...\n          node.value = pathSegmentsToAst(node.value.value, `SELECT`)\n          hasChanged = true\n        }\n      },\n    })\n    return { ast, hasChanged }\n  } catch (err) {\n    throw new Error(\n      `GatsbySortAndAggrCodemod: GraphQL syntax error in query:\\n\\n${query}\\n\\nmessage:\\n\\n${err}`\n    )\n  }\n}\n\nexport function tranformDocument(ast: graphql.DocumentNode): {\n  ast: graphql.DocumentNode\n  hasChanged: boolean\n  error?: Error\n} {\n  if (_CFLAGS_.GATSBY_MAJOR === `5`) {\n    try {\n      return processGraphQLQuery(ast)\n    } catch (error) {\n      return { ast, hasChanged: false, error }\n    }\n  }\n  return { ast, hasChanged: false }\n}\n"],"mappings":"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"}