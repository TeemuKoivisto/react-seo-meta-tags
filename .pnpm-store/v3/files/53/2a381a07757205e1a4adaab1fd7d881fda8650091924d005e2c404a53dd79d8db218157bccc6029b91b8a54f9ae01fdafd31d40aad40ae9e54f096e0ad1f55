{"version":3,"file":"suggest-index.js","names":["suggestIndex","filter","sort","maxFields","filterQueries","createDbQueriesFromObject","prepareQueryArgs","filterQueriesThatCanUseIndex","getQueriesThatCanUseIndex","sortFields","getSortFieldsThatCanUseIndex","length","dedupeAndTrim","toIndexFields","sortDirection","eqFilterQueries","getEqQueries","eqFilterFields","overlap","findOverlappingFields","name","has","canUseIndex","Set","DbComparator","EQ","IN","GTE","LTE","GT","LT","NIN","NE","all","sortBySpecificity","q","getFilterStatement","comparator","querySortArg","fields","order","initialOrder","isDesc","i","field","push","fieldName","filterQuery","find","dbQueryToDottedField","add","queries","map","Map","slice"],"sources":["../../../../src/datastore/lmdb/query/suggest-index.ts"],"sourcesContent":["import { IRunQueryArgs } from \"../../types\"\nimport {\n  createDbQueriesFromObject,\n  DbComparator,\n  DbQuery,\n  dbQueryToDottedField,\n  getFilterStatement,\n  prepareQueryArgs,\n  sortBySpecificity,\n} from \"../../common/query\"\nimport { isDesc } from \"./common\"\n\ninterface ISelectIndexArgs {\n  filter: IRunQueryArgs[\"queryArgs\"][\"filter\"]\n  sort: IRunQueryArgs[\"queryArgs\"][\"sort\"]\n  maxFields?: number\n}\n\ntype IndexField = [fieldName: string, orderDirection: number]\ntype IndexFields = Array<IndexField>\n\n/**\n * Suggest index fields for this combination of filter and sort.\n *\n * Prioritizes sort fields over filter fields when can't use index\n * for both because sorting is expensive both CPU and memory-wise.\n */\nexport function suggestIndex({\n  filter,\n  sort,\n  maxFields = 6,\n}: ISelectIndexArgs): Array<IndexField> {\n  const filterQueries = createDbQueriesFromObject(prepareQueryArgs(filter))\n  const filterQueriesThatCanUseIndex = getQueriesThatCanUseIndex(filterQueries)\n  const sortFields: Array<IndexField> = getSortFieldsThatCanUseIndex(sort)\n\n  if (!sortFields.length && !filterQueriesThatCanUseIndex.length) {\n    return []\n  }\n  if (!filterQueriesThatCanUseIndex.length) {\n    return dedupeAndTrim(sortFields, maxFields)\n  }\n  if (!sortFields.length) {\n    return dedupeAndTrim(toIndexFields(filterQueriesThatCanUseIndex), maxFields)\n  }\n\n  // Combined index for filter+sort only makes sense when all prefix fields have `eq` predicate\n  // Same as https://docs.mongodb.com/manual/tutorial/sort-results-with-indexes/#sort-and-non-prefix-subset-of-an-index\n  const sortDirection = sortFields[0][1]\n  const eqFilterQueries = getEqQueries(filterQueriesThatCanUseIndex)\n  const eqFilterFields = toIndexFields(eqFilterQueries, sortDirection)\n\n  // Index prefix should not contain eq filters overlapping with sort fields\n  const overlap = findOverlappingFields(eqFilterQueries, sortFields)\n\n  return dedupeAndTrim(\n    [\n      ...eqFilterFields.filter(([name]) => !overlap.has(name)),\n      ...sortFields,\n      // Still append other filter fields to the tail of the index to leverage additional filtering\n      //  of results using data stored in the index (without loading full node object)\n      //  Note: fields previously listed in eqFilterFields and sortFields will be removed in dedupeAndTrim\n      ...toIndexFields(filterQueriesThatCanUseIndex, sortDirection),\n    ],\n    maxFields\n  )\n}\n\nconst canUseIndex = new Set([\n  DbComparator.EQ,\n  DbComparator.IN,\n  DbComparator.GTE,\n  DbComparator.LTE,\n  DbComparator.GT,\n  DbComparator.LT,\n  DbComparator.NIN,\n  DbComparator.NE,\n])\n\n/**\n * Returns queries that can potentially use index.\n * Returned list is sorted by query specificity\n */\nfunction getQueriesThatCanUseIndex(all: Array<DbQuery>): Array<DbQuery> {\n  return sortBySpecificity(\n    all.filter(q => canUseIndex.has(getFilterStatement(q).comparator))\n  )\n}\n\nfunction getSortFieldsThatCanUseIndex(\n  querySortArg: IRunQueryArgs[\"queryArgs\"][\"sort\"]\n): Array<IndexField> {\n  const sort = querySortArg || { fields: [], order: [] }\n  const initialOrder = isDesc(sort?.order[0]) ? -1 : 1\n\n  const sortFields: Array<IndexField> = []\n  for (let i = 0; i < sort.fields.length; i++) {\n    const field = sort.fields[i]\n    const order = isDesc(sort.order[i]) ? -1 : 1\n    if (order !== initialOrder) {\n      // Mixed sort order is not supported by our indexes yet :/\n      // See https://github.com/DoctorEvidence/lmdb-store/discussions/62#discussioncomment-898949\n      break\n    }\n    sortFields.push([field, order])\n  }\n  return sortFields\n}\n\nfunction findOverlappingFields(\n  filterQueries: Array<DbQuery>,\n  sortFields: Array<IndexField>\n): Set<string> {\n  const overlap = new Set<string>()\n\n  for (const [fieldName] of sortFields) {\n    const filterQuery = filterQueries.find(\n      q => dbQueryToDottedField(q) === fieldName\n    )\n    if (!filterQuery) {\n      break\n    }\n    overlap.add(fieldName)\n  }\n  return overlap\n}\n\nfunction getEqQueries(filterQueries: Array<DbQuery>): Array<DbQuery> {\n  return filterQueries.filter(\n    filterQuery =>\n      getFilterStatement(filterQuery).comparator === DbComparator.EQ\n  )\n}\n\nfunction toIndexFields(\n  queries: Array<DbQuery>,\n  sortDirection: number = 1\n): IndexFields {\n  return queries.map(\n    (q): IndexField => [dbQueryToDottedField(q), sortDirection]\n  )\n}\n\nfunction dedupeAndTrim(fields: IndexFields, maxFields: number): IndexFields {\n  return [...new Map(fields)].slice(0, maxFields)\n}\n"],"mappings":"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"}