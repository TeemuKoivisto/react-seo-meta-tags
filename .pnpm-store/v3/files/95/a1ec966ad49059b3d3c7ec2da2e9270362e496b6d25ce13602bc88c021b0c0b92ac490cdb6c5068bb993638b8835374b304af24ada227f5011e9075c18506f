{"version":3,"file":"api-node-helpers-docs.js","names":["GatsbyReporter","info","warn","error","panic","panicOnBuild","verbose","activityTimer","GatsbyCache","get","set","del","GatsbyTracing","tracer","parentSpan","startSpan","module","exports","getCache","cache","createContentDigest","actions","loadNodeContent","store","emitter","getNodes","getNode","getNodesByType","reporter","getNodeAndSavePathDependency","createNodeId","tracing","pathPrefix","basePath"],"sources":["../../src/utils/api-node-helpers-docs.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\n\n/***/\nconst GatsbyReporter = {\n  /**\n   * @callback GatsbyReporterFn\n   * @param {string} message Message to display\n   * @returns {void}\n   */\n\n  /**\n   * @callback GatsbyReporterFnWithError\n   * @param {string} message Message to display\n   * @param {Error}[error] Optional error object\n   * @returns {void}\n   */\n\n  /**\n   * @type {GatsbyReporterFn}\n   * @example\n   * reporter.info(`text`)\n   */\n  info: true,\n\n  /**\n   * @type {GatsbyReporterFn}\n   * @example\n   * reporter.warn(`text`)\n   */\n  warn: true,\n\n  /**\n   * @type {GatsbyReporterFnWithError}\n   * @example\n   * reporter.error(`text`, new Error('something'))\n   */\n  error: true,\n\n  /**\n   * @type {GatsbyReporterFnWithError}\n   * @example\n   * reporter.panic(`text`, new Error('something'))\n   */\n  panic: true,\n\n  /**\n   * @type {GatsbyReporterFnWithError}\n   * @example\n   * reporter.panicOnBuild(`text`, new Error('something'))\n   */\n  panicOnBuild: true,\n\n  /**\n   * Note that this method only works if the --verbose option has\n   * been passed to the CLI\n   * @type {GatsbyReporterFn}\n   * @example\n   * reporter.verbose(`text`)\n   */\n  verbose: true,\n\n  /**\n   * @callback GatsbyReporterActivityTimerFn\n   * @param {string} message Timer message to display\n   * @returns {ITimerReporter}\n   */\n\n  /**\n   * Creates a new activity timer with the provided message.\n   * Check the full [return type definition here](https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/src/reporter/reporter-timer.ts#L19).\n   * @type {GatsbyReporterActivityTimerFn}\n   * @example\n   * const activity = reporter.activityTimer(`Timer text`)\n   *\n   * activity.start()\n   * activity.setStatus(`status text`)\n   * activity.end()\n   */\n  activityTimer: true,\n};\n\n/***/\nconst GatsbyCache = {\n  /**\n   * Retrieve cached value\n   * @param {string} key Cache key\n   * @returns {Promise<any>} Promise resolving to cached value\n   * @example\n   * const value = await cache.get(`unique-key`)\n   */\n  get: true,\n\n  /**\n   * Cache value\n   * @param {string} key Cache key\n   * @param {any} value Value to be cached\n   * @returns {Promise<any>} Promise resolving to cached value\n   * @example\n   * await cache.set(`unique-key`, value)\n   */\n  set: true,\n\n  /**\n   * Deletes cached value\n   * @param {string} key Cache key\n   * @returns {Promise<void>} Promise resolving once key is deleted from cache\n   * @example\n   * await cache.del(`unique-key`)\n   */\n  del: true,\n};\n\n/***/\nconst GatsbyTracing = {\n  /**\n   * Global tracer instance. Check\n   * [opentracing Tracer documentation](https://opentracing-javascript.surge.sh/classes/tracer.html)\n   * for more details.\n   * @type {Opentracing.Tracer}\n   */\n  tracer: true,\n\n  /**\n   * Tracer span representing API run. Check\n   * [opentracing Span documentation](https://opentracing-javascript.surge.sh/classes/span.html)\n   * for more details.\n   * @type {Opentracing.Span}\n   */\n  parentSpan: true,\n\n  /**\n   * @callback GatsbyTracing.StartSpan\n   * @param {string} spanName name of the span\n   * @returns {Opentracing.Span}\n   */\n\n  /**\n   * Start a tracing span. The span will be created as a child of the currently\n   * running API span. This is a convenience wrapper for\n   * ```js\n   * tracing.tracer.startSpan(`span-name`, { childOf: tracing.parentSpan}).\n   * ```\n   * @type {GatsbyTracing.StartSpan}\n   * @example\n   * exports.sourceNodes = async ({ actions, tracing }) => {\n   *   const span = tracing.startSpan(`foo`)\n   *\n   *   // Perform any span operations. E.g. add a tag to your span\n   *   span.setTag(`bar`, `baz`)\n   *\n   *   // Rest of your plugin code\n   *\n   *   span.finish()\n   * }\n   */\n  startSpan: true,\n};\n\n/**\n * Get cache instance by name - this should only be used by plugins that\n * accept subplugins.\n * @param {string} id id of the node\n * @returns {GatsbyCache} See [`cache`](#cache) section for reference.\n */\nmodule.exports.getCache = true;\n\n/**\n * Key-value store used to persist results of time/memory/cpu intensive\n * tasks. All functions are async and return promises.\n * @type {GatsbyCache}\n */\nmodule.exports.cache = true;\n\n/**\n * Create a stable content digest from a string or object, you can use the\n * result of this function to set the `internal.contentDigest` field\n * on nodes. Gatsby uses the value of this field to invalidate stale data\n * when your content changes.\n * @param {(string|object)} input\n * @returns {string} Hash string\n * @example\n * const node = {\n *   ...nodeData,\n *   internal: {\n *     type: `TypeOfNode`,\n *     contentDigest: createContentDigest(nodeData)\n *   }\n * }\n */\nmodule.exports.createContentDigest = true;\n\n/**\n * Collection of functions used to programmatically modify Gatsbyâ€™s internal state.\n *\n * See [`actions`](/docs/actions/) reference.\n * @type {Actions}\n */\nmodule.exports.actions = true;\n\n/**\n * Get content for a node from the plugin that created it.\n * @param {Node} node\n * @returns {Promise<string>}\n * @example\n * module.exports = async function onCreateNode(\n *   { node, loadNodeContent, actions, createNodeId }\n * ) {\n *   if (node.internal.mediaType === 'text/markdown') {\n *     const { createNode, createParentChildLink } = actions\n *     const textContent = await loadNodeContent(node)\n *     // process textContent and create child nodes\n *   }\n * }\n */\nmodule.exports.loadNodeContent = true;\n\n/**\n * Internal redux state used for application state. Do not use, unless you\n * absolutely must. Store is considered a private API and can change with\n * any version.\n * @type {Redux.Store}\n */\nmodule.exports.store = true;\n\n/**\n * Internal event emitter / listener.  Do not use, unless you absolutely\n * must. Emitter is considered a private API and can change with any version.\n * @type {Emitter}\n */\nmodule.exports.emitter = true;\n\n/**\n * Get array of all nodes.\n * @returns {Node[]} Array of nodes.\n * @example\n * const allNodes = getNodes()\n */\nmodule.exports.getNodes = true;\n\n/**\n * Get single node by given ID.\n * Don't use this in graphql resolvers - see\n * [`getNodeAndSavePathDependency`](#getNodeAndSavePathDependency).\n * @param {string} ID id of the node.\n * @returns {Node} Single node instance.\n * @example\n * const node = getNode(id)\n */\nmodule.exports.getNode = true;\n\n/**\n * Get array of nodes of given type.\n * @param {string} Type of nodes\n * @returns {Node[]} Array of nodes.\n * @example\n * const markdownNodes = getNodesByType(`MarkdownRemark`)\n */\nmodule.exports.getNodesByType = true;\n\n/**\n * Set of utilities to output information to user\n * @type {GatsbyReporter}\n */\nmodule.exports.reporter = true;\n\n/**\n * Get single node by given ID and create dependency for given path.\n * This should be used instead of `getNode` in graphql resolvers to enable\n * tracking dependencies for query results. If it's not used Gatsby will\n * not rerun query if node changes leading to stale query results. See\n * [Page -> Node Dependency Tracking](/docs/page-node-dependencies/)\n * for more details.\n * @param {string} ID id of the node.\n * @param {string} path of the node.\n * @returns {Node} Single node instance.\n */\nmodule.exports.getNodeAndSavePathDependency = true;\n\n/**\n * Utility function useful to generate globally unique and stable node IDs.\n * It will generate different IDs for different plugins if they use same\n * input.\n *\n * @param {string} input\n * @returns {string} UUIDv5 ID string\n * @example\n * const node = {\n *   id: createNodeId(`${backendData.type}${backendData.id}`),\n *   ...restOfNodeData\n * }\n */\nmodule.exports.createNodeId = true;\n\n/**\n * Set of utilities that allow adding more detailed tracing for plugins.\n * Check\n * [Performance tracing](https://www.gatsbyjs.com/docs/performance-tracing)\n * page for more details.\n * @type {GatsbyTracing}\n */\nmodule.exports.tracing = true;\n\n/**\n * Use to prefix resources URLs. `pathPrefix` will be either empty string or\n * path that starts with slash and doesn't end with slash. `pathPrefix` also\n * becomes `<assetPrefix>/<pathPrefix>` when you pass both `assetPrefix` and\n * `pathPrefix` in your `gatsby-config.js`.\n *\n * See [Adding a Path Prefix](https://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting/path-prefix/)\n * page for details about path prefixing.\n * @type {string}\n */\nmodule.exports.pathPrefix = true;\n\n/**\n * This is the same as `pathPrefix` passed in `gatsby-config.js`.\n * It's an empty string if you don't pass `pathPrefix`.\n * When using assetPrefix, you can use this instead of pathPrefix to recieve the string you set in `gatsby-config.js`.\n * It won't include the `assetPrefix`.\n * @type {string}\n */\nmodule.exports.basePath = true;\n"],"mappings":";;AAAA;;AAEA;AACA,MAAMA,cAAc,GAAG;EACrB;AACF;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;EACEC,IAAI,EAAE,IAAI;EAEV;AACF;AACA;AACA;AACA;EACEC,IAAI,EAAE,IAAI;EAEV;AACF;AACA;AACA;AACA;EACEC,KAAK,EAAE,IAAI;EAEX;AACF;AACA;AACA;AACA;EACEC,KAAK,EAAE,IAAI;EAEX;AACF;AACA;AACA;AACA;EACEC,YAAY,EAAE,IAAI;EAElB;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,OAAO,EAAE,IAAI;EAEb;AACF;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,aAAa,EAAE;AACjB,CAAC;;AAED;AACA,MAAMC,WAAW,GAAG;EAClB;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,GAAG,EAAE,IAAI;EAET;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,GAAG,EAAE,IAAI;EAET;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,GAAG,EAAE;AACP,CAAC;;AAED;AACA,MAAMC,aAAa,GAAG;EACpB;AACF;AACA;AACA;AACA;AACA;EACEC,MAAM,EAAE,IAAI;EAEZ;AACF;AACA;AACA;AACA;AACA;EACEC,UAAU,EAAE,IAAI;EAEhB;AACF;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,SAAS,EAAE;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAC,MAAM,CAACC,OAAO,CAACC,QAAQ,GAAG,IAAI;;AAE9B;AACA;AACA;AACA;AACA;AACAF,MAAM,CAACC,OAAO,CAACE,KAAK,GAAG,IAAI;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,MAAM,CAACC,OAAO,CAACG,mBAAmB,GAAG,IAAI;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACAJ,MAAM,CAACC,OAAO,CAACI,OAAO,GAAG,IAAI;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAL,MAAM,CAACC,OAAO,CAACK,eAAe,GAAG,IAAI;;AAErC;AACA;AACA;AACA;AACA;AACA;AACAN,MAAM,CAACC,OAAO,CAACM,KAAK,GAAG,IAAI;;AAE3B;AACA;AACA;AACA;AACA;AACAP,MAAM,CAACC,OAAO,CAACO,OAAO,GAAG,IAAI;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACAR,MAAM,CAACC,OAAO,CAACQ,QAAQ,GAAG,IAAI;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAT,MAAM,CAACC,OAAO,CAACS,OAAO,GAAG,IAAI;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACAV,MAAM,CAACC,OAAO,CAACU,cAAc,GAAG,IAAI;;AAEpC;AACA;AACA;AACA;AACAX,MAAM,CAACC,OAAO,CAACW,QAAQ,GAAG,IAAI;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAZ,MAAM,CAACC,OAAO,CAACY,4BAA4B,GAAG,IAAI;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAb,MAAM,CAACC,OAAO,CAACa,YAAY,GAAG,IAAI;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACAd,MAAM,CAACC,OAAO,CAACc,OAAO,GAAG,IAAI;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAf,MAAM,CAACC,OAAO,CAACe,UAAU,GAAG,IAAI;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACAhB,MAAM,CAACC,OAAO,CAACgB,QAAQ,GAAG,IAAI"}