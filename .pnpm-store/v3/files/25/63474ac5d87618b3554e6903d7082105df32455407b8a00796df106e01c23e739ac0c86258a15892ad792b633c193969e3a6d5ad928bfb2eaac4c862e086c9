{"version":3,"file":"create-pages.js","names":["isInitialCreatePages","createPagesCount","createPages","parentSpan","gatsbyNodeGraphQLFunction","store","deferNodeMutation","shouldRunCreatePagesStatefully","assertStore","activity","reporter","activityTimer","start","timestamp","Date","now","currentPages","Map","getState","pages","originalGraphQL","wrappedGraphQL","returnValue","apply","arguments","end","totalMS","warn","traceId","apiRunnerNode","graphql","waitForCascadingActions","span","dataStore","getDataStore","info","countNodes","size","process","env","gatsby_log_level","types","getTypes","verbose","length","map","type","join","deletedPages","deleteUntouchedPages","tim","changedPages","findChangedPages","slices","forEach","slice","updatedAt","dispatch","payload","name","componentPath","actions","apiFinished","apiName"],"sources":["../../src/services/create-pages.ts"],"sourcesContent":["import reporter from \"gatsby-cli/lib/reporter\"\nimport apiRunnerNode from \"../utils/api-runner-node\"\nimport { IDataLayerContext } from \"../state-machines/data-layer/types\"\nimport { assertStore } from \"../utils/assert-store\"\nimport { IGatsbyPage } from \"../redux/types\"\nimport { actions } from \"../redux/actions\"\nimport { deleteUntouchedPages, findChangedPages } from \"../utils/changed-pages\"\nimport { getDataStore } from \"../datastore\"\n\nconst isInitialCreatePages = true\nlet createPagesCount = 0\nexport async function createPages({\n  parentSpan,\n  gatsbyNodeGraphQLFunction,\n  store,\n  deferNodeMutation,\n  shouldRunCreatePagesStatefully,\n}: Partial<IDataLayerContext>): Promise<{\n  deletedPages: Array<string>\n  changedPages: Array<string>\n}> {\n  assertStore(store)\n  const activity = reporter.activityTimer(`createPages`, {\n    parentSpan,\n  })\n  activity.start()\n  const timestamp = Date.now()\n  const currentPages = new Map<string, IGatsbyPage>(store.getState().pages)\n\n  // Wrap the GraphQL function so we can measure how long it takes to run.\n  const originalGraphQL = gatsbyNodeGraphQLFunction\n  // eslint-disable-next-line\n  async function wrappedGraphQL() {\n    const start = Date.now()\n    // @ts-ignore not sure how to type the following\n    const returnValue = await originalGraphQL.apply(this, arguments) // eslint-disable-line\n    const end = Date.now()\n    const totalMS = end - start\n    if (totalMS > 10000) {\n      reporter.warn(\n        `Your GraphQL query in createPages took ${\n          totalMS / 1000\n        } seconds which is an unexpectedly long time. See https://gatsby.dev/create-pages-performance for tips on how to improve this.`\n      )\n    }\n    return returnValue\n  }\n\n  createPagesCount += 1\n  const traceId = isInitialCreatePages\n    ? `initial-createPages`\n    : `createPages #${createPagesCount}`\n  await apiRunnerNode(\n    `createPages`,\n    {\n      graphql: wrappedGraphQL,\n      traceId,\n      waitForCascadingActions: true,\n      parentSpan: activity.span,\n      deferNodeMutation,\n    },\n    { activity }\n  )\n  activity.end()\n\n  if (shouldRunCreatePagesStatefully) {\n    const activity = reporter.activityTimer(`createPagesStatefully`, {\n      parentSpan,\n    })\n    activity.start()\n    await apiRunnerNode(\n      `createPagesStatefully`,\n      {\n        graphql: gatsbyNodeGraphQLFunction,\n        traceId: `initial-createPagesStatefully`,\n        waitForCascadingActions: true,\n        parentSpan: activity.span,\n        deferNodeMutation,\n      },\n      {\n        activity,\n      }\n    )\n    activity.end()\n  }\n\n  const dataStore = getDataStore()\n  reporter.info(\n    `Total nodes: ${dataStore.countNodes()}, ` +\n      `SitePage nodes: ${\n        store.getState().pages.size\n      } (use --verbose for breakdown)`\n  )\n\n  if (process.env.gatsby_log_level === `verbose`) {\n    const types = dataStore.getTypes()\n    reporter.verbose(\n      `Number of node types: ${types.length}. Nodes per type: ${types\n        .map(type => type + `: ` + dataStore.countNodes(type))\n        .join(`, `)}`\n    )\n  }\n\n  reporter.verbose(`Checking for deleted pages`)\n\n  const deletedPages = deleteUntouchedPages(\n    store.getState().pages,\n    timestamp,\n    !!shouldRunCreatePagesStatefully\n  )\n\n  reporter.verbose(\n    `Deleted ${deletedPages.length} page${deletedPages.length === 1 ? `` : `s`}`\n  )\n\n  const tim = reporter.activityTimer(`Checking for changed pages`, {\n    parentSpan,\n  })\n  tim.start()\n\n  const { changedPages } = findChangedPages(\n    currentPages,\n    store.getState().pages\n  )\n\n  reporter.verbose(\n    `Found ${changedPages.length} changed page${\n      changedPages.length === 1 ? `` : `s`\n    }`\n  )\n\n  tim.end()\n\n  store.getState().slices.forEach(slice => {\n    if (slice.updatedAt < timestamp) {\n      store.dispatch({\n        type: `DELETE_SLICE`,\n        payload: {\n          name: slice.name,\n          componentPath: slice.componentPath,\n        },\n      })\n    }\n  })\n\n  store.dispatch(actions.apiFinished({ apiName: `createPages` }))\n\n  return {\n    changedPages,\n    deletedPages,\n  }\n}\n"],"mappings":"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"}