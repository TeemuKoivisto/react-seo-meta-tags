{"version":3,"file":"index.js","names":["GraphQLDirective","DirectiveLocation","specifiedDirectives","require","link","fileByPath","inferExtensionName","dontInferExtensionName","typeExtensions","description","mimeTypes","args","types","type","defaultValue","childOf","nodeInterface","locations","INTERFACE","builtInFieldExtensions","dateformat","name","formatString","locale","fromNow","difference","extend","fieldConfig","getDateResolver","by","from","on","schemaComposer","typeMapper","convertSDLWrappedTypeName","getType","resolve","fileByRelativePath","proxy","fromNode","options","source","context","info","resolver","defaultFieldResolver","internalExtensionNames","map","directive","reservedExtensionNames","Object","keys","toDirectives","extensions","defaultLocations","extension","createTC","normalizedArgs","convertArgConfigMap","forEach","argName","addDirectives","fieldExtensions","fieldDirectives","FIELD_DEFINITION","addDirective","typeDirectives","OBJECT","processFieldExtensions","typeComposer","parentSpan","getFieldNames","fieldName","getFieldExtensions","filter","includes","prevFieldConfig","getFieldConfig","extendField","module","exports"],"sources":["../../../src/schema/extensions/index.js"],"sourcesContent":["// @flow\nconst {\n  GraphQLDirective,\n  DirectiveLocation,\n  specifiedDirectives,\n} = require(`graphql`)\n\nconst { link, fileByPath } = require(`../resolvers`)\nimport { getDateResolver } from \"../types/date\"\n\nimport type { GraphQLFieldConfigArgumentMap, GraphQLFieldConfig } from \"graphql\"\nimport type { ComposeFieldConfig, ComposeOutputType } from \"graphql-compose\"\n\nexport interface GraphQLFieldExtensionDefinition {\n  name: string;\n  type?: ComposeOutputType;\n  args?: GraphQLFieldConfigArgumentMap;\n  extend(\n    args: GraphQLFieldConfigArgumentMap,\n    prevFieldConfig: GraphQLFieldConfig\n  ): $Shape<ComposeFieldConfig>;\n}\n\nconst inferExtensionName = `infer`\nconst dontInferExtensionName = `dontInfer`\n\nconst typeExtensions = {\n  [inferExtensionName]: {\n    description: `Infer field types from field values.`,\n  },\n  [dontInferExtensionName]: {\n    description: `Do not infer field types from field values.`,\n  },\n  mimeTypes: {\n    description: `Define the mime-types handled by this type.`,\n    args: {\n      types: {\n        type: `[String!]!`,\n        defaultValue: [],\n        description: `The mime-types handled by this type.`,\n      },\n    },\n  },\n  childOf: {\n    description:\n      `Define parent-child relations between types. This is used to add ` +\n      `\\`child*\\` and \\`children*\\` convenience fields like \\`childImageSharp\\`.`,\n    args: {\n      mimeTypes: {\n        type: `[String!]!`,\n        defaultValue: [],\n        description:\n          `A list of mime-types this type is a child of. Usually these are ` +\n          `the mime-types handled by a transformer plugin.`,\n      },\n      types: {\n        type: `[String!]!`,\n        defaultValue: [],\n        description:\n          `A list of types this type is a child of. Usually these are the ` +\n          `types handled by a transformer plugin.`,\n      },\n    },\n  },\n  nodeInterface: {\n    description:\n      `DEPRECATED: Use interface inheritance instead, i.e. \"interface Foo implements Node\".\\n\\n` +\n      `Adds root query fields for an interface. All implementing types ` +\n      `must also implement the Node interface.`,\n    locations: [DirectiveLocation.INTERFACE],\n  },\n}\n\nconst builtInFieldExtensions = {\n  dateformat: {\n    name: `dateformat`,\n    description: `Add date formatting options.`,\n    args: {\n      formatString: `String`,\n      locale: `String`,\n      fromNow: `Boolean`,\n      difference: `String`,\n    },\n    extend(args, fieldConfig) {\n      return getDateResolver(args, fieldConfig)\n    },\n  },\n\n  link: {\n    name: `link`,\n    description: `Link to node by foreign-key relation.`,\n    args: {\n      by: {\n        type: `String!`,\n        defaultValue: `id`,\n      },\n      from: `String`,\n      on: `String`,\n    },\n    extend(args, fieldConfig, schemaComposer) {\n      const type =\n        args.on &&\n        schemaComposer.typeMapper.convertSDLWrappedTypeName(args.on)?.getType()\n      return {\n        resolve: link({ ...args, type }, fieldConfig),\n      }\n    },\n  },\n\n  fileByRelativePath: {\n    name: `fileByRelativePath`,\n    description: `Link to File node by relative path.`,\n    args: {\n      from: `String`,\n    },\n    extend(args, fieldConfig) {\n      return {\n        resolve: fileByPath(args, fieldConfig),\n      }\n    },\n  },\n\n  proxy: {\n    name: `proxy`,\n    description: `Proxy resolver from another field.`,\n    args: {\n      from: `String!`,\n      fromNode: {\n        type: `Boolean!`,\n        defaultValue: false,\n      },\n    },\n    extend(options, fieldConfig) {\n      return {\n        resolve(source, args, context, info) {\n          const resolver = fieldConfig.resolve || context.defaultFieldResolver\n          return resolver(source, args, context, {\n            ...info,\n            from: options.from || info.from,\n            fromNode: options.from ? options.fromNode : info.fromNode,\n          })\n        },\n      }\n    },\n  },\n}\n\n// Reserved for internal use\nconst internalExtensionNames = [\n  `createdFrom`,\n  `default`,\n  `directives`,\n  `infer`,\n  `plugin`,\n  ...specifiedDirectives.map(directive => directive.name),\n]\nconst reservedExtensionNames = [\n  ...internalExtensionNames,\n  ...Object.keys(builtInFieldExtensions),\n]\n\nconst toDirectives = ({\n  schemaComposer,\n  extensions,\n  locations: defaultLocations,\n}) =>\n  Object.keys(extensions).map(name => {\n    const extension = extensions[name]\n    const { args, description, locations, type } = extension\n    // Allow field extensions to register a return type\n    if (type) {\n      schemaComposer.createTC(type)\n    }\n    // Support the `graphql-compose` style of directly providing the field type as string\n    const normalizedArgs = schemaComposer.typeMapper.convertArgConfigMap(args)\n\n    // arg.type is a composer that needs to be converted to graphql-js type\n    Object.keys(normalizedArgs).forEach(argName => {\n      normalizedArgs[argName].type = normalizedArgs[argName].type.getType()\n    })\n\n    return new GraphQLDirective({\n      name,\n      args: normalizedArgs,\n      description,\n      locations: locations || defaultLocations,\n    })\n  })\n\nconst addDirectives = ({ schemaComposer, fieldExtensions = {} }) => {\n  const fieldDirectives = toDirectives({\n    schemaComposer,\n    extensions: fieldExtensions,\n    locations: [DirectiveLocation.FIELD_DEFINITION],\n  })\n  fieldDirectives.forEach(directive => schemaComposer.addDirective(directive))\n  const typeDirectives = toDirectives({\n    schemaComposer,\n    extensions: typeExtensions,\n    locations: [DirectiveLocation.OBJECT],\n  })\n  typeDirectives.forEach(directive => schemaComposer.addDirective(directive))\n}\n\nconst processFieldExtensions = ({\n  fieldExtensions = {},\n  schemaComposer,\n  typeComposer,\n  parentSpan,\n}) => {\n  typeComposer.getFieldNames().forEach(fieldName => {\n    const extensions = typeComposer.getFieldExtensions(fieldName)\n    Object.keys(extensions)\n      .filter(name => !internalExtensionNames.includes(name))\n      .forEach(name => {\n        const { extend } = fieldExtensions[name] || {}\n        if (typeof extend === `function`) {\n          // Always get fresh field config as it will have been changed\n          // by previous field extension\n          const prevFieldConfig = typeComposer.getFieldConfig(fieldName)\n          typeComposer.extendField(\n            fieldName,\n            extend(extensions[name], prevFieldConfig, schemaComposer)\n          )\n        }\n      })\n  })\n}\n\nmodule.exports = {\n  addDirectives,\n  builtInFieldExtensions,\n  internalExtensionNames,\n  processFieldExtensions,\n  reservedExtensionNames,\n  inferExtensionName,\n  dontInferExtensionName,\n}\n"],"mappings":"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"}