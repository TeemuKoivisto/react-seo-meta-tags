{"version":3,"file":"internal.js","names":["createPageDependencies","payload","plugin","type","map","path","nodeId","connection","createPageDependency","deleteComponentsDependencies","paths","replaceComponentQuery","query","componentPath","apiFinished","replaceStaticQuery","args","queryExtracted","traceId","setGraphQLDefinitions","definitionsByName","queryExtractionGraphQLError","error","queryExtractedBabelSuccess","queryExtractionBabelError","setProgramStatus","status","pageQueryRun","queryStart","isPage","clearDirtyQueriesListToEmitViaWebsocket","removeStaleJob","contentDigest","setSiteConfig","config","result","gatsbyConfigSchema","validate","normalizedPayload","value","hasUnknownKeys","details","filter","Array","isArray","length","errorMessages","unknown","context","message","key","suggestion","didYouMean","reporter","panic","id","sourceMessage","join","setFunctions","functions","deleteNodeManifests","createJobV2FromInternalJob","internalJob","dispatch","getState","jobContentDigest","currentState","jobsV2","complete","has","Promise","resolve","get","engineContext","getEngineContext","job","requestId","inProgressJobPromise","getInProcessJobPromise","name","enqueuedJobPromise","enqueueJob","then","removeInProgressJob","clearGatsbyImageSourceUrls"],"sources":["../../../src/redux/actions/internal.ts"],"sourcesContent":["import reporter from \"gatsby-cli/lib/reporter\"\n\nimport {\n  IGatsbyConfig,\n  IGatsbyPlugin,\n  ProgramStatus,\n  ICreatePageDependencyAction,\n  IDeleteComponentDependenciesAction,\n  IReplaceComponentQueryAction,\n  IReplaceStaticQueryAction,\n  IQueryExtractedAction,\n  IQueryExtractionGraphQLErrorAction,\n  IQueryExtractedBabelSuccessAction,\n  IQueryExtractionBabelErrorAction,\n  ISetProgramStatusAction,\n  IPageQueryRunAction,\n  IRemoveStaleJobAction,\n  ISetSiteConfig,\n  ISetSiteFunctions,\n  IGatsbyState,\n  IDefinitionMeta,\n  ISetGraphQLDefinitionsAction,\n  IQueryStartAction,\n  IApiFinishedAction,\n  IQueryClearDirtyQueriesListToEmitViaWebsocket,\n  ICreateJobV2FromInternalAction,\n  ICreatePageDependencyActionPayloadType,\n  IDeleteNodeManifests,\n  IClearGatsbyImageSourceUrlAction,\n} from \"../types\"\n\nimport { gatsbyConfigSchema } from \"../../joi-schemas/joi\"\nimport { didYouMean } from \"../../utils/did-you-mean\"\nimport {\n  enqueueJob,\n  InternalJob,\n  removeInProgressJob,\n  getInProcessJobPromise,\n} from \"../../utils/jobs/manager\"\nimport { getEngineContext } from \"../../utils/engine-context\"\n\n/**\n * Create a dependency between a page and data. Probably for\n * internal use only.\n * @private\n */\nexport const createPageDependencies = (\n  payload: Array<ICreatePageDependencyActionPayloadType>,\n  plugin = ``\n): ICreatePageDependencyAction => {\n  return {\n    type: `CREATE_COMPONENT_DEPENDENCY`,\n    plugin,\n    payload: payload.map(({ path, nodeId, connection }) => {\n      return {\n        path,\n        nodeId,\n        connection,\n      }\n    }),\n  }\n}\n\n/**\n * Create a dependency between a page and data. Probably for\n * internal use only.\n *\n * Shorthand for createPageDependencies.\n * @private\n */\nexport const createPageDependency = (\n  payload: ICreatePageDependencyActionPayloadType,\n  plugin = ``\n): ICreatePageDependencyAction => createPageDependencies([payload], plugin)\n\n/**\n * Delete dependencies between an array of pages and data. Probably for\n * internal use only. Used when deleting pages.\n * @private\n */\nexport const deleteComponentsDependencies = (\n  paths: Array<string>\n): IDeleteComponentDependenciesAction => {\n  return {\n    type: `DELETE_COMPONENTS_DEPENDENCIES`,\n    payload: {\n      paths,\n    },\n  }\n}\n\n/**\n * When the query watcher extracts a GraphQL query, it calls\n * this to store the query with its component.\n * @private\n */\nexport const replaceComponentQuery = ({\n  query,\n  componentPath,\n}: {\n  query: string\n  componentPath: string\n}): IReplaceComponentQueryAction => {\n  return {\n    type: `REPLACE_COMPONENT_QUERY`,\n    payload: {\n      query,\n      componentPath,\n    },\n  }\n}\n\nexport const apiFinished = (\n  payload: IApiFinishedAction[\"payload\"]\n): IApiFinishedAction => {\n  return {\n    type: `API_FINISHED`,\n    payload,\n  }\n}\n\n/**\n * When the query watcher extracts a \"static\" GraphQL query from useStaticQuery\n * it calls this to store the query with its component.\n * @private\n */\nexport const replaceStaticQuery = (\n  args: {\n    name: string\n    componentPath: string\n    id: string\n    query: string\n    hash: string\n  },\n  plugin: IGatsbyPlugin | null | undefined = null\n): IReplaceStaticQueryAction => {\n  return {\n    type: `REPLACE_STATIC_QUERY`,\n    plugin,\n    payload: args,\n  }\n}\n\n/**\n *\n * Report that a query has been extracted from a component. Used by\n * query-compiler.js.\n * @private\n */\nexport const queryExtracted = (\n  { componentPath, query }: { componentPath: string; query: string },\n  plugin: IGatsbyPlugin,\n  traceId?: string\n): IQueryExtractedAction => {\n  return {\n    type: `QUERY_EXTRACTED`,\n    plugin,\n    traceId,\n    payload: { componentPath, query },\n  }\n}\n\n/**\n * Set Definitions for fragment extraction, etc.\n *\n * Used by developer tools such as vscode-graphql & graphiql\n *\n * query-compiler.js.\n * @private\n */\nexport const setGraphQLDefinitions = (\n  definitionsByName: Map<string, IDefinitionMeta>\n): ISetGraphQLDefinitionsAction => {\n  return {\n    type: `SET_GRAPHQL_DEFINITIONS`,\n    payload: definitionsByName,\n  }\n}\n\n/**\n *\n * Report that the Relay Compiler found a graphql error when attempting to extract a query\n * @private\n */\nexport const queryExtractionGraphQLError = (\n  { componentPath, error }: { componentPath: string; error: string },\n  plugin: IGatsbyPlugin,\n  traceId?: string\n): IQueryExtractionGraphQLErrorAction => {\n  return {\n    type: `QUERY_EXTRACTION_GRAPHQL_ERROR`,\n    plugin,\n    traceId,\n    payload: { componentPath, error },\n  }\n}\n\n/**\n *\n * Report that babel was able to extract the graphql query.\n * Indicates that the file is free of JS errors.\n * @private\n */\nexport const queryExtractedBabelSuccess = (\n  { componentPath },\n  plugin: IGatsbyPlugin,\n  traceId?: string\n): IQueryExtractedBabelSuccessAction => {\n  return {\n    type: `QUERY_EXTRACTION_BABEL_SUCCESS`,\n    plugin,\n    traceId,\n    payload: { componentPath },\n  }\n}\n\n/**\n *\n * Report that the Relay Compiler found a babel error when attempting to extract a query\n * @private\n */\nexport const queryExtractionBabelError = (\n  { componentPath, error }: { componentPath: string; error: Error },\n  plugin: IGatsbyPlugin,\n  traceId?: string\n): IQueryExtractionBabelErrorAction => {\n  return {\n    type: `QUERY_EXTRACTION_BABEL_ERROR`,\n    plugin,\n    traceId,\n    payload: { componentPath, error },\n  }\n}\n\n/**\n * Set overall program status e.g. `BOOTSTRAPING` or `BOOTSTRAP_FINISHED`.\n * @private\n */\nexport const setProgramStatus = (\n  status: ProgramStatus,\n  plugin: IGatsbyPlugin,\n  traceId?: string\n): ISetProgramStatusAction => {\n  return {\n    type: `SET_PROGRAM_STATUS`,\n    plugin,\n    traceId,\n    payload: status,\n  }\n}\n\n/**\n * Broadcast that a page's query was run.\n * @private\n */\nexport const pageQueryRun = (\n  payload: IPageQueryRunAction[\"payload\"],\n  plugin: IGatsbyPlugin,\n  traceId?: string\n): IPageQueryRunAction => {\n  return {\n    type: `PAGE_QUERY_RUN`,\n    plugin,\n    traceId,\n    payload,\n  }\n}\n\nexport const queryStart = (\n  { path, componentPath, isPage },\n  plugin: IGatsbyPlugin,\n  traceId?: string\n): IQueryStartAction => {\n  return {\n    type: `QUERY_START`,\n    plugin,\n    traceId,\n    payload: { path, componentPath, isPage },\n  }\n}\n\nexport const clearDirtyQueriesListToEmitViaWebsocket =\n  (): IQueryClearDirtyQueriesListToEmitViaWebsocket => {\n    return {\n      type: `QUERY_CLEAR_DIRTY_QUERIES_LIST_TO_EMIT_VIA_WEBSOCKET`,\n    }\n  }\n\n/**\n * Remove jobs which are marked as stale (inputPath doesn't exists)\n * @private\n */\nexport const removeStaleJob = (\n  contentDigest: string,\n  plugin?: IGatsbyPlugin,\n  traceId?: string\n): IRemoveStaleJobAction => {\n  return {\n    type: `REMOVE_STALE_JOB_V2`,\n    plugin,\n    traceId,\n    payload: {\n      contentDigest,\n    },\n  }\n}\n\n/**\n * Set gatsby config\n * @private\n */\nexport const setSiteConfig = (config?: unknown): ISetSiteConfig => {\n  const result = gatsbyConfigSchema.validate(config || {})\n  const normalizedPayload = result.value as IGatsbyConfig\n\n  if (result.error) {\n    const hasUnknownKeys = result.error.details.filter(\n      details => details.type === `object.unknown`\n    )\n\n    if (Array.isArray(hasUnknownKeys) && hasUnknownKeys.length) {\n      const errorMessages = hasUnknownKeys.map(unknown => {\n        const { context, message } = unknown\n        const key = context?.key\n        const suggestion = key && didYouMean(key)\n\n        if (suggestion) {\n          return `${message}. ${suggestion}`\n        }\n\n        return message\n      })\n\n      reporter.panic({\n        id: `10122`,\n        context: {\n          sourceMessage: errorMessages.join(`\\n`),\n        },\n      })\n    }\n\n    reporter.panic({\n      id: `10122`,\n      context: {\n        sourceMessage: result.error.message,\n      },\n    })\n  }\n\n  return {\n    type: `SET_SITE_CONFIG`,\n    payload: normalizedPayload,\n  }\n}\n\n/**\n * Set gatsby functions\n * @private\n */\nexport const setFunctions = (\n  functions: IGatsbyState[\"functions\"]\n): ISetSiteFunctions => {\n  return {\n    type: `SET_SITE_FUNCTIONS`,\n    payload: functions,\n  }\n}\n\nexport const deleteNodeManifests = (): IDeleteNodeManifests => {\n  return {\n    type: `DELETE_NODE_MANIFESTS`,\n  }\n}\n\nexport const createJobV2FromInternalJob =\n  (internalJob: InternalJob): ICreateJobV2FromInternalAction =>\n  (dispatch, getState): Promise<Record<string, unknown>> => {\n    const jobContentDigest = internalJob.contentDigest\n    const currentState = getState()\n\n    // Check if we already ran this job before, if yes we return the result\n    // We have an inflight (in progress) queue inside the jobs manager to make sure\n    // we don't waste resources twice during the process\n    if (\n      currentState.jobsV2 &&\n      currentState.jobsV2.complete.has(jobContentDigest)\n    ) {\n      return Promise.resolve(\n        currentState.jobsV2.complete.get(jobContentDigest)!.result\n      )\n    }\n    const engineContext = getEngineContext()\n\n    // Always set context, even if engineContext is undefined.\n    // We do this because the final list of jobs for a given engine request includes both:\n    //  - jobs with the same requestId\n    //  - jobs without requestId (technically with requestId === \"\")\n    //\n    // See https://nodejs.org/dist/latest-v16.x/docs/api/async_context.html#async_context_troubleshooting_context_loss\n    // on cases when async context could be lost.\n    dispatch({\n      type: `SET_JOB_V2_CONTEXT`,\n      payload: {\n        job: internalJob,\n        requestId: engineContext?.requestId ?? ``,\n      },\n    })\n\n    const inProgressJobPromise = getInProcessJobPromise(jobContentDigest)\n    if (inProgressJobPromise) {\n      return inProgressJobPromise\n    }\n\n    dispatch({\n      type: `CREATE_JOB_V2`,\n      payload: {\n        job: internalJob,\n      },\n      plugin: { name: internalJob.plugin.name },\n    })\n\n    const enqueuedJobPromise = enqueueJob(internalJob)\n    return enqueuedJobPromise.then(result => {\n      // store the result in redux so we have it for the next run\n      dispatch({\n        type: `END_JOB_V2`,\n        plugin: { name: internalJob.plugin.name },\n        payload: {\n          jobContentDigest,\n          result,\n        },\n      })\n\n      // remove the job from our inProgressJobQueue as it's available in our done state.\n      // this is a perf optimisations so we don't grow our memory too much when using gatsby preview\n      removeInProgressJob(jobContentDigest)\n\n      return result\n    })\n  }\n\nexport const clearGatsbyImageSourceUrls =\n  (): IClearGatsbyImageSourceUrlAction => {\n    return {\n      type: `CLEAR_GATSBY_IMAGE_SOURCE_URL`,\n    }\n  }\n"],"mappings":"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"}