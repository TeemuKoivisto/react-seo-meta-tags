{"version":3,"file":"utils.js","names":["stabilizeSchema","schema","lexicographicSortSchema","sortDefinitions","a","b","name","localeCompare","guessIfUnnnamedQuery","isStaticQuery","filePath","queryType","generatedQueryName","slugify","replacement","lower","pattern","startsWith","guessIfThirdpartyDefinition","test","isFragmentDefinition","def","isFragment","isThirdpartyFragment","isTargetDefinition","filterTargetDefinitions","defMap","defs","push","Map"],"sources":["../../../src/utils/graphql-typegen/utils.ts"],"sourcesContent":["import slugify from \"slugify\"\nimport _ from \"lodash\"\nimport { lexicographicSortSchema } from \"graphql\"\nimport type { GraphQLSchema } from \"graphql\"\nimport { IDefinitionMeta } from \"../../redux/types\"\n\ntype DefinitionName = string\ntype DefinitionMap = Map<DefinitionName, IDefinitionMeta>\n\n/**\n * Makes the schema deterministic by sorting it (so on new saves the whole file doesn't change, only the change that was made). It can be used for e.g. tests when two schema diffs should be compared.\n */\nexport function stabilizeSchema(schema: GraphQLSchema): GraphQLSchema {\n  return lexicographicSortSchema(schema)\n}\n\nexport function sortDefinitions(\n  a: IDefinitionMeta,\n  b: IDefinitionMeta\n): number {\n  return a.name.localeCompare(b.name)\n}\n\n/**\n * Internally in Gatsby we use the function generateQueryName:\n * packages/gatsby/src/query/file-parser.js\n * This function re-implements this partially to guess if a query is unnamed\n */\nfunction guessIfUnnnamedQuery({\n  isStaticQuery,\n  name,\n  filePath,\n}: IDefinitionMeta): boolean {\n  const queryType = isStaticQuery ? `static` : `page`\n  const generatedQueryName = slugify(filePath, {\n    replacement: ` `,\n    lower: false,\n  })\n  const pattern = _.camelCase(`${queryType}-${generatedQueryName}`)\n  return name.startsWith(pattern)\n}\n\nfunction guessIfThirdpartyDefinition({ filePath }: IDefinitionMeta): boolean {\n  return /(node_modules|\\.yarn|\\.cache)/.test(filePath)\n}\n\nfunction isFragmentDefinition(def: IDefinitionMeta): boolean {\n  return def.isFragment\n}\n\nfunction isThirdpartyFragment(def: IDefinitionMeta): boolean {\n  return isFragmentDefinition(def) && guessIfThirdpartyDefinition(def)\n}\n\n/**\n * We don't want third-party definitions/queries unless it's a fragment.\n * We also don't want unnamed queries ending up in the TS types.\n */\nfunction isTargetDefinition(def: IDefinitionMeta): boolean {\n  if (isThirdpartyFragment(def)) {\n    return true\n  }\n  return !(guessIfThirdpartyDefinition(def) || guessIfUnnnamedQuery(def))\n}\n\nexport function filterTargetDefinitions(\n  defMap: DefinitionMap\n): Map<string, IDefinitionMeta> {\n  const defs: Array<[name: string, def: IDefinitionMeta]> = []\n  for (const [name, def] of defMap) {\n    if (isTargetDefinition(def)) {\n      defs.push([name, def])\n    }\n  }\n  return new Map(defs)\n}\n"],"mappings":";;;;;;;;AAAA;AAEA;AAOA;AACA;AACA;AACO,SAASA,eAAe,CAACC,MAAqB,EAAiB;EACpE,OAAO,IAAAC,gCAAuB,EAACD,MAAM,CAAC;AACxC;AAEO,SAASE,eAAe,CAC7BC,CAAkB,EAClBC,CAAkB,EACV;EACR,OAAOD,CAAC,CAACE,IAAI,CAACC,aAAa,CAACF,CAAC,CAACC,IAAI,CAAC;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASE,oBAAoB,CAAC;EAC5BC,aAAa;EACbH,IAAI;EACJI;AACe,CAAC,EAAW;EAC3B,MAAMC,SAAS,GAAGF,aAAa,GAAI,QAAO,GAAI,MAAK;EACnD,MAAMG,kBAAkB,GAAG,IAAAC,gBAAO,EAACH,QAAQ,EAAE;IAC3CI,WAAW,EAAG,GAAE;IAChBC,KAAK,EAAE;EACT,CAAC,CAAC;EACF,MAAMC,OAAO,GAAG,yBAAa,GAAEL,SAAU,IAAGC,kBAAmB,EAAC,CAAC;EACjE,OAAON,IAAI,CAACW,UAAU,CAACD,OAAO,CAAC;AACjC;AAEA,SAASE,2BAA2B,CAAC;EAAER;AAA0B,CAAC,EAAW;EAC3E,OAAO,+BAA+B,CAACS,IAAI,CAACT,QAAQ,CAAC;AACvD;AAEA,SAASU,oBAAoB,CAACC,GAAoB,EAAW;EAC3D,OAAOA,GAAG,CAACC,UAAU;AACvB;AAEA,SAASC,oBAAoB,CAACF,GAAoB,EAAW;EAC3D,OAAOD,oBAAoB,CAACC,GAAG,CAAC,IAAIH,2BAA2B,CAACG,GAAG,CAAC;AACtE;;AAEA;AACA;AACA;AACA;AACA,SAASG,kBAAkB,CAACH,GAAoB,EAAW;EACzD,IAAIE,oBAAoB,CAACF,GAAG,CAAC,EAAE;IAC7B,OAAO,IAAI;EACb;EACA,OAAO,EAAEH,2BAA2B,CAACG,GAAG,CAAC,IAAIb,oBAAoB,CAACa,GAAG,CAAC,CAAC;AACzE;AAEO,SAASI,uBAAuB,CACrCC,MAAqB,EACS;EAC9B,MAAMC,IAAiD,GAAG,EAAE;EAC5D,KAAK,MAAM,CAACrB,IAAI,EAAEe,GAAG,CAAC,IAAIK,MAAM,EAAE;IAChC,IAAIF,kBAAkB,CAACH,GAAG,CAAC,EAAE;MAC3BM,IAAI,CAACC,IAAI,CAAC,CAACtB,IAAI,EAAEe,GAAG,CAAC,CAAC;IACxB;EACF;EACA,OAAO,IAAIQ,GAAG,CAACF,IAAI,CAAC;AACtB"}