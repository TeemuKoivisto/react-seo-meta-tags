{"version":3,"file":"run-query.js","names":["doRunQuery","args","context","createQueryContext","totalCount","runCountOnce","limit","undefined","skip","canUseIndex","Promise","all","nodeTypeNames","map","typeName","createIndex","suggestedIndexFields","entries","performIndexScan","performFullTableScan","sortFields","filterContext","length","result","GatsbyIterable","resultOffset","indexMetadata","getIndexMetadata","needsSorting","nodes","usedSkip","filterNodes","concat","canUseIndexForSorting","mergeSorted","createNodeSortComparator","unlimited","sortedNodes","sortNodesInMemory","actualSkip","slice","runCount","count","needsFiltering","datastore","countNodes","completeFiltering","iterateNodesByType","_","countUsingIndexOnly","e","usedQueries","filterUsingIndex","reverse","Array","from","values","value","getNode","filter","Boolean","intermediateResult","Set","dbQueries","isFullyFiltered","resolvedNodes","store","getState","resolvedNodesCache","filtersToApply","q","has","dbQueryToDottedField","getFilterStatement","node","resolvedFields","get","internal","type","id","dottedField","tmp","resolveFieldValue","isArray","some","v","matchesFilter","arr","sort","queryArgs","firstOnly","databases","createDbQueriesFromObject","prepareQueryArgs","Map","fields","field","i","isDesc","order","suggestIndex","size","index","indexKeyFields","keyFields","sortOrder","nodeComparator","a","b","resolvedAFields","resolvedBFields","direction","valueA","valueB","compareByKeySuffix","prefixLength","aSuffix","key","bSuffix","compareKey"],"sources":["../../../../src/datastore/lmdb/query/run-query.ts"],"sourcesContent":["import {\n  IDataStore,\n  ILmdbDatabases,\n  IQueryResult,\n  IRunQueryArgs,\n} from \"../../types\"\nimport { IGatsbyNode } from \"../../../redux/types\"\nimport { GatsbyIterable } from \"../../common/iterable\"\nimport {\n  createDbQueriesFromObject,\n  DbQuery,\n  dbQueryToDottedField,\n  getFilterStatement,\n  IDbFilterStatement,\n  prepareQueryArgs,\n} from \"../../common/query\"\nimport {\n  createIndex,\n  getIndexMetadata,\n  IIndexMetadata,\n  IndexFields,\n} from \"./create-index\"\nimport {\n  countUsingIndexOnly,\n  filterUsingIndex,\n  IIndexEntry,\n} from \"./filter-using-index\"\nimport { store } from \"../../../redux\"\nimport { isDesc, resolveFieldValue, matchesFilter, compareKey } from \"./common\"\nimport { suggestIndex } from \"./suggest-index\"\n\ninterface IDoRunQueryArgs extends IRunQueryArgs {\n  databases: ILmdbDatabases\n  datastore: IDataStore\n}\n\ntype SortFields = Map<string, number>\n\ninterface IQueryContext {\n  datastore: IDataStore\n  databases: ILmdbDatabases\n  dbQueries: Array<DbQuery>\n  sortFields: SortFields\n  nodeTypeNames: Array<string>\n  suggestedIndexFields: IndexFields\n  indexMetadata?: IIndexMetadata\n  limit?: number\n  skip: number\n  totalCount?: number\n}\n\nexport async function doRunQuery(args: IDoRunQueryArgs): Promise<IQueryResult> {\n  // Note: Keeping doRunQuery method the only async method in chain for perf\n  const context = createQueryContext(args)\n\n  const totalCount = async (): Promise<number> =>\n    runCountOnce({ ...context, limit: undefined, skip: 0 })\n\n  if (canUseIndex(context)) {\n    await Promise.all(\n      context.nodeTypeNames.map(typeName =>\n        createIndex(context, typeName, context.suggestedIndexFields)\n      )\n    )\n    return { entries: performIndexScan(context), totalCount }\n  }\n  return { entries: performFullTableScan(context), totalCount }\n}\n\nfunction performIndexScan(context: IQueryContext): GatsbyIterable<IGatsbyNode> {\n  const { suggestedIndexFields, sortFields } = context\n\n  const filterContext =\n    context.nodeTypeNames.length === 1\n      ? context\n      : {\n          ...context,\n          skip: 0,\n          limit:\n            typeof context.limit === `undefined`\n              ? undefined\n              : context.skip + context.limit,\n        }\n\n  let result = new GatsbyIterable<IGatsbyNode>([])\n  let resultOffset = filterContext.skip\n  for (const typeName of context.nodeTypeNames) {\n    const indexMetadata = getIndexMetadata(\n      context,\n      typeName,\n      suggestedIndexFields\n    )\n    if (!needsSorting(context)) {\n      const { nodes, usedSkip } = filterNodes(filterContext, indexMetadata)\n      result = result.concat(nodes)\n      resultOffset = usedSkip\n      continue\n    }\n    if (canUseIndexForSorting(indexMetadata, sortFields)) {\n      const { nodes, usedSkip } = filterNodes(filterContext, indexMetadata)\n      // Interleave nodes of different types (not expensive for already sorted chunks)\n      result = result.mergeSorted(nodes, createNodeSortComparator(sortFields))\n      resultOffset = usedSkip\n      continue\n    }\n    // The sad part - unlimited filter + in-memory sort\n    const unlimited = { ...context, skip: 0, limit: undefined }\n    const { nodes, usedSkip } = filterNodes(unlimited, indexMetadata)\n    const sortedNodes = sortNodesInMemory(context, nodes)\n    resultOffset = usedSkip\n\n    result = result.mergeSorted(\n      sortedNodes,\n      createNodeSortComparator(sortFields)\n    )\n  }\n  const { limit, skip = 0 } = context\n  const actualSkip = skip - resultOffset\n\n  if (limit || actualSkip) {\n    result = result.slice(actualSkip, limit ? actualSkip + limit : undefined)\n  }\n  return result\n}\n\nfunction runCountOnce(context: IQueryContext): number {\n  if (typeof context.totalCount === `undefined`) {\n    context.totalCount = runCount(context)\n  }\n  return context.totalCount\n}\n\nfunction runCount(context: IQueryContext): number {\n  let count = 0\n\n  if (!needsFiltering(context)) {\n    for (const typeName of context.nodeTypeNames) {\n      count += context.datastore.countNodes(typeName)\n    }\n    return count\n  }\n\n  if (!canUseIndex(context)) {\n    for (const typeName of context.nodeTypeNames) {\n      const nodes = completeFiltering(\n        context,\n        new GatsbyIterable(context.datastore.iterateNodesByType(typeName))\n      )\n      for (const _ of nodes) count++\n    }\n    return count\n  }\n\n  for (const typeName of context.nodeTypeNames) {\n    const indexMetadata = getIndexMetadata(\n      context,\n      typeName,\n      context.suggestedIndexFields\n    )\n    try {\n      count += countUsingIndexOnly({ ...context, indexMetadata })\n    } catch (e) {\n      // We cannot reliably count using index - fallback to full iteration :/\n      for (const _ of filterNodes(context, indexMetadata).nodes) count++\n    }\n  }\n  return count\n}\n\nfunction performFullTableScan(\n  context: IQueryContext\n): GatsbyIterable<IGatsbyNode> {\n  // console.warn(`Fallback to full table scan :/`)\n\n  const { datastore, nodeTypeNames } = context\n\n  let result = new GatsbyIterable<IGatsbyNode>([])\n  for (const typeName of nodeTypeNames) {\n    let nodes = new GatsbyIterable(datastore.iterateNodesByType(typeName))\n    nodes = completeFiltering(context, nodes)\n\n    if (needsSorting(context)) {\n      nodes = sortNodesInMemory(context, nodes)\n      result = result.mergeSorted(\n        nodes,\n        createNodeSortComparator(context.sortFields)\n      )\n    } else {\n      result = result.concat(nodes)\n    }\n  }\n  const { limit, skip = 0 } = context\n\n  if (limit || skip) {\n    result = result.slice(skip, limit ? skip + limit : undefined)\n  }\n  return result\n}\n\nfunction filterNodes(\n  context: IQueryContext,\n  indexMetadata: IIndexMetadata\n): { nodes: GatsbyIterable<IGatsbyNode>; usedSkip: number } {\n  const { entries, usedQueries, usedSkip } = filterUsingIndex({\n    ...context,\n    indexMetadata,\n    reverse: Array.from(context.sortFields.values())[0] === -1,\n  })\n  const nodes = entries\n    .map(({ value }) => context.datastore.getNode(value))\n    .filter(Boolean)\n\n  return {\n    nodes: completeFiltering(\n      context,\n      nodes as GatsbyIterable<IGatsbyNode>,\n      usedQueries\n    ),\n    usedSkip,\n  }\n}\n\n/**\n * Takes intermediate result and applies any remaining filterQueries.\n *\n * If result is already fully filtered - simply returns.\n */\nfunction completeFiltering(\n  context: IQueryContext,\n  intermediateResult: GatsbyIterable<IGatsbyNode>,\n  usedQueries: Set<DbQuery> = new Set()\n): GatsbyIterable<IGatsbyNode> {\n  const { dbQueries } = context\n  if (isFullyFiltered(dbQueries, usedQueries)) {\n    return intermediateResult\n  }\n  // Apply remaining filter operations directly (last resort: slow)\n  const resolvedNodes = store.getState().resolvedNodesCache\n\n  const filtersToApply: Array<[string, IDbFilterStatement]> = dbQueries\n    .filter(q => !usedQueries.has(q))\n    .map(q => [dbQueryToDottedField(q), getFilterStatement(q)])\n\n  return intermediateResult.filter(node => {\n    const resolvedFields = resolvedNodes?.get(node.internal.type)?.get(node.id)\n\n    for (const [dottedField, filter] of filtersToApply) {\n      const tmp = resolveFieldValue(dottedField, node, resolvedFields)\n      const value = Array.isArray(tmp) ? tmp : [tmp]\n      if (value.some(v => !matchesFilter(filter, v))) {\n        // Mimic AND semantics\n        return false\n      }\n    }\n    return true\n  })\n}\n\nfunction sortNodesInMemory(\n  context: IQueryContext,\n  nodes: GatsbyIterable<IGatsbyNode>\n): GatsbyIterable<IGatsbyNode> {\n  // TODO: Sort using index data whenever possible (maybe store data needed for sorting in index values)\n  // TODO: Nodes can be partially sorted by index prefix - we can (and should) exploit this\n  return new GatsbyIterable(() => {\n    const arr = Array.from(nodes)\n    arr.sort(createNodeSortComparator(context.sortFields))\n    return arr\n  })\n}\n\nfunction createQueryContext(args: IDoRunQueryArgs): IQueryContext {\n  const { queryArgs: { filter, sort, limit, skip = 0 } = {}, firstOnly } = args\n\n  return {\n    datastore: args.datastore,\n    databases: args.databases,\n    nodeTypeNames: args.nodeTypeNames,\n    dbQueries: createDbQueriesFromObject(prepareQueryArgs(filter)),\n    sortFields: new Map<string, number>(\n      sort?.fields.map((field, i) => [field, isDesc(sort?.order[i]) ? -1 : 1])\n    ),\n    suggestedIndexFields: new Map(suggestIndex({ filter, sort })),\n    limit: firstOnly ? 1 : limit,\n    skip,\n  }\n}\n\nfunction canUseIndex(context: IQueryContext): boolean {\n  return context.suggestedIndexFields.size > 0\n}\n\nfunction needsFiltering(context: IQueryContext): boolean {\n  return context.dbQueries.length > 0\n}\n\nfunction needsSorting(context: IQueryContext): boolean {\n  return context.sortFields.size > 0\n}\n\n/**\n * Based on assumption that if all sort fields exist in index\n * then any result received from this index is fully sorted\n */\nfunction canUseIndexForSorting(\n  index: IIndexMetadata,\n  sortFields: SortFields\n): boolean {\n  const indexKeyFields = new Map(index.keyFields)\n  for (const [field, sortOrder] of sortFields) {\n    if (indexKeyFields.get(field) !== sortOrder) {\n      return false\n    }\n  }\n  return true\n}\n\nfunction isFullyFiltered(\n  dbQueries: Array<DbQuery>,\n  usedQueries: Set<DbQuery>\n): boolean {\n  return dbQueries.length === usedQueries.size\n}\n\nfunction createNodeSortComparator(sortFields: SortFields): (a, b) => number {\n  const resolvedNodesCache = store.getState().resolvedNodesCache\n\n  return function nodeComparator(a: IGatsbyNode, b: IGatsbyNode): number {\n    const resolvedAFields = resolvedNodesCache?.get(a.internal.type)?.get(a.id)\n    const resolvedBFields = resolvedNodesCache?.get(b.internal.type)?.get(b.id)\n\n    for (const [field, direction] of sortFields) {\n      const valueA: any = resolveFieldValue(field, a, resolvedAFields)\n      const valueB: any = resolveFieldValue(field, b, resolvedBFields)\n\n      if (valueA > valueB) {\n        return direction === 1 ? 1 : -1\n      } else if (valueA < valueB) {\n        return direction === 1 ? -1 : 1\n      }\n    }\n    return 0\n  }\n}\n\nexport function compareByKeySuffix(prefixLength: number) {\n  return function (a: IIndexEntry, b: IIndexEntry): number {\n    const aSuffix = a.key.slice(prefixLength)\n    const bSuffix = b.key.slice(prefixLength)\n    // @ts-ignore\n    return compareKey(aSuffix, bSuffix)\n  }\n}\n"],"mappings":"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"}