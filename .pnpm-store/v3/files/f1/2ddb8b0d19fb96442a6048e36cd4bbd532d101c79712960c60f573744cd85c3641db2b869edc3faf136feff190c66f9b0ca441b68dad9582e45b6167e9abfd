{"version":3,"file":"type-conflict-reporter.js","names":["formatValue","value","Array","isArray","util","inspect","colors","depth","breakLength","Infinity","output","length","push","wasElipsisLast","usedTypes","forEach","item","type","typeOf","includes","join","TypeConflictEntry","constructor","selector","types","Map","addExample","parent","set","description","internal","printEntry","sortedByTypeName","sortBy","from","entries","typeName","report","log","map","TypeConflictReporter","clearConflicts","clear","getEntryFromSelector","dataEntry","get","addConflict","examples","substring","entry","filter","example","printConflicts","size","warn","getConflicts","values"],"sources":["../../../src/schema/infer/type-conflict-reporter.ts"],"sourcesContent":["import sortBy from \"lodash/sortBy\"\nimport report from \"gatsby-cli/lib/reporter\"\nimport typeOf from \"type-of\"\nimport util from \"util\"\n\nimport { Node } from \"../../../index\"\n\nexport interface ITypeConflictExample {\n  value: unknown\n  type: string\n  parent?: Node\n  arrayTypes?: Array<string>\n}\n\ninterface ITypeConflict {\n  value: unknown\n  description?: string\n}\n\nconst formatValue = (value: unknown): string => {\n  if (!Array.isArray(value)) {\n    return util.inspect(value, {\n      colors: true,\n      depth: 0,\n      breakLength: Infinity,\n    })\n  }\n\n  const output: Array<string> = []\n\n  if (value.length === 1) {\n    // For arrays usually a single conflicting item is exposed vs. the whole array\n    output.push(`...`)\n    output.push(formatValue(value[0]))\n    output.push(`...`)\n  } else {\n    let wasElipsisLast = false\n    const usedTypes: Array<string> = []\n    value.forEach(item => {\n      const type = typeOf(item)\n      if (usedTypes.includes(type)) {\n        if (!wasElipsisLast) {\n          output.push(`...`)\n          wasElipsisLast = true\n        }\n      } else {\n        output.push(formatValue(item))\n        wasElipsisLast = false\n        usedTypes.push(type)\n      }\n    })\n  }\n\n  return `[ ${output.join(`, `)} ]`\n}\n\nclass TypeConflictEntry {\n  selector: string\n  types: Map<string, ITypeConflict>\n\n  constructor(selector: string) {\n    this.selector = selector\n    this.types = new Map()\n  }\n\n  addExample({ value, type, parent }: ITypeConflictExample): void {\n    this.types.set(type, {\n      value,\n      description: parent?.internal?.description ?? ``,\n    })\n  }\n\n  printEntry(): void {\n    const sortedByTypeName = sortBy(\n      Array.from(this.types.entries()),\n      ([typeName]) => typeName\n    )\n\n    report.log(\n      `${this.selector}:${sortedByTypeName\n        .map(\n          ([typeName, { value, description }]) =>\n            `\\n - type: ${typeName}\\n   value: ${formatValue(value)}${\n              description && `\\n   source: ${description}`\n            }`\n        )\n        .join(``)}`\n    )\n  }\n}\n\nclass TypeConflictReporter {\n  entries: Map<string, TypeConflictEntry>\n\n  constructor() {\n    this.entries = new Map()\n  }\n\n  clearConflicts(): void {\n    this.entries.clear()\n  }\n\n  getEntryFromSelector(selector: string): TypeConflictEntry {\n    let dataEntry = this.entries.get(selector)\n\n    if (!dataEntry) {\n      dataEntry = new TypeConflictEntry(selector)\n      this.entries.set(selector, dataEntry)\n    }\n\n    return dataEntry\n  }\n\n  addConflict(selector: string, examples: Array<ITypeConflictExample>): void {\n    if (selector.substring(0, 11) === `SitePlugin.`) {\n      // Don't store and print out type conflicts in plugins.\n      // This is out of user control so he/she can't do anything\n      // to hide those.\n      return\n    }\n\n    const entry = this.getEntryFromSelector(selector)\n    examples\n      .filter(example => example.value != null)\n      .forEach(example => entry.addExample(example))\n  }\n\n  printConflicts(): void {\n    if (this.entries.size > 0) {\n      report.warn(\n        `There are conflicting field types in your data.\\n\\n` +\n          `If you have explicitly defined a type for those fields, you can ` +\n          `safely ignore this warning message.\\n` +\n          `Otherwise, Gatsby will omit those fields from the GraphQL schema.\\n\\n` +\n          `If you know all field types in advance, the best strategy is to ` +\n          `explicitly define them with the \\`createTypes\\` action, and skip ` +\n          `inference with the \\`@dontInfer\\` directive.\\n` +\n          `See https://www.gatsbyjs.com/docs/actions/#createTypes`\n      )\n      this.entries.forEach(entry => entry.printEntry())\n    }\n  }\n\n  getConflicts(): Array<TypeConflictEntry> {\n    return Array.from(this.entries.values())\n  }\n}\n\nexport { TypeConflictReporter, TypeConflictEntry }\n"],"mappings":"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"}